<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WangYingGangBlogs</title>
  
  
  <link href="http://cardioid.gitee.io/atom.xml" rel="self"/>
  
  <link href="http://cardioid.gitee.io/"/>
  <updated>2024-04-24T14:35:31.827Z</updated>
  <id>http://cardioid.gitee.io/</id>
  
  <author>
    <name>WangYingGangBlogs</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>周会分享</title>
    <link href="http://cardioid.gitee.io/2024/04/24/Java/OPPO/OPPO/"/>
    <id>http://cardioid.gitee.io/2024/04/24/Java/OPPO/OPPO/</id>
    <published>2024-04-24T15:44:38.000Z</published>
    <updated>2024-04-24T14:35:31.827Z</updated>
    
    <content type="html"><![CDATA[<h1 id="周会分享"><a href="#周会分享" class="headerlink" title="周会分享"></a>周会分享</h1><h2 id="1-架构"><a href="#1-架构" class="headerlink" title="1.架构"></a>1.架构</h2><p>DDD 是一种思想，落地的形态和结构会有不同的方式，甚至在编码上也会有风格的差异。但终期目标就一个；”提供代码的可维护性，降低迭代开发成本。“也是康威定律所说：”任何组织在设计一套系统时，所交付的设计方案在结构上都与该组织的沟通结构保持一致。“</p><h3 id="一、问题碰撞"><a href="#一、问题碰撞" class="headerlink" title="一、问题碰撞"></a>一、问题碰撞</h3><p><code>你用 MVC 写代码，遇到过最大的问题是什么？</code>🤔</p><p>简单、容易、好理解，是 MVC 架构的特点，但也正因为简单的分层逻辑，在适配较复杂的场景并且需要长周期的维护时，代码的迭代成本就会越来越高。如图；</p><p><img src="https://bugstack.cn/images/roadmap/tutorial/road-map-230624-01.png?raw=true" alt="img"></p><ul><li>如果你接触过较大型且已经长期维护项目的 MVC 架构，你就会发现这里的 DAO、PO、VO 对象，在 Service 层相互调用。那么长期开发后，就导致了各个 PO 里的属性字段数量都被撑的特别大。这样的开发方式，将<code>”状态”</code>、<code>“行为“</code>分离到不同的对象中，代码的意图渐渐模糊，膨胀、臃肿和不稳定的架构，让迭代成本增加。随着系统工程的长期迭代，贫血对象开始被众多 serivice 交叉使用，而 service 服务也是相互调用。这样缺少一个上下文关系的开发方式，让长期迭代的 MVC 工程逐步腐化到严重腐化。</li><li>而 DDD 架构首先以解决此类问题为主，将各个属于自己领域范围内的行为和逻辑封装到自己的领域包下处理。这也是 DDD 架构设计的精髓之一。它希望在分治层面合理切割问题空间为更小规模的若干子问题，而问题越小就容易被理解和处理，做到高内聚低耦合。这也是康威定律所提到的，解决复杂场景的设计主要分为：分治、抽象和知识。</li></ul><p><strong>MVC 工程的腐化根本</strong>，就在于对象、服务、组件的交叉混乱使用。时间越长，腐化的越严重。</p><p><img src="https://bugstack.cn/images/roadmap/tutorial/road-map-ddd-02.png?raw=true" alt="img"></p><p>在 MVC 的分层结构就像家里所有人的衣服放一个大衣柜、所有人的裤子放一个大库柜。衣服裤子(对象)，很少的时候很节省空间，<strong>因为你的裤子别人可能也拿去穿，复用一下开发速度很快</strong>。但时间一长，就越来越乱了。🤨 一条裤子被加肥加大，所有人都穿。</p><p>而 DDD 架构的模型分层，则是以人为视角，<strong>一个人就是一个领域，一个领域内包括他所需的衣服、裤子、袜子、鞋子</strong>。虽然刚开始有点浪费空间，但随着软件的长周期发展，后续的维护成本就会降低。</p><h3 id="二、简化理解"><a href="#二、简化理解" class="headerlink" title="二、简化理解"></a>二、简化理解</h3><p>在给大家讲解 MVC 架构的时候，提到了一个简单的开发模型。开发代码可以理解为：<code>“定义属性 -&gt; 创建方法 -&gt; 调用展示”</code>但这个模型结构过于简单，不太适合运用了各类分布式技术栈以及更多逻辑的 DDD 架构。所以在 DDD 这里，我们把开发代码可以抽象为：<code>“触发 -&gt; 函数 -&gt; 连接”</code> 如图；</p><p><img src="https://bugstack.cn/images/roadmap/tutorial/road-map-230624-02.png?raw=true" alt="img"></p><ul><li>DDD 架构常用于微服务场景，因此也一个系统的调用方式就不只是 HTTP 还包括；<code>RPC 远程</code>、<code>MQ 消息</code>、<code>TASK 任务</code>，因此这些种方式都可以理解为触发。</li><li>通过触发调用函数方法，我们这里可以把各个服务都当成一个函数方法来看。</li><li>而函数方法通过连接，调用到其他的接口、数据库、缓存来完成函数逻辑。</li></ul><p>接下来，在带着大家把这些所需的模块，拆分到对应的DDD系统架构中。</p><h3 id="三、架构分层"><a href="#三、架构分层" class="headerlink" title="三、架构分层"></a>三、架构分层</h3><p>如下是 DDD 架构的一种分层结构，也可以有其他种方式，核心的重点在于适合你所在场景的业务开发。以下的分层结构，是在使用 DDD 架构多种的方式开发代码后，做了简化和处理的。右侧的连线是各个模块的依赖关系。接下来就给大家做一下模块的介绍。</p><p><img src="https://bugstack.cn/images/roadmap/tutorial/road-map-230624-03.png?raw=true" alt="img"></p><ul><li><strong>接口定义 - xfg-frame-api</strong>：因为微服务中引用的 RPC 需要对外提供接口的描述信息，也就是调用方在使用的时候，需要引入 Jar 包，让调用方好能依赖接口的定义做代理。</li><li><strong>应用封装 - xfg-frame-app</strong>：这是应用启动和配置的一层，如一些 aop 切面或者 config 配置，以及打包镜像都是在这一层处理。你可以把它理解为专门为了启动服务而存在的。</li><li><strong>领域封装 - xfg-frame-domain</strong>：领域模型服务，是一个非常重要的模块。无论怎么做DDD的分层架构，domain 都是肯定存在的。在一层中会有一个个细分的领域服务，在每个服务包中会有【模型、仓库、服务】这样3部分。</li><li><strong>仓储服务 - xfg-frame-infrastructure</strong>：基础层依赖于 domain 领域层，因为在 domain 层定义了仓储接口需要在基础层实现。这是依赖倒置的一种设计方式。</li><li><strong>领域封装 - xfg-frame-trigger</strong>：触发器层，一般也被叫做 adapter 适配器层。用于提供接口实现、消息接收、任务执行等。所以对于这样的操作，把它叫做触发器层。</li><li><strong>类型定义 - xfg-frame-types</strong>：通用类型定义层，在我们的系统开发中，会有很多类型的定义，包括；基本的 Response、Constants 和枚举。它会被其他的层进行引用使用。</li><li><strong>领域编排【可选】 - xfg-frame-case</strong>：领域编排层，一般对于较大且复杂的的项目，为了更好的防腐和提供通用的服务，一般会添加 case&#x2F;application 层，用于对 domain 领域的逻辑进行封装组合处理。</li></ul><h3 id="四、领域分层"><a href="#四、领域分层" class="headerlink" title="四、领域分层"></a>四、领域分层</h3><p>DDD 领域驱动设计的中心，主要在于领域模型的设计，以领域所需驱动功能实现和数据建模。一个领域服务下面会有多个领域模型，每个领域模型都是一个充血结构。<strong>一个领域模型 &#x3D; 一个充血结构</strong></p><p><img src="https://bugstack.cn/images/roadmap/tutorial/roadmap-ddd-01.png?raw=true" alt="img"></p><ul><li><p>model 模型对象；</p><ul><li>aggreate：聚合对象，实体对象、值对象的协同组织，就是聚合对象。</li><li>entity：实体对象，大多数情况下，实体对象(Entity)与数据库持久化对象(PO)是1v1的关系，但也有为了封装一些属性信息，会出现1vn的关系。</li><li>valobj：值对象，通过对象属性值来识别的对象</li></ul></li><li><p>repository 仓储服务；从数据库等数据源中获取数据，传递的对象可以是聚合对象、实体对象，返回的结果可以是；实体对象、值对象。因为仓储服务是由基础层(infrastructure) 引用领域层(domain)，是一种依赖倒置的结构，但它可以天然的隔离PO数据库持久化对象被引用。</p></li><li><p>service 服务设计；这里要注意，不要以为定义了聚合对象，就把超越1个对象以外的逻辑，都封装到聚合中，这会让你的代码后期越来越难维护。</p><p>聚合更应该注重的是和本对象相关的单一简单封装场景，而把一些重核心业务方到 service 里实现。</p><p><strong>此外；如果你的设计模式应用不佳，那么无论是领域驱动设计、测试驱动设计还是换了三层和四层架构，你的工程质量依然会非常差。</strong></p></li><li><p>对象解释</p><ul><li>DTO 数据传输对象 (data transfer object)，DAO与业务对象或数据访问对象的区别是：DTO的数据的变异子与访问子（mutator和accessor）、语法分析（parser）、序列化（serializer）时不会有任何存储、获取、序列化和反序列化的异常。即DTO是简单对象，不含任何业务逻辑，但可包含序列化和反序列化以用于传输数据。</li></ul></li></ul><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2.代码"></a>2.代码</h2><p>“写代码”有俩个维度：<strong>正确性和可维护性</strong>，把代码写对，是每一个程序员的必备技能，能够把代码写的<strong>具有可维护性</strong>，这是一个程序员从业务迈向职业的第一步。(这句话另一位C++大佬也说过类似的：写给机器读得懂的代码不是本事，要能写出人能读得懂的代码。)</p><p>关于如何写出可维护性的代码，有很多经典书籍，比如&lt;&lt;程序设计实践 &gt;&gt;、&lt;&lt;代码整洁之道&gt;&gt;、&lt;&lt;重构&gt;&gt;等，但是都无法避免一个无情的事实:<strong>程序员们大多会认同这些书上的观点，但是每个人对于这些观点的理解却是千差万别的</strong>。</p><p>比如书上说”命名是要有意义的”，或许很多人只是觉得不用”abc”这种命名就是有意义，但是命名有意义远不止如此，比如代码中常用的”Info”、”Data”、”Manager”等都可能是没有意义的，都是反面代码。这些反面代码，在&lt;&lt;重构&gt;&gt;这本书中，起了一个名字，叫做**代码的坏味道(Bad Smell)**。</p><p>对于代码中的坏味道，往往是很难发现的，因为它们不像代码Bug这么容易发现，所以郑老师就以代码中的坏味道来说，说如何发现代码中常见的坏味道，以及如何解决。</p><p>这里有一份总结，也叫做”<strong>坏味道自查表</strong>“，后面内容会每项单独分析，总结如下：</p><ul><li>命名：</li></ul><ol><li>命名是否具有业务含义；</li><li>命名是否符合英语语法；</li></ol><ul><li>函数：</li></ul><ol><li>代码行是否超过__行；</li><li>参数列表是否超过__个；</li></ol><ul><li>类</li></ul><ol><li>类的字段是否超过__个；</li><li>类之间的依赖关系是否符合架构规则；</li></ol><ul><li>语句</li></ul><ol><li>是否使用for循环；</li><li>是否使用else；</li><li>是否有重复的switch;</li><li>一行代码中是否了连续的方法调用；</li><li>代码中是否出现了setter；</li><li>变量声明之后是否有立即再赋值；</li><li>集合声明之后是否有立即添加元素；</li><li>返回值是否可以使用Optional；</li></ol><p>上面的每一个部分，后面会详细说明为什么是坏味道，以及如何来修改。</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h3><p>有一句叫做”<strong>当你开始思考命名时，就说明你在进阶了</strong>“，前面说了命名的最基本原则就是要有意义，那什么样子的命名是无意义的，是坏味道呢？下面列举几种坏味道的命名。</p><h4 id="不精准的命名"><a href="#不精准的命名" class="headerlink" title="不精准的命名"></a>不精准的命名</h4><p>看一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processChapter</span><span class="params">(<span class="type">long</span> chapterId)</span> &#123;</span><br><span class="line">  <span class="type">Chapter</span> <span class="variable">chapter</span> <span class="operator">=</span> <span class="built_in">this</span>.repository.findByChapterId(chapterId);</span><br><span class="line">  <span class="keyword">if</span> (chapter == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Unknown chapter [&quot;</span> + chapterId + <span class="string">&quot;]&quot;</span>);  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  chapter.setTranslationState(TranslationState.TRANSLATING);</span><br><span class="line">  <span class="built_in">this</span>.repository.save(chapter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码看起来没有问题，通过阅读代码，我们知道该方法信息：方法名为processChapter即处理章节，传递进来一个章节Id，在方法内部先从repository中获取章节Chapter，然后修改其翻译状态为TRANSLATING(翻译中)，最后再进行保存。</p><p>这个方法问题是出在方法名processChapter(处理章节)上，这个方法确实是在处理章节，但是这个名字<strong>太过宽泛</strong>，这里把”章节状态设置为翻译中”叫做处理章节，那么把”章节状态设置为翻译完”、”修改章节内容”等操作是不是都可以叫做处理章节，即如果很多场景都能够叫做处理章节，那么处理章节就<strong>是一个过于宽泛的名字，没有错，但是不精准</strong>。</p><p>这是一种典型的命名坏味道，表明来看名字是有意义的，但是不能有效地反映这段代码的含义，必须花时间和精力去阅读其中的具体逻辑，这也是部分代码难以阅读的根源。</p><p>类似的不精准的命名我们常用的词有:data、info、flag、process、handle、build、maintain、manage、modify等，这些过于宽泛的名字很多时候都是因为在写代码的时候没有想好，就开始写代码了。</p><p>那如何修改呢？首先，<strong>命名要能描述这段代码在做的事情</strong>，比如前面代码做的事情是把”将章节改成翻译中”，那方法名是否应该叫做changeChapterToTranslating呢？</p><p>不可否认，相比于processChapter，这个名字确实有进步，但是它还不算是一个好名字，因为它更多是在描述这段代码在做的细节。<strong>我们之所以要将一段代码封装起来，一个重要原因就是我们不想知道那么多细节，如果把细节平铺开来，那本质上和直接阅读代码细节差别并不大</strong>。</p><p>所以，<strong>一个好的名字应该描述意图，而非细节</strong>。</p><p>就这段代码而言，为什么要把翻译状态设置为翻译中，了解了业务后，这是因为在这里开启了一个翻译的过程，所以这段代码更应该命名为<strong>startTranslation</strong>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startTranslation</span><span class="params">(<span class="type">long</span> chapterId)</span> &#123;</span><br><span class="line">  <span class="type">Chapter</span> <span class="variable">chapter</span> <span class="operator">=</span> <span class="built_in">this</span>.repository.findByChapterId(chapterId);</span><br><span class="line">  <span class="keyword">if</span> (chapter == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Unknown chapter [&quot;</span> + chapterId + <span class="string">&quot;]&quot;</span>); </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  chapter.setTranslationState(TranslationState.TRANSLATING);</span><br><span class="line">  <span class="built_in">this</span>.repository.save(chapter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用技术术语命名"><a href="#用技术术语命名" class="headerlink" title="用技术术语命名"></a>用技术术语命名</h4><p>我们接着来看一段代码：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Book&gt; <span class="attr">bookList</span> = service.getBooks()<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>可以说这是一段常见得不能再常见的代码了，但是这段代码却隐藏了一个典型问题：<strong>用技术术语命名</strong>。</p><p>这个bookList变量之所以叫做bookList，原因是它声明的类型是List，这种命名随处可见，比如xxxMap、xxxSet等。</p><p>这是一种<strong>不费脑子的命名方式</strong>，但是这种命名会带来很多问题，<strong>因为它是一种基于实现细节的命名方式</strong>。</p><p>编程有一个重要的原则是<strong>面向接口编程</strong>，这个原则从另一个角度理解，就是<strong>不要面向实现编程，因为接口是稳定的，而实现是易变的</strong>。大多数人理解是，这个原则是针对类型的，但是在命名上，也应该遵循这个原则。</p><p>为什么呢？比如我发现现在需要的是一个不重复的作品集和，也就是说这个变量的类型从List改成Set，变量类型很容易改，但是所有的变量名都能确保都改好吗？假如漏了一个，就会出现一个叫做bookList的变量，它的类型是一个Set。</p><p>和前面一样，我们需要一个更面向意图的名字，比如这段代码我们就是想拿到一堆书，所以直接命名为books：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Book&gt; <span class="attr">books</span> = service.getBooks()<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>这是发现，这种更表意的名字，是一个更有效的名字。</p><p>还有一种，事实上，在实际的代码中，<strong>技术名称的出现，往往就代表着它缺少了一个应用的模型</strong>。</p><p>比如，在业务代码中直接出现了<strong>Redis</strong>这种技术名词，就说明缺少一个中间层来充当模型，比如下面代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Book <span class="title function_">getByIsbn</span><span class="params">(String isbn)</span> &#123;</span><br><span class="line">  <span class="type">Book</span> <span class="variable">cachedBook</span> <span class="operator">=</span> redisBookStore.get(isbn);</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> book;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一段业务代码，但是出现了Redis，通常来说，业务需求是从缓存获取一个数据，而Redis则是一种实现而已，我们可以增加一个模型cache，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Book <span class="title function_">getByIsbn</span><span class="params">(String isbn)</span> &#123;</span><br><span class="line">  <span class="type">Book</span> <span class="variable">cachedBook</span> <span class="operator">=</span> cache.get(isbn);</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">return</span> book;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种情况下，至于具体缓存是如何实现的，在业务层我们不用关注。</p><p>程序员之所以喜欢用技术名称去命名，一个重要原因是在学习写代码时，很大程序参考了别人代码，而行业优秀的代码往往是一些开源项目，<strong>在一个技术类的项目中，这些技术术语就是它的业务语言，但是对于业务项目，这个说法就必须重新审视了</strong>。</p><h4 id="用业务语言写代码"><a href="#用业务语言写代码" class="headerlink" title="用业务语言写代码"></a>用业务语言写代码</h4><p>不论是不精准的命名，还是技术名称命名，归根结底是一个问题：<strong>对业务理解不到位</strong>。</p><p><strong>想编写可维护的代码，必须要使用业务语言</strong>。从团队的角度看，让每个人根据自己的理解来命名，确实会出现千奇百怪的名字，所以一个良好的团队实践是<strong>建立团队的词汇表</strong>，让团队成员有信息可以参考。</p><p>对于业务语言理解导致的坏味道，就比较难以发现，比如下面方法声明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">approveChapter</span><span class="params">(<span class="type">long</span> chapterId, <span class="type">long</span> userId)</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法的意图是<strong>确定章节内容审核通过</strong>，这里有一个问题，</p><p>chapterId是审核章节的ID，这个没问题，</p><p>但是这个userId是什么呢？通过了解背景，我们知道，这个userId是审核人的userId，因为在审核时需要记录审核人信息。</p><p>通过业务分析，我们会发现这个userId并不是一个好的命名，因为<strong>需要更多的了解才知道这个命名的含义</strong>，所以这里更好的命名是<strong>审核人的Userid</strong>，即可以修改为reviewerUserId:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java</span><br><span class="line">复制代码<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">approveChapter</span><span class="params">(<span class="type">long</span> chapterId, <span class="type">long</span> reviewerUserId)</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种必须了解业务才能发现的坏味道，需要我们在写代码时，清晰地明白业务流程，这样不仅可以消除坏味道，还可以写出更容易维护地代码。</p><h4 id="乱用英语"><a href="#乱用英语" class="headerlink" title="乱用英语"></a>乱用英语</h4><p><strong>英语是程序员绕不开的一个槛</strong>，抛去本篇文章的主题，英语也是广大程序员必须要去学习的，因为只有真正去阅读英语文档或者一些API的英语注释，才能确保最高保真理解其含义，而不是直接查看通过翻译软件翻译出来的可能失真的文档</p><p>继续本篇文章的主题，现在主流的语言都是以英语为基础的，所以想成为一个优秀的程序员，必须要会用英语。这里不要求程序员的英语有多好，但<strong>最低限度的要求是写出来的代码要像是在用英语表达</strong>。</p><p>对于拼音和中文编程，现在的语言都是支持的，这些一眼就能看出的坏味道，本篇文章不做讨论，我们讨论几种不易发现的坏味道。</p><h4 id="违反语法规则的命名"><a href="#违反语法规则的命名" class="headerlink" title="违反语法规则的命名"></a>违反语法规则的命名</h4><p>还是看一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">completedTranslate</span><span class="params">(<span class="keyword">final</span> List&lt;ChapterId&gt; chapterIds)</span> &#123;</span><br><span class="line">  List&lt;Chapter&gt; chapters = repository.findByChapterIdIn(chapterIds);</span><br><span class="line">  chapters.forEach(Chapter::completedTranslate);</span><br><span class="line">  repository.saveAll(chapters); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码看起来没啥问题，就是把一些章节的信息标记为翻译完成，但是仔细发现这里的方法名为completedTranslate，或许作者想表达”完成翻译”这个意图，所以完成还用了完成时的completed，翻译使用<strong>translate</strong>，但是这个名字还是起错了。</p><p>一般来说，常见的命名规则是：<strong>类名是一个名词，表示一个对象，而方法名则是一个动词，或者是动宾短语，表示一个动作</strong>。</p><p>我们以这个为标准，completedTranslate就不是一个合格的动宾结构，这里我们只需要把完成改成complete，翻译改成名称形式即translation即可，所以修改后方法名为completeTranslation:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">completeTranslation</span><span class="params">(<span class="keyword">final</span> List&lt;ChapterId&gt; chapterIds)</span> &#123;</span><br><span class="line">  List&lt;Chapter&gt; chapters = repository.findByChapterIdIn(chapterIds);</span><br><span class="line">  chapters.forEach(Chapter::completeTranslation);</span><br><span class="line">  repository.saveAll(chapters); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这不是一个难以察觉的坏味道，而且经常在我们代码里出现，这里需要上面的命名规则即可。</p><h4 id="不准确的英语词汇"><a href="#不准确的英语词汇" class="headerlink" title="不准确的英语词汇"></a>不准确的英语词汇</h4><p>比如下面代码，定义了枚举，来标识章节的<strong>审核状态</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ChapterAuditStatus</span> &#123;</span><br><span class="line">    PENDING,</span><br><span class="line">    APPROVED,</span><br><span class="line">    REJECTED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的命名或许看不出问题，因为把**”审核”<strong>这个单词放入翻译查询，确实会得到</strong>audit<strong>这个单词，但是同样是审核，在其他地方却有使用</strong>review**这个单词，这就造成了不一致的问题。</p><p>造成这个问题的原因是，直接在翻译软件上，”审核”翻译为audit和review都有，而由于中英文的表达差异也没有太多人去理解。这里想统一，<strong>就需要真正结合业务去理解每个单词真正的偏重点</strong>，</p><p>audit：经过搜索可以发现audit有更官方的味道，类似翻译是审计，</p><p>review：而review则更多是审查的意思，所以review更合适，上面代码就改成了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ChapterReviewStatus</span> &#123;</span><br><span class="line">    PENDING,</span><br><span class="line">    APPROVED,</span><br><span class="line">    REJECTED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相比之下，这种坏味道就是一种高级的坏味道，英语单词用的不准确确实是中国程序员的一个短板。<strong>在这种情况下，最好的解决方案是建立起一个业务词汇表，千万不要臆想</strong>。</p><p>建立业务词汇表的关键点就是<strong>用集体智慧，而非个体智慧，找到业务合适的通用语言</strong>，比如上面涉及章节审核的相关词汇，可以总结为词汇表：</p><table><thead><tr><th>名称</th><th>英文</th><th>说明</th></tr></thead><tbody><tr><td>作品</td><td>Book</td><td>作者创造的作品</td></tr><tr><td>章节</td><td>Chapter</td><td>作品的一部分</td></tr><tr><td>审核</td><td>review</td><td>审核方对作品内容进行查看的过程</td></tr><tr><td>审核通过</td><td>approve</td><td>审核方对作品内容给予通过</td></tr><tr><td>审核未通过</td><td>reject</td><td>审核方对作品内容给予不通过</td></tr></tbody></table><p>有了这种业务词汇表，以后小组内的程序员再也不用纠结命名了。</p><h4 id="英语单词的拼写错误"><a href="#英语单词的拼写错误" class="headerlink" title="英语单词的拼写错误"></a>英语单词的拼写错误</h4><p>一般来说，英语单词的拼写错误在IDE中都会有提醒，但是这里必须要注意一种特殊情况，就是把一个单词拼错误成了另一个单词。</p><p>比如下面代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuerySort</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SortBy sortBy;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SortFiled sortFiled;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的sortFiled本来是想表达”排序的字段”意思，但是把Field拼写成了Filed，就容易让人理解为”排序文件”这种迷惑的意思，所以单词拼写错误一定要注意。</p><p>对于英语能力的提高，无他，<strong>只有强迫自己练习和总结</strong>，把常见的单词记忆，多看看优秀的开源项目，相比于完全掌握英语，掌握编程中涉及的英语还是要容易点。</p><h3 id="去除重复"><a href="#去除重复" class="headerlink" title="去除重复"></a>去除重复</h3><p>重复是一个泥潭，对于程序员来说，要时刻提醒自己不要重复是至关重要的。在软件开发里，有一个重要的原则叫做 <strong>Don’t Repeat Yourself</strong>(不要重复自己，简称DRY)，更经典的叙述在&lt;&lt;程序员修炼之道&gt;&gt;中：<strong>在一个系统中，每一处知识都必须有单一、明确、权威地表述</strong>。</p><p>所以本小节来看看常见的重复代码有哪些。</p><h4 id="重复的结构"><a href="#重复的结构" class="headerlink" title="重复的结构"></a>重复的结构</h4><p>话不多说，还是来看几段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Task</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendBook</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.service.sendBook();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">    <span class="built_in">this</span>.notification.send(<span class="keyword">new</span> <span class="title class_">SendFailure</span>(t)));</span><br><span class="line">    <span class="keyword">throw</span> t;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Task</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendChapter</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.service.sendChapter();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">    <span class="built_in">this</span>.notification.send(<span class="keyword">new</span> <span class="title class_">SendFailure</span>(t)));</span><br><span class="line">    <span class="keyword">throw</span> t;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Task</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startTranslation</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.service.startTranslation();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">    <span class="built_in">this</span>.notification.send(<span class="keyword">new</span> <span class="title class_">SendFailure</span>(t)));</span><br><span class="line">    <span class="keyword">throw</span> t;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是3个业务函数，就是发送作品、发送章节和开始翻译，看起来这3个函数已经写的非常简洁了，但是这3段代码在结构上却有重复的，就是其中的<strong>catch语句</strong>。</p><p>先理解一下业务，这里进行catch的目的就是为了防止系统出了问题无人发掘，所以这里<strong>通过notification给飞书发送一个通知</strong>；</p><p>相比于原来的逻辑，<strong>这个逻辑是后来加上的，所以代码作者不厌其烦的在每一处都添加了这行代码</strong>。</p><p>虽然这3个函数调用的业务代码不同，但是结构是一致的，有重复的结构，我们可以把其中<strong>重复的结构即捕获异常部分给提取出来</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">executeTask</span><span class="params">(<span class="keyword">final</span> Runnable runnable)</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    runnable.run();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">    <span class="built_in">this</span>.notification.send(<span class="keyword">new</span> <span class="title class_">SendFailure</span>(t)));</span><br><span class="line">    <span class="keyword">throw</span> t;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了这个结构，前面几个函数就可以用来改写了，对于支持函数式编程的程序语言来说，可以用语言提供的便利写法来简化代码，如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Task</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendBook</span><span class="params">()</span> &#123;</span><br><span class="line">  executeTask(<span class="built_in">this</span>.service::sendBook);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Task</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendChapter</span><span class="params">()</span> &#123;</span><br><span class="line">  executeTask(<span class="built_in">this</span>.service::sendChapter);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Task</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startTranslation</span><span class="params">()</span> &#123;</span><br><span class="line">  executeTask(<span class="built_in">this</span>.service::startTranslation);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过这个例子的改写，如果再有一些通用结构的调整，比如出错了需要加一些日志，就更好处理了。</p><p>这个例子非常简单，</p><p>但是有2点需要注意：<strong>发现结构重复和思维转变</strong>。</p><p>1.对于结构重复，一般是因为业务变更，或者程序员为了方便直接复制粘贴现有的方法代码，没有做过多考虑而导致的。</p><p>对于思维转变，我为什么要这么说呢？在面我们说命名时，类一般是名称，而函数是动词或者动宾结构，而对于参数一般是名词，这对于Java 8之前是完全没有问题的。</p><p>但是<strong>随着函数式编程的兴起，比如Kotlin和Java 8支持lambda，都是以函数为主角，即高阶函数可以作为参数</strong>。而函数是啥，函数是动作，这里的参数就不仅仅是名词，也可以是动词了。</p><p>比如上面的例子中，修改后的代码，就是传递动作这一典范，所以随着编程语言的进步，我们的编程思维也需要改变和提高。</p><h3 id="做真正的选择"><a href="#做真正的选择" class="headerlink" title="做真正的选择"></a>做真正的选择</h3><p>还是先来看一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (user.isEditor()) &#123;</span><br><span class="line">  service.editChapter(chapterId, title, content, <span class="literal">true</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  service.editChapter(chapterId, title, content, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的逻辑是这样的：editChapter是用来编辑章节的，最后一个参数表示是否审核通过，而user可能是作者也可能是编辑，当是编辑时，自动审核通过，当是作者时则默认是审核不通过(因为无权审核)。</p><p>初看这段代码，感觉没啥毛病，这里也就是使用if来分开了2个不同的业务处理流程，但是仔细观察后，我们发现2个分支调用的函数仅仅是最后一个参数不一样。</p><p>这也是一种重复代码，造成这个原因的是作者在写这段代码时，<strong>脑子只想到if语句判断之后要做什么，而没有想到这个if语句判断的到底是什么。</strong></p><p><strong>写代码要有表达性，要能准确地把意图表达出来</strong>，是写代码过程中非常重要的一环。显然，这里的if判断是为了区分参数，而不是动作，所以我们可以稍微调整一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">approved</span> <span class="operator">=</span> user.isEditor();</span><br><span class="line">service.editChapter(chapterId, title, content, approved);</span><br></pre></td></tr></table></figure><p>注意这里的关注点，并没有直接把user.isEditor()当成参数传递给editChapter函数，原因是对于editChapter函数来说，最后一个Boolean类型的参数表示的是：是否审核通过，而不是这个用户是不是编辑。</p><p>这里单独用一个approved变量，就更容易读懂代码。</p><h3 id="长函数"><a href="#长函数" class="headerlink" title="长函数"></a>长函数</h3><p>说起长函数，这对于程序员来说就再也熟悉不过了，不论是复杂的业务代码，还是一些源代码，总有一些几百甚至上千行的长函数。</p><p>每当在长长的函数体中找到问题所在，再小心翼翼的改动代码，都是一些不愉悦的回忆。</p><p>这个点的问题，大家都知道，但是在说长函数之前，我们需要知道一个点：就是多长的函数才算长？</p><h4 id="多长的函数才算长"><a href="#多长的函数才算长" class="headerlink" title="多长的函数才算长"></a>多长的函数才算长</h4><p>为什么要讨论这个呢？不同的开发团队和不同的开发语言对于长函数的容忍度是不一样的，比如团队认为100行才算长函数，低于100行的不算，那绝大多数的函数都没有必要进行优化。</p><p><strong>对于函数长度容忍度高，这是导致长函数产生的关键点</strong>。</p><p><strong>一个好的程序员面对代码库时要有不同尺度的观察能力，看设计时，要能够高屋建瓴，看代码时，要能细致入微</strong>。</p><p>而对于长函数的长定义也是一样的，回到工作中，”越小越好”是一个追求的目标，只有有一个严格的标准，对代码长度容忍度降低，才会提供对细节的感知力，从而发现原本所谓细枝末节的地方隐藏的问题。</p><p>所以对于Java语言，这里建议长函数的定义是20行，当然不是一个强制标准，当然是越短越好，当一些业务无法拆分时，偶尔超过20行也是可以的。</p><h4 id="长函数的产生"><a href="#长函数的产生" class="headerlink" title="长函数的产生"></a>长函数的产生</h4><p>这里我们要知道长函数产生的一些原因，如果不理解长函数产生的原因，就很难在我们自己写代码时时刻提醒自己，下面列举几个长函数产生的原因。</p><h4 id="以性能为由"><a href="#以性能为由" class="headerlink" title="以性能为由"></a>以性能为由</h4><p>我们都知道，函数调用的过程其实是一个入栈出栈的过程，当函数越多时，入栈出栈的次数就越多，这样会导致性能下降。</p><p>但是随着硬件的发展，和编译器、语言本身的优化，<strong>性能优化不应该是写代码的第一考量</strong>，更不应该拿这一点来写出长函数。</p><h4 id="平铺直叙"><a href="#平铺直叙" class="headerlink" title="平铺直叙"></a>平铺直叙</h4><p>在文章前面我们也说过，定义函数就是为了把一类动作封装，让人可以一眼看出函数意图，但是很多函数实现采用平铺直叙的方式，洋洋洒洒写了几百行，尤其对于复杂的流程，这样就容易产生长函数。</p><p>对于平铺直叙的代码风格，会有2个典型问题：</p><ol><li>把多个业务处理流程放在一个函数里实现；</li><li>把不同层次的细节放到一个函数里实现。</li></ol><p>这2个问题就会导致代码逻辑分层混乱，不符合单一职责原则。</p><p>而解决长函数的方法就是<strong>提取函数</strong>，把一个大函数拆分为若干个小函数。在拆分过程中，<strong>时刻铭记”分离关注点”这个原则</strong>，把不同的流程、不同的层次的代码给分离开来。</p><p>对于提取后的函数，还有一个特点，就是函数名更容易取名和理解。比如很多长函数，逻辑非常多，只能用handleXXX来表示，或者用一个非常长的函数名来表明其意图，这在上一节中我们说过，这是一种坏味道。当长函数不存在时，我们也更容易起名，更容易理解函数。</p><h4 id="一次加一点"><a href="#一次加一点" class="headerlink" title="一次加一点"></a>一次加一点</h4><p>这个场景就更常见了，我们难免会维护一些旧代码，在旧代码上新增功能，为了最小改动，我们经常只在需要的地方加一点点代码，比如最开始的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (code == <span class="number">400</span> || code == <span class="number">401</span>) &#123;</span><br><span class="line">  <span class="comment">// 做一些错误处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随着后面需求越来越多，日积月累，每一次就改一点，可能会变成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (code == <span class="number">400</span> || code == <span class="number">401</span> || code == <span class="number">402</span> || ...</span><br><span class="line">  || code == <span class="number">500</span> || ...</span><br><span class="line">  || ...</span><br><span class="line">  || code == <span class="number">10000</span> || ...) &#123;</span><br><span class="line">  <span class="comment">// 做一些错误处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时再去阅读，就发现很难理解了。</p><p><strong>任何代码都经不起这种无意识的积累，每个人都没有错，但是结果很糟糕</strong>。</p><p>对于这种问题该如何做呢？总不能不增加需求吧，这里有一个”童子军军规”：<strong>让营地比你来时更干净</strong>。</p><p>在编程领域也是这样，<strong>如果我们自己对代码的改动让原有代码变得更糟糕，就需要去改进它</strong>。而这一切的前提是，自己要能发现是否会变得糟糕，所以识别代码坏味道非常必要。</p><h3 id="大类"><a href="#大类" class="headerlink" title="大类"></a>大类</h3><p>说起大类，人们就会和想到长函数一样，满满屏幕的代码，这滋味可不好受。类之所以称为了大类，<strong>一种表现形式就是前面文章所说的长函数</strong>，一个类只要有几个长函数，那么它肯定是一眼望不到边了。</p><p>大类还有一种表现形式，<strong>类里面有特别多的字段和函数</strong>，也许每个函数都不大，但是架不住数量多啊，这也是成为大类的一个主要原因。本节主要说第二种形式的大类，长函数导致的原因我们前面文章已经分析过了。</p><h4 id="分模块"><a href="#分模块" class="headerlink" title="分模块"></a>分模块</h4><p>假如有人问：为什么不把所有代码都写到一个文件里？</p><p>你心里肯定觉得这个问题很傻，正经人谁会把项目代码都写在一个文件里。确实没人会这么做，把文件都写到一个文件里问题是什么呢？</p><p>一方面，相同的功能模块没法复用；另一方面，也是最关键的，把代码写在一个文件里，其复杂度会超出一个人能够掌握的认知范围。也就是说，<strong>一个人理解的东西是有限的，没有人能同时面对所有细节</strong>。</p><p><strong>人类面对复杂事物给出的解决方案是分而治之</strong>，所以我们看到几乎各种程序设计语言都有自己的模块划分方案，从最初的按照文件划分，到后来，使用面向对象方案按照类进行划分，本质上都是一种模块划分的方式。</p><p>当模块划分得足够细，人们面对的就不是细节，而是模块，理解成本就降低了。所以这样我们再来看本节所说的坏味道，<strong>如果一个类里面的内容太多，它就会超过一个人的理解范畴，顾此失彼就在所难免了</strong>。</p><h4 id="大类的产生"><a href="#大类的产生" class="headerlink" title="大类的产生"></a>大类的产生</h4><p>要想理解如何拆分一个大类，我们需要知道，这些大类是如何变大的。</p><h5 id="职责不单一"><a href="#职责不单一" class="headerlink" title="职责不单一"></a>职责不单一</h5><p>最容易产生大类的原因就是<strong>职责的不单一</strong>，我来看一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">long</span> userId;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> String nickname;</span><br><span class="line">  <span class="keyword">private</span> String email;</span><br><span class="line">  <span class="keyword">private</span> String phoneNumber;</span><br><span class="line">  <span class="keyword">private</span> AuthorType authorType;</span><br><span class="line">  <span class="keyword">private</span> ReviewStatus authorReviewStatus;</span><br><span class="line">  <span class="keyword">private</span> EditorType editorType;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个User类拥有一个大类的典型特性，其中包含了一大堆字段；面对这样一个类时，我们要问的第一个问题就是，<strong>这个类的字段都是必需的吗？</strong></p><p>我们仔细分析一下该类，首先是用户ID(userId)、姓名(name)、昵称(nickname)之类应该是一个用户的基本信息，后面的邮箱(email)和电话(phoneNumber)用作登录方式也和用户关联，这里放入User类也好理解。</p><p>再往后看，作者类型(authorType)，这里表示作者是签约作者还是普通作者，签约作者可以设置作品的付费信息，而普通作者不能；后面的字段是作者审核状态(authorReviewStatus)，也就是说，作者成为签约作者，需要一个审核过程，用该字段表示。</p><p>再往后，又有一个编辑类型(editorType)字段，这是因为编辑可以是主编，也可以是小编，他们权限是不一样的。</p><p>这还没有过完所有字段，不过相信你已经发现问题了。首先普通用户既不是作者，也不是编辑，作者和编辑这些相关的字段对于普通用户来说，都是没有意义的；其次对于成为作者的用户，编辑的意义也不大，因为不会成为编辑。</p><p>在这个类的设计里面，其实有普通用户、作者、编辑这3个不同的角色，<strong>都有不同的述求方向和关心的内容</strong>，为什么放在一块，仅仅因为他们都是这个系统的用户，所以放在一个类中。这种做法，严重违反了<strong>单一职责原则</strong>。</p><p>单一职责原则非常重要，它可以让我们<strong>把模块的变化纳入考量</strong>，单一职责原则是衡量软件好坏的一把简单而有效的尺子。所以，破解大类的方法，<strong>关键就是能够把不同的职责拆分开来</strong>。</p><p>回到上面的类中，在业务上有普通用户、作者和编辑3个身份，所以我们需要把系统中默认的User类给拆分开：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">long</span> userId;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> String nickname;</span><br><span class="line">  <span class="keyword">private</span> String email;</span><br><span class="line">  <span class="keyword">private</span> String phoneNumber;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Author</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">long</span> userId;</span><br><span class="line">  <span class="keyword">private</span> AuthorType authorType;</span><br><span class="line">  <span class="keyword">private</span> ReviewStatus authorReviewStatus;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Editor</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">long</span> userId;</span><br><span class="line">  <span class="keyword">private</span> EditorType editorType;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里根据业务需求拆分出了Author和Editor这俩个类，把作者和编辑相关的字段分别移除，而和User类的关系通过userId字段来关联，这样每个类的职责就单一了。</p><h5 id="字段未分组"><a href="#字段未分组" class="headerlink" title="字段未分组"></a>字段未分组</h5><p>大类的产生往往还有一个常见的原因，就是<strong>字段未分组</strong>。有时候，我们会觉得一些字段确实属于某个类，结果是该类还是很大，比如上面拆分后的User类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">long</span> userId;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> String nickname;</span><br><span class="line">  <span class="keyword">private</span> String email;</span><br><span class="line">  <span class="keyword">private</span> String phoneNumber;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面我们分析这些字段都是必需的，但是再仔细分析，我们可以发现userId、name和nickname字段信息基本是不怎么会改变，而email和phoneNumber则都属于联系方式字段，根据绑定各种媒体账号可能会变化较多，所以根据这个理解，我们可以把User类的字段分组，把不同的信息放到不同的类里面：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">long</span> userId;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">String</span> name;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">String</span> nickname;</span><br><span class="line">  <span class="keyword">private</span> Contact contact;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Contact</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">String</span> email;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">String</span> phoneNumber;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们引入了Contact类(联系方式)，把邮箱和电话号码放入了进去，之后任何联系方式相关的调整都可以放入到这个类里面。</p><p>通过调整，我们会发现类变小了，这2种拆分方式总结就是：<strong>前面是根据职责，拆分出了不同的实体；后面将字段做了分组，用类把不同的信息分别做了封装。</strong></p><h3 id="长参数列表"><a href="#长参数列表" class="headerlink" title="长参数列表"></a>长参数列表</h3><p>前面我们说了大类和长函数这俩种非常容易发现的坏味道，还有一种非常容易发现的坏味道，就是长参数列表。</p><p>当一个函数参数有十几个甚至几十个时，不仅会让函数变得非常长，而且在调用函数时传递参数也是一件非常痛苦的事。</p><p>首先，我们思考一下为什么要有参数呢？我们知道，<strong>参数用于函数之间共享信息</strong>。但是函数间共享信息的方式不止一种，除了参数，最常见的就是全局变量。</p><p>在我们初学编程时，老师就说过不要使用全局变量，全局变量有非常多的不确定性，可修改地方太多，所以在日常编程中，尽量少使用全局变量。</p><p>长参数列表的问题和我们之前所说长函数和大类一样，人们能够掌握的东西有限，一旦参数过长，就很难对内容进行把控。</p><p>所以一贯思路，就是减少参数的数量，有如下方法。</p><p>参数封装成类</p><p>我们先来看一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createBook</span><span class="params">(<span class="keyword">final</span> String title, </span></span><br><span class="line"><span class="params">                       <span class="keyword">final</span> String introduction,</span></span><br><span class="line"><span class="params">                       <span class="keyword">final</span> URL coverUrl,</span></span><br><span class="line"><span class="params">                       <span class="keyword">final</span> BookType type,</span></span><br><span class="line"><span class="params">                       <span class="keyword">final</span> BookChannel channel,</span></span><br><span class="line"><span class="params">                       <span class="keyword">final</span> String protagonists,</span></span><br><span class="line"><span class="params">                       <span class="keyword">final</span> String tags,</span></span><br><span class="line"><span class="params">                       <span class="keyword">final</span> <span class="type">boolean</span> completed)</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> Book.builder</span><br><span class="line">    .title(title) </span><br><span class="line">    .introduction(introduction)</span><br><span class="line">    .coverUrl(coverUrl)</span><br><span class="line">    .type(type)</span><br><span class="line">    .channel(channel)</span><br><span class="line">    .protagonists(protagonists)</span><br><span class="line">    .tags(tags)</span><br><span class="line">    .completed(completed)</span><br><span class="line">    .build();</span><br><span class="line">    </span><br><span class="line">  <span class="built_in">this</span>.repository.save(book);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个创建作品的函数，参数包括了创建一个作品需要的所有信息，包括标题、简介、封面URL、类型、归属频道等等。这里看起来没啥问题，只是参数较多而已，但是假如后续需求变化了，创建一个作品又要多2个参数，是不是很自然的就会再加2个参数，时间久了之后，就会更长了。</p><p>和大类”每次只加一点点”类似，我们知道了长函数坏味道形成的原因，那如何解决呢？</p><p>这里所有参数都是和创建作品相关，也是创造作品所必须的，所以我们<strong>可以把参数封装成一个类</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NewBookParamters</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String title;</span><br><span class="line">  <span class="keyword">private</span> String introduction;</span><br><span class="line">  <span class="keyword">private</span> URL coverUrl;</span><br><span class="line">  <span class="keyword">private</span> BookType type;</span><br><span class="line">  <span class="keyword">private</span> BookChannel channel;</span><br><span class="line">  <span class="keyword">private</span> String protagonists;</span><br><span class="line">  <span class="keyword">private</span> String tags;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">boolean</span> completed;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样一来，我们上面函数就变成了下面这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createBook</span><span class="params">(<span class="keyword">final</span> NewBookParamters parameters)</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> Book.builder</span><br><span class="line">    .title(parameters.getTitle()) </span><br><span class="line">    .introduction(parameters.getIntroduction())</span><br><span class="line">    .coverUrl(parameters.getCoverUrl())</span><br><span class="line">    .type(parameters.getType())</span><br><span class="line">    .channel(parameters.getChannel())</span><br><span class="line">    .protagonists(parameters.getProtagonists())</span><br><span class="line">    .tags(parameters.getTags())</span><br><span class="line">    .completed(parameters.isCompleted())</span><br><span class="line">    .build();</span><br><span class="line">    </span><br><span class="line">  <span class="built_in">this</span>.repository.save(book);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看着参数列表由多个变成了一个，但是在函数内使用还是一个一个地取出来，这不是多此一举吗？</p><p>这就涉及到对软件设计的理解，我们<strong>并不是简单地把参数封装成类</strong>。站在软件设计的角度，我们<strong>引入了一个新的模型</strong>，而<strong>一个模型的封装应该是以行为为基础的</strong>。</p><p>之前没有这个模型，我们想不到它应该有什么行为，现在模型产生了，它就应该有配套的行为。从代码我们不难看出，这个模型的行为应该就是创建一个作品对象出来，理解了这一点，代码调整如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NewBookParamters</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String title;</span><br><span class="line">  <span class="keyword">private</span> String introduction;</span><br><span class="line">  <span class="keyword">private</span> URL coverUrl;</span><br><span class="line">  <span class="keyword">private</span> BookType type;</span><br><span class="line">  <span class="keyword">private</span> BookChannel channel;</span><br><span class="line">  <span class="keyword">private</span> String protagonists;</span><br><span class="line">  <span class="keyword">private</span> String tags;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">boolean</span> completed;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> Book <span class="title function_">newBook</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Book.builder</span><br><span class="line">      .title(title) </span><br><span class="line">      .introduction(introduction)</span><br><span class="line">      .coverUrl(coverUrl)</span><br><span class="line">      .type(type)</span><br><span class="line">      .channel(channel)</span><br><span class="line">      .protagonists(protagonists)</span><br><span class="line">      .tags(tags)</span><br><span class="line">      .completed(completed)</span><br><span class="line">      .build();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建作品的函数简化为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createBook</span><span class="params">(<span class="keyword">final</span> NewBookParamters parameters)</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> parameters.newBook();</span><br><span class="line">    </span><br><span class="line">  <span class="built_in">this</span>.repository.save(book);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的关键不仅是把参数封装为类多了一个模型，更重要的是理解模型的行为，即任何模型的封装都是以行为为基础。</p><h4 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h4><p>接下来我们来看一段参数列表不是那么长的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getChapters</span><span class="params">(<span class="keyword">final</span> <span class="type">long</span> bookId, </span></span><br><span class="line"><span class="params">                        <span class="keyword">final</span> HttpClient httpClient,</span></span><br><span class="line"><span class="params">                        <span class="keyword">final</span> ChapterProcessor processor)</span> &#123;</span><br><span class="line">  <span class="type">HttpUriRequest</span> <span class="variable">request</span> <span class="operator">=</span> createChapterRequest(bookId);</span><br><span class="line">  <span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(request);</span><br><span class="line">  List&lt;Chapter&gt; chapters = toChapters(response);</span><br><span class="line">  processor.process(chapters);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数的作用是根据作品ID获取其对应章节的信息，单纯看参数个数，这个函数的参数个数不算多，但是这里的参数列表依旧有问题。</p><p>在这几个参数里面，每次传递进来的</p><p>bookId都是不一样的，是随着请求的不同而改变。</p><p>但是httpClient和processor这2个参数是一样的，因为他们都有相同的逻辑。</p><p>换言之，就是bookId的变化频率和httpClient和processor变化频率不一样。这种变化频率不一样的情况，是<strong>分离关注点的典型情况</strong>，<strong>即动数据(bookId)和静数据(httpClient、processor)应该分离开来</strong>。</p><p>具体到场景中，静态不变的数据完全可以成为函数所在类的一个字段，所以代码可以改写如下：</p><p>this.httpClient</p><p>this.processor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getChapters</span><span class="params">(<span class="keyword">final</span> <span class="type">long</span> bookId)</span> &#123;</span><br><span class="line">  <span class="type">HttpUriRequest</span> <span class="variable">request</span> <span class="operator">=</span> createChapterRequest(bookId);</span><br><span class="line">  <span class="type">HttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="built_in">this</span>.httpClient.execute(request);</span><br><span class="line">  List&lt;Chapter&gt; chapters = toChapters(response);</span><br><span class="line">  <span class="built_in">this</span>.processor.process(chapters);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个坏味道其实是软件设计问题，代码缺乏应有的结构，将本来属于静态的数据却以动态参数的方式传来传去。</p><p>这里<strong>静态分离</strong>，也说明了前面说的可以把长参数列表用一个类进行封装的前提是：<strong>这些参数属于一个类，拥有相同的变化频率</strong>。</p><h4 id="告别标记"><a href="#告别标记" class="headerlink" title="告别标记"></a>告别标记</h4><p>什么是标记，即我们代码中常见的flag，来看一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">editChapter</span><span class="params">(<span class="keyword">final</span> <span class="type">long</span> chapterId, </span></span><br><span class="line"><span class="params">                        <span class="keyword">final</span> String title, </span></span><br><span class="line"><span class="params">                        <span class="keyword">final</span> String content, </span></span><br><span class="line"><span class="params">                        <span class="keyword">final</span> <span class="type">boolean</span> apporved)</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数的作用是编辑章节，前3个参数是待编辑章节的信息，后面表示是否审核通过，这是因为假如是作者角色调用该函数，是不能审核通过的(没有权限)，如果是编辑角色调用该函数，是直接审核通过的。</p><p>这里逻辑看起来没啥问题，<strong>使用flag也是程序员常用的一个手段</strong>，但是也正是假如代码标记过多，就会造成逻辑混乱。</p><p>最简单的解决方式，就是<strong>将标记参数代表的不同路径拆分出来</strong>。比如上面的函数就可以拆分为2个函数，一个函数负责普通的编辑，另一个负责可直接审核通过的编辑：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通的编辑，需要审核</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">editChapter</span><span class="params">(<span class="keyword">final</span> <span class="type">long</span> chapterId, </span></span><br><span class="line"><span class="params">                        <span class="keyword">final</span> String title, </span></span><br><span class="line"><span class="params">                        <span class="keyword">final</span> String content)</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接审核通过的编辑</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">editChapterWithApproval</span><span class="params">(<span class="keyword">final</span> <span class="type">long</span> chapterId,</span></span><br><span class="line"><span class="params">                                    <span class="keyword">final</span> String title,</span></span><br><span class="line"><span class="params">                                    <span class="keyword">final</span> String content)</span> &#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>标记参数在代码中的<strong>表现形式不仅仅是布尔值类型，有的是以枚举形式，还有的直接是以字符串或者整数形式</strong>。不论哪种形式，我们都可以通过拆分函数的方式将他们拆开，这种手法叫做<strong>移除标记参数</strong>。</p><h3 id="滥用控制语句"><a href="#滥用控制语句" class="headerlink" title="滥用控制语句"></a>滥用控制语句</h3><p>本小节开始说一些代码中的坏味道，包括我们常见的嵌套代码和if、else语句等，可能会刷新我们之前的编程习惯认知。</p><h4 id="嵌套的代码"><a href="#嵌套的代码" class="headerlink" title="嵌套的代码"></a>嵌套的代码</h4><p>嵌套的代码大家肯定都写过，效果就是函数结尾会有一大堆括号，给我们阅读代码带来了极度不方便，下面给出一个简单的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">distributeEpubs</span><span class="params">(<span class="keyword">final</span> <span class="type">long</span> bookId)</span> &#123;</span><br><span class="line">  List&lt;Epub&gt; epubs = <span class="built_in">this</span>.getEpubsByBookId(bookId);</span><br><span class="line">  <span class="keyword">for</span> (Epub epub : epubs) &#123;</span><br><span class="line">    <span class="keyword">if</span> (epub.isValid()) &#123;</span><br><span class="line">      <span class="type">boolean</span> <span class="variable">registered</span> <span class="operator">=</span> <span class="built_in">this</span>.registerIsbn(epub);</span><br><span class="line">      <span class="keyword">if</span> (registered) &#123;</span><br><span class="line">        <span class="built_in">this</span>.sendEpub(epub);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;                                            </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码逻辑用来分发EPUB电子书，首先根据bookId查询到EPUB电子书集和，对于每一本电子书如果有效则进行注册，注册成功后，进行分发。</p><p>这个逻辑不复杂，但是函数后面我们发现已经有4个右括号了，代码再稍微复杂一点，嵌套层次就更多了。</p><p>这里出现的问题非常简单，在长函数那节我们说过，就是使用”<strong>平铺直叙”的方式写代码</strong>。这段代码，就是按照需求一步一步实现的，但是问题在于最后没有把代码整理一下。</p><p>消除缩进的第一个着手点就是<strong>for循环里面的逻辑</strong>，我们可以单独拎出来：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">distributeEpubs</span><span class="params">(<span class="keyword">final</span> <span class="type">long</span> bookId)</span> &#123;</span><br><span class="line">  List&lt;Epub&gt; epubs = <span class="built_in">this</span>.getEpubsByBookId(bookId);</span><br><span class="line">  <span class="keyword">for</span> (Epub epub : epubs) &#123;</span><br><span class="line">    <span class="built_in">this</span>.distributeEpub(epub)；</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">distributeEpub</span><span class="params">(<span class="keyword">final</span> Epub epub)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (epub.isValid()) &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">registered</span> <span class="operator">=</span> <span class="built_in">this</span>.registerIsbn(epub);</span><br><span class="line">    <span class="keyword">if</span> (registered) &#123;</span><br><span class="line">      <span class="built_in">this</span>.sendEpub(epub);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们对每一本电子书的判断逻辑是一样的，所以可以把这部分逻辑抽离为函数给单独出来，这样原来的函数就少了一层缩进了。</p><h4 id="if和else"><a href="#if和else" class="headerlink" title="if和else"></a>if和else</h4><p>在上面拆分后的distributeEpub方法中，还是有很长的缩进，这里的缩进是由if语句造成的。</p><p>通常来说，if语句造成的缩进，很多时候都是在检查某个先决条件，只有条件通过，才继续执行后面的代码。这样的代码，<strong>可以使用卫语句来解决</strong>，即设置单独的检查条件，不满足条件直接返回。</p><p>这是一种典型的重构：<strong>以卫语句取代嵌套的条件表达式</strong>。修改后代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">distributeEpub</span><span class="params">(<span class="keyword">final</span> Epub epub)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!epub.isValid()) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="type">boolean</span> <span class="variable">registered</span> <span class="operator">=</span> <span class="built_in">this</span>.registerIsbn(epub);</span><br><span class="line">  <span class="keyword">if</span> (!registered) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">this</span>.sendEpub(epub);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后的代码嵌套就少了很多，也更利于阅读。</p><p>这里说了if关键字，与之对应的是else关键字，<strong>对于else关键字也是一种坏味道，这挑战了很多程序员的认知</strong>。</p><p>我们同样可以使用卫语句来消除else关键字，比如下面代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getEpubPrice</span><span class="params">(<span class="keyword">final</span> <span class="type">boolean</span> highQuality, <span class="keyword">final</span> <span class="type">int</span> chapterSequence)</span> &#123;</span><br><span class="line">  <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (highQuality &amp;&amp; chapterSequence &gt; START_CHARGING_SEQUENCE) &#123;</span><br><span class="line">    price = <span class="number">4.99</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sequenceNumber &gt; START_CHARGING_SEQUENCE</span><br><span class="line">        &amp;&amp; sequenceNumber &lt;= FURTHER_CHARGING_SEQUENCE) &#123;</span><br><span class="line">    price = <span class="number">1.99</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sequenceNumber &gt; FURTHER_CHARGING_SEQUENCE) &#123;</span><br><span class="line">    price = <span class="number">2.99</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    price = <span class="number">0.99</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个给电子书定价的函数，逻辑如下：当是高品质电子书，且页数大于起始收费页数则定价4.99，对于非高品质书来说，页数大于起始收费页小于进一步收费页数定价1.99，大于进一步收费页数定价2.99，其他默认定价为0.99。</p><p>这一段代码在日常生活中经常写，因为我们一直以为if&#x2F;else就是天生一对，这里同样可以使用卫语句进行优化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getEpubPrice</span><span class="params">(<span class="keyword">final</span> <span class="type">boolean</span> highQuality, <span class="keyword">final</span> <span class="type">int</span> chapterSequence)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (highQuality &amp;&amp; chapterSequence &gt; START_CHARGING_SEQUENCE) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4.99</span>;</span><br><span class="line">  &#125; </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (sequenceNumber &gt; START_CHARGING_SEQUENCE</span><br><span class="line">        &amp;&amp; sequenceNumber &lt;= FURTHER_CHARGING_SEQUENCE) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.99</span>;</span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (sequenceNumber &gt; FURTHER_CHARGING_SEQUENCE) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2.99</span>;</span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0.99</span>;</span><br></pre></td></tr></table></figure><p>优化后的代码，多使用return来提前结束，也更加方便阅读。</p><p>不论是嵌套的代码，还是else语句，我们之所以视为坏味道并且改进，<strong>本质上都是在追求简单</strong>。<strong>因为一段代码的分支过多，复杂度就会大大提高</strong>。也是我们一直所说的，人脑能够理解的复杂度是有限的，分支过多的代码会超过理解范围。</p><h4 id="重复的Switch"><a href="#重复的Switch" class="headerlink" title="重复的Switch"></a>重复的Switch</h4><p>前面所说的if else都是坏味道，那我们熟悉的switch语句也可能是坏味道，我们来看段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBookPrice</span><span class="params">(<span class="keyword">final</span> User user, <span class="keyword">final</span> Book book)</span> &#123;</span><br><span class="line">  <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> book.getPrice();</span><br><span class="line">  <span class="keyword">switch</span> (user.getLevel()) &#123;</span><br><span class="line">    <span class="keyword">case</span> UserLevel.SILVER:</span><br><span class="line">      <span class="keyword">return</span> price * <span class="number">0.9</span>;</span><br><span class="line">    <span class="keyword">case</span> UserLevel.GOLD: </span><br><span class="line">      <span class="keyword">return</span> price * <span class="number">0.8</span>;</span><br><span class="line">    <span class="keyword">case</span> UserLevel.PLATINUM:</span><br><span class="line">      <span class="keyword">return</span> price * <span class="number">0.75</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> price;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getEpubPrice</span><span class="params">(<span class="keyword">final</span> User user, <span class="keyword">final</span> Epub epub)</span> &#123;</span><br><span class="line">  <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> epub.getPrice();</span><br><span class="line">  <span class="keyword">switch</span> (user.getLevel()) &#123;</span><br><span class="line">    <span class="keyword">case</span> UserLevel.SILVER:</span><br><span class="line">      <span class="keyword">return</span> price * <span class="number">0.95</span>;</span><br><span class="line">    <span class="keyword">case</span> UserLevel.GOLD: </span><br><span class="line">      <span class="keyword">return</span> price * <span class="number">0.85</span>;</span><br><span class="line">    <span class="keyword">case</span> UserLevel.PLATINUM:</span><br><span class="line">      <span class="keyword">return</span> price * <span class="number">0.8</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> price;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的逻辑是根据用户的等级来制定书籍和电子书的价格，但是代码部分仔细查看发现会有很多类似的代码，这就是一种典型的坏味道：重复的switch。</p><p>之所以会出现重复的switch，<strong>通常都是因为缺少一个模型</strong>，所以这种坏味道的重构手法是：<strong>以多态取代条件表达式</strong>。</p><p>还记得前面我们说过引入模型的原则吗？要以行为为基础，这里的行为就是根据用户等级获取不同的书籍和电子书价格，所以引入UserLevel模型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">UserLevel</span> &#123;</span><br><span class="line">  <span class="type">double</span> <span class="title function_">getBookPrice</span><span class="params">(Book book)</span>;</span><br><span class="line">  <span class="type">double</span> <span class="title function_">getEpubPrice</span><span class="params">(Epub epub)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RegularUserLevel</span> <span class="keyword">implements</span> <span class="title class_">UserLevel</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBookPrice</span><span class="params">(<span class="keyword">final</span> Book book)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> book.getPrice();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getEpubPrice</span><span class="params">(<span class="keyword">final</span> Epub epub)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> epub.getPrice();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GoldUserLevel</span> <span class="keyword">implements</span> <span class="title class_">UserLevel</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBookPrice</span><span class="params">(<span class="keyword">final</span> Book book)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> book.getPrice() * <span class="number">0.8</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getEpubPrice</span><span class="params">(<span class="keyword">final</span> Epub epub)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> epub.getPrice() * <span class="number">0.85</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SilverUserLevel</span> <span class="keyword">implements</span> <span class="title class_">UserLevel</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBookPrice</span><span class="params">(<span class="keyword">final</span> Book book)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> book.getPrice() * <span class="number">0.9</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getEpubPrice</span><span class="params">(<span class="keyword">final</span> Epub epub)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> epub.getPrice() * <span class="number">0.85</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PlatinumUserLevel</span> <span class="keyword">implements</span> <span class="title class_">UserLevel</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBookPrice</span><span class="params">(<span class="keyword">final</span> Book book)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> book.getPrice() * <span class="number">0.75</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getEpubPrice</span><span class="params">(<span class="keyword">final</span> Epub epub)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> epub.getPrice() * <span class="number">0.8</span>; </span><br></pre></td></tr></table></figure><p>上面代码针对不同的用户等级，在处理获取价格是不一样的，所以前面代码中的switch就可以去掉了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBookPrice</span><span class="params">(<span class="keyword">final</span> User user, <span class="keyword">final</span> Book book)</span> &#123;</span><br><span class="line">  <span class="type">UserLevel</span> <span class="variable">level</span> <span class="operator">=</span> user.getUserLevel()</span><br><span class="line">  <span class="keyword">return</span> level.getBookPrice(book);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getEpubPrice</span><span class="params">(<span class="keyword">final</span> User user, <span class="keyword">final</span> Epub epub)</span> &#123;</span><br><span class="line">  <span class="type">UserLevel</span> <span class="variable">level</span> <span class="operator">=</span> user.getUserLevel()</span><br><span class="line">  <span class="keyword">return</span> level.getEpubPrice(epub);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-工具"><a href="#3-工具" class="headerlink" title="3.工具"></a>3.工具</h2><p>1.<a href="https://blog.csdn.net/u012351051/article/details/122515205">Visual Paradigm绘制流程图、序列图</a></p><p>2.IDEA插件</p><p>   Alibaba Java Coding Guidelines</p><p>  GenerateAllSetter（快速生成get set）</p><p>​    JRebel 热加载插件</p><p>3.浏览器扩展</p><p><img src="/OPPO%5C1713967959900.png" alt="1713967959900"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;周会分享&quot;&gt;&lt;a href=&quot;#周会分享&quot; class=&quot;headerlink&quot; title=&quot;周会分享&quot;&gt;&lt;/a&gt;周会分享&lt;/h1&gt;&lt;h2 id=&quot;1-架构&quot;&gt;&lt;a href=&quot;#1-架构&quot; class=&quot;headerlink&quot; title=&quot;1.架构&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="周会分享" scheme="http://cardioid.gitee.io/categories/%E5%91%A8%E4%BC%9A%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="周会分享" scheme="http://cardioid.gitee.io/tags/%E5%91%A8%E4%BC%9A%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>整合SpringSecurity和JWT实现认证和授权</title>
    <link href="http://cardioid.gitee.io/2022/04/15/Java/JWT/%E6%95%B4%E5%90%88SpringSecurity%E5%92%8CJWT%E5%AE%9E%E7%8E%B0%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83/"/>
    <id>http://cardioid.gitee.io/2022/04/15/Java/JWT/%E6%95%B4%E5%90%88SpringSecurity%E5%92%8CJWT%E5%AE%9E%E7%8E%B0%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83/</id>
    <published>2022-04-15T05:21:21.000Z</published>
    <updated>2022-04-10T17:07:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="整合SpringSecurity和JWT实现认证和授权"><a href="#整合SpringSecurity和JWT实现认证和授权" class="headerlink" title="整合SpringSecurity和JWT实现认证和授权"></a>整合SpringSecurity和JWT实现认证和授权</h1><blockquote><p>本文主要讲解mall通过整合SpringSecurity和JWT实现后台用户的登录和授权功能，同时改造Swagger-UI的配置使其可以自动记住登录令牌进行发送。</p></blockquote><h2 id="项目使用表说明"><a href="#项目使用表说明" class="headerlink" title="项目使用表说明"></a>项目使用表说明</h2><ul><li><code>ums_admin</code>：后台用户表</li><li><code>ums_role</code>：后台用户角色表</li><li><code>ums_permission</code>：后台用户权限表</li><li><code>ums_admin_role_relation</code>：后台用户和角色关系表，用户与角色是多对多关系</li><li><code>ums_role_permission_relation</code>：后台用户角色和权限关系表，角色与权限是多对多关系</li><li><code>ums_admin_permission_relation</code>：后台用户和权限关系表(除角色中定义的权限以外的加减权限)，加权限是指用户比角色多出的权限，减权限是指用户比角色少的权限</li></ul><h2 id="整合SpringSecurity及JWT"><a href="#整合SpringSecurity及JWT" class="headerlink" title="整合SpringSecurity及JWT"></a>整合SpringSecurity及JWT</h2><h3 id="在pom-xml中添加项目依赖pom"><a href="#在pom-xml中添加项目依赖pom" class="headerlink" title="在pom.xml中添加项目依赖pom"></a>在pom.xml中添加项目依赖pom</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringSecurity依赖配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Hutool Java工具包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--JWT(Json Web Token)登录支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="工具类JwtTokenUtil"><a href="#工具类JwtTokenUtil" class="headerlink" title="工具类JwtTokenUtil"></a>工具类JwtTokenUtil</h3><blockquote><p>用于生成和解析JWT token的工具类</p></blockquote><p>相关方法说明：</p><ul><li>generateToken(UserDetails userDetails) :用于根据登录用户信息生成token</li><li>getUserNameFromToken(String token)：从token中获取登录用户的信息</li><li>validateToken(String token, UserDetails userDetails)：判断token是否还有效</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.macro.mall.tiny.common.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JwtToken生成的工具类</span></span><br><span class="line"><span class="comment"> * Created by macro on 2018/4/26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtTokenUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(JwtTokenUtil.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CLAIM_KEY_USERNAME</span> <span class="operator">=</span> <span class="string">&quot;sub&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CLAIM_KEY_CREATED</span> <span class="operator">=</span> <span class="string">&quot;created&quot;</span>;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.secret&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String secret;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.expiration&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long expiration;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据负责生成JWT的token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">generateToken</span><span class="params">(Map&lt;String, Object&gt; claims)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .setClaims(claims)</span><br><span class="line">                .setExpiration(generateExpirationDate())</span><br><span class="line">                .signWith(SignatureAlgorithm.HS512, secret)</span><br><span class="line">                .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从token中获取JWT中的负载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Claims <span class="title function_">getClaimsFromToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            claims = Jwts.parser()</span><br><span class="line">                    .setSigningKey(secret)</span><br><span class="line">                    .parseClaimsJws(token)</span><br><span class="line">                    .getBody();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.info(<span class="string">&quot;JWT格式验证失败:&#123;&#125;&quot;</span>,token);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> claims;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成token的过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date <span class="title function_">generateExpirationDate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + expiration * <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从token中获取登录用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserNameFromToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        String username;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> getClaimsFromToken(token);</span><br><span class="line">            username =  claims.getSubject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            username = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证token是否还有效</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token       客户端传入的token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userDetails 从数据库中查询出来的用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validateToken</span><span class="params">(String token, UserDetails userDetails)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUserNameFromToken(token);</span><br><span class="line">        <span class="keyword">return</span> username.equals(userDetails.getUsername()) &amp;&amp; !isTokenExpired(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断token是否已经失效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isTokenExpired</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">expiredDate</span> <span class="operator">=</span> getExpiredDateFromToken(token);</span><br><span class="line">        <span class="keyword">return</span> expiredDate.before(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从token中获取过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date <span class="title function_">getExpiredDateFromToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> getClaimsFromToken(token);</span><br><span class="line">        <span class="keyword">return</span> claims.getExpiration();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户信息生成token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">generateToken</span><span class="params">(UserDetails userDetails)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; claims = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        claims.put(CLAIM_KEY_USERNAME, userDetails.getUsername());</span><br><span class="line">        claims.put(CLAIM_KEY_CREATED, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="keyword">return</span> generateToken(claims);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断token是否可以被刷新</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canRefresh</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !isTokenExpired(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 刷新token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">refreshToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> getClaimsFromToken(token);</span><br><span class="line">        claims.put(CLAIM_KEY_CREATED, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="keyword">return</span> generateToken(claims);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="配置类WebSecurityConfigurerAdapter"><a href="#配置类WebSecurityConfigurerAdapter" class="headerlink" title="配置类WebSecurityConfigurerAdapter"></a>配置类WebSecurityConfigurerAdapter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.macro.mall.tiny.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.component.JwtAuthenticationTokenFilter;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.component.RestAuthenticationEntryPoint;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.component.RestfulAccessDeniedHandler;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.dto.AdminUserDetails;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.mbg.model.UmsAdmin;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.mbg.model.UmsPermission;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.service.UmsAdminService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.http.SessionCreationPolicy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringSecurity的配置</span></span><br><span class="line"><span class="comment"> * Created by macro on 2018/4/26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled=true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UmsAdminService adminService;</span><br><span class="line">    <span class="comment">//当用户没有访问权限时的处理器，用于返回JSON格式的处理结果；</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestfulAccessDeniedHandler restfulAccessDeniedHandler;</span><br><span class="line">    <span class="comment">//当未登录或token失效时，返回JSON格式的结果；</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestAuthenticationEntryPoint restAuthenticationEntryPoint;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//用于配置需要拦截的url路径、jwt过滤器及出异常后的处理器；</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity httpSecurity)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        httpSecurity.csrf()<span class="comment">// 由于使用的是JWT，我们这里不需要csrf</span></span><br><span class="line">                .disable()</span><br><span class="line">                .sessionManagement()<span class="comment">// 基于token，所以不需要session</span></span><br><span class="line">                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(HttpMethod.GET, <span class="comment">// 允许对于网站静态资源的无授权访问</span></span><br><span class="line">                        <span class="string">&quot;/&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/*.html&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/favicon.ico&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/**/*.html&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/**/*.css&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/**/*.js&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/swagger-resources/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/v2/api-docs/**&quot;</span></span><br><span class="line">                )</span><br><span class="line">                .permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/admin/login&quot;</span>, <span class="string">&quot;/admin/register&quot;</span>)<span class="comment">// 对登录注册要允许匿名访问</span></span><br><span class="line">                .permitAll()</span><br><span class="line">                .antMatchers(HttpMethod.OPTIONS)<span class="comment">//跨域请求会先进行一次options请求</span></span><br><span class="line">                .permitAll()</span><br><span class="line"><span class="comment">//                .antMatchers(&quot;/**&quot;)//测试时全部运行访问</span></span><br><span class="line"><span class="comment">//                .permitAll()</span></span><br><span class="line">                .anyRequest()<span class="comment">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class="line">                .authenticated();</span><br><span class="line">        <span class="comment">// 禁用缓存</span></span><br><span class="line">        httpSecurity.headers().cacheControl();</span><br><span class="line">        <span class="comment">// 添加JWT filter</span></span><br><span class="line">        httpSecurity.addFilterBefore(jwtAuthenticationTokenFilter(), UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">        <span class="comment">//添加自定义未授权和未登录结果返回</span></span><br><span class="line">        httpSecurity.exceptionHandling()</span><br><span class="line">                .accessDeniedHandler(restfulAccessDeniedHandler)</span><br><span class="line">                .authenticationEntryPoint(restAuthenticationEntryPoint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//用于配置UserDetailsService及PasswordEncoder；</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth.userDetailsService(userDetailsService())</span><br><span class="line">                .passwordEncoder(passwordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//SpringSecurity定义的用于对密码进行编码及比对的接口，目前使用的是BCryptPasswordEncoder；</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//SpringSecurity定义的核心接口，用于根据用户名获取用户信息，需要自行实现；</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> UserDetailsService <span class="title function_">userDetailsService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取登录用户信息</span></span><br><span class="line">        <span class="keyword">return</span> username -&gt; &#123;</span><br><span class="line">            <span class="type">UmsAdmin</span> <span class="variable">admin</span> <span class="operator">=</span> adminService.getAdminByUsername(username);</span><br><span class="line">            <span class="keyword">if</span> (admin != <span class="literal">null</span>) &#123;</span><br><span class="line">                List&lt;UmsPermission&gt; permissionList = adminService.getPermissionList(admin.getId());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AdminUserDetails</span>(admin,permissionList);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//在用户名和密码校验前添加的过滤器，如果有jwt的token，会自行根据token信息进行登录。</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JwtAuthenticationTokenFilter <span class="title function_">jwtAuthenticationTokenFilter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JwtAuthenticationTokenFilter</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="相关依赖及方法说明"><a href="#相关依赖及方法说明" class="headerlink" title="相关依赖及方法说明"></a>相关依赖及方法说明</h4><ul><li>configure(HttpSecurity httpSecurity)：用于配置需要拦截的url路径、jwt过滤器及出异常后的处理器；</li><li>configure(AuthenticationManagerBuilder auth)：用于配置UserDetailsService及PasswordEncoder；</li><li>RestfulAccessDeniedHandler：当用户没有访问权限时的处理器，用于返回JSON格式的处理结果；</li><li>RestAuthenticationEntryPoint：当未登录或token失效时，返回JSON格式的结果；</li><li>UserDetailsService:SpringSecurity定义的核心接口，用于根据用户名获取用户信息，需要自行实现；</li><li>UserDetails：SpringSecurity定义用于封装用户信息的类（主要是用户信息和权限），需要自行实现；</li><li>PasswordEncoder：SpringSecurity定义的用于对密码进行编码及比对的接口，目前使用的是BCryptPasswordEncoder；</li><li>JwtAuthenticationTokenFilter：在用户名和密码校验前添加的过滤器，如果有jwt的token，会自行根据token信息进行登录。</li></ul><h3 id="添加RestfulAccessDeniedHandler"><a href="#添加RestfulAccessDeniedHandler" class="headerlink" title="添加RestfulAccessDeniedHandler"></a>添加RestfulAccessDeniedHandler</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.macro.mall.tiny.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONUtil;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.common.api.CommonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.AccessDeniedException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.access.AccessDeniedHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当访问接口没有权限时，自定义的返回结果</span></span><br><span class="line"><span class="comment"> * Created by macro on 2018/4/26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestfulAccessDeniedHandler</span> <span class="keyword">implements</span> <span class="title class_">AccessDeniedHandler</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                       HttpServletResponse response,</span></span><br><span class="line"><span class="params">                       AccessDeniedException e)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        response.getWriter().println(JSONUtil.parse(CommonResult.forbidden(e.getMessage())));</span><br><span class="line">        response.getWriter().flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="添加RestAuthenticationEntryPoint"><a href="#添加RestAuthenticationEntryPoint" class="headerlink" title="添加RestAuthenticationEntryPoint"></a>添加RestAuthenticationEntryPoint</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.macro.mall.tiny.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONUtil;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.common.api.CommonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.AuthenticationEntryPoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当未登录或者token失效访问接口时，自定义的返回结果</span></span><br><span class="line"><span class="comment"> * Created by macro on 2018/5/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestAuthenticationEntryPoint</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationEntryPoint</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        response.getWriter().println(JSONUtil.parse(CommonResult.unauthorized(authException.getMessage())));</span><br><span class="line">        response.getWriter().flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="添加AdminUserDetails"><a href="#添加AdminUserDetails" class="headerlink" title="添加AdminUserDetails"></a>添加AdminUserDetails</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.macro.mall.tiny.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.mbg.model.UmsAdmin;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.mbg.model.UmsPermission;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringSecurity需要的用户详情</span></span><br><span class="line"><span class="comment"> * Created by macro on 2018/4/26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminUserDetails</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> UmsAdmin umsAdmin;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> List&lt;UmsPermission&gt; permissionList;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AdminUserDetails</span><span class="params">(UmsAdmin umsAdmin, List&lt;UmsPermission&gt; permissionList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.umsAdmin = umsAdmin;</span><br><span class="line">        <span class="built_in">this</span>.permissionList = permissionList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="comment">//返回当前用户的权限</span></span><br><span class="line">        <span class="keyword">return</span> permissionList.stream()jh32w</span><br><span class="line">                .filter(permission -&gt; permission.getValue()!=<span class="literal">null</span>)</span><br><span class="line">                .map(permission -&gt;<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(permission.getValue()))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> umsAdmin.getPassword();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> umsAdmin.getUsername();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> umsAdmin.getStatus().equals(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="添加JwtAuthenticationTokenFilter"><a href="#添加JwtAuthenticationTokenFilter" class="headerlink" title="添加JwtAuthenticationTokenFilter"></a>添加JwtAuthenticationTokenFilter</h3><blockquote><p>在用户名和密码校验前添加的过滤器，如果请求中有jwt的token且有效，会取出token中的用户名，然后调用SpringSecurity的API进行登录操作。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.macro.mall.tiny.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.common.utils.JwtTokenUtil;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.WebAuthenticationDetailsSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.OncePerRequestFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JWT登录授权过滤器</span></span><br><span class="line"><span class="comment"> * Created by macro on 2018/4/26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationTokenFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(JwtAuthenticationTokenFilter.class);</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtTokenUtil jwtTokenUtil;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.tokenHeader&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String tokenHeader;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.tokenHead&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String tokenHead;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                                    HttpServletResponse response,</span></span><br><span class="line"><span class="params">                                    FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">authHeader</span> <span class="operator">=</span> request.getHeader(<span class="built_in">this</span>.tokenHeader);</span><br><span class="line">        <span class="keyword">if</span> (authHeader != <span class="literal">null</span> &amp;&amp; authHeader.startsWith(<span class="built_in">this</span>.tokenHead)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">authToken</span> <span class="operator">=</span> authHeader.substring(<span class="built_in">this</span>.tokenHead.length());<span class="comment">// The part after &quot;Bearer &quot;</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> jwtTokenUtil.getUserNameFromToken(authToken);</span><br><span class="line">            LOGGER.info(<span class="string">&quot;checking username:&#123;&#125;&quot;</span>, username);</span><br><span class="line">            <span class="keyword">if</span> (username != <span class="literal">null</span> &amp;&amp; SecurityContextHolder.getContext().getAuthentication() == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">UserDetails</span> <span class="variable">userDetails</span> <span class="operator">=</span> <span class="built_in">this</span>.userDetailsService.loadUserByUsername(username);</span><br><span class="line">                <span class="keyword">if</span> (jwtTokenUtil.validateToken(authToken, userDetails)) &#123;</span><br><span class="line">                    <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authentication</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(userDetails, <span class="literal">null</span>, userDetails.getAuthorities());</span><br><span class="line">                    authentication.setDetails(<span class="keyword">new</span> <span class="title class_">WebAuthenticationDetailsSource</span>().buildDetails(request));</span><br><span class="line">                    LOGGER.info(<span class="string">&quot;authenticated user:&#123;&#125;&quot;</span>, username);</span><br><span class="line">                    SecurityContextHolder.getContext().setAuthentication(authentication);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="登录注册功能实现"><a href="#登录注册功能实现" class="headerlink" title="登录注册功能实现"></a>登录注册功能实现</h2><h3 id="添加UmsAdminController类"><a href="#添加UmsAdminController类" class="headerlink" title="添加UmsAdminController类"></a>添加UmsAdminController类</h3><blockquote><p>实现了后台用户登录、注册及获取权限的接口</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.macro.mall.tiny.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.common.api.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.dto.UmsAdminLoginParam;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.mbg.model.UmsAdmin;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.mbg.model.UmsPermission;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.service.UmsAdminService;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 后台用户管理</span></span><br><span class="line"><span class="comment"> * Created by macro on 2018/4/26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;UmsAdminController&quot;, description = &quot;后台用户管理&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UmsAdminController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UmsAdminService adminService;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.tokenHeader&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String tokenHeader;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.tokenHead&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String tokenHead;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;用户注册&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/register&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;UmsAdmin&gt; <span class="title function_">register</span><span class="params">(<span class="meta">@RequestBody</span> UmsAdmin umsAdminParam, BindingResult result)</span> &#123;</span><br><span class="line">        <span class="type">UmsAdmin</span> <span class="variable">umsAdmin</span> <span class="operator">=</span> adminService.register(umsAdminParam);</span><br><span class="line">        <span class="keyword">if</span> (umsAdmin == <span class="literal">null</span>) &#123;</span><br><span class="line">            CommonResult.failed();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> CommonResult.success(umsAdmin);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;登录以后返回token&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/login&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> UmsAdminLoginParam umsAdminLoginParam, BindingResult result)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> adminService.login(umsAdminLoginParam.getUsername(), umsAdminLoginParam.getPassword());</span><br><span class="line">        <span class="keyword">if</span> (token == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> CommonResult.validateFailed(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, String&gt; tokenMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        tokenMap.put(<span class="string">&quot;token&quot;</span>, token);</span><br><span class="line">        tokenMap.put(<span class="string">&quot;tokenHead&quot;</span>, tokenHead);</span><br><span class="line">        <span class="keyword">return</span> CommonResult.success(tokenMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;获取用户所有权限（包括+-权限）&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/permission/&#123;adminId&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;List&lt;UmsPermission&gt;&gt; <span class="title function_">getPermissionList</span><span class="params">(<span class="meta">@PathVariable</span> Long adminId)</span> &#123;</span><br><span class="line">        List&lt;UmsPermission&gt; permissionList = adminService.getPermissionList(adminId);</span><br><span class="line">        <span class="keyword">return</span> CommonResult.success(permissionList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="添加UmsAdminService接口"><a href="#添加UmsAdminService接口" class="headerlink" title="添加UmsAdminService接口"></a>添加UmsAdminService接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.macro.mall.tiny.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.mbg.model.UmsAdmin;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.mbg.model.UmsPermission;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 后台管理员Service</span></span><br><span class="line"><span class="comment"> * Created by macro on 2018/4/26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UmsAdminService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名获取后台管理员</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    UmsAdmin <span class="title function_">getAdminByUsername</span><span class="params">(String username)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    UmsAdmin <span class="title function_">register</span><span class="params">(UmsAdmin umsAdminParam)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录功能</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 生成的JWT的token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">login</span><span class="params">(String username, String password)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户所有权限（包括角色权限和+-权限）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;UmsPermission&gt; <span class="title function_">getPermissionList</span><span class="params">(Long adminId)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="添加UmsAdminServiceImpl类"><a href="#添加UmsAdminServiceImpl类" class="headerlink" title="添加UmsAdminServiceImpl类"></a>添加UmsAdminServiceImpl类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.macro.mall.tiny.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.common.utils.JwtTokenUtil;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.dao.UmsAdminRoleRelationDao;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.dto.UmsAdminLoginParam;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.mbg.mapper.UmsAdminMapper;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.mbg.model.UmsAdmin;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.mbg.model.UmsAdminExample;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.mbg.model.UmsPermission;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.service.UmsAdminService;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.BadCredentialsException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UmsAdminService实现类</span></span><br><span class="line"><span class="comment"> * Created by macro on 2018/4/26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UmsAdminServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UmsAdminService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(UmsAdminServiceImpl.class);</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtTokenUtil jwtTokenUtil;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.tokenHead&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String tokenHead;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UmsAdminMapper adminMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UmsAdminRoleRelationDao adminRoleRelationDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UmsAdmin <span class="title function_">getAdminByUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="type">UmsAdminExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UmsAdminExample</span>();</span><br><span class="line">        example.createCriteria().andUsernameEqualTo(username);</span><br><span class="line">        List&lt;UmsAdmin&gt; adminList = adminMapper.selectByExample(example);</span><br><span class="line">        <span class="keyword">if</span> (adminList != <span class="literal">null</span> &amp;&amp; adminList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> adminList.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UmsAdmin <span class="title function_">register</span><span class="params">(UmsAdmin umsAdminParam)</span> &#123;</span><br><span class="line">        <span class="type">UmsAdmin</span> <span class="variable">umsAdmin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UmsAdmin</span>();</span><br><span class="line">        BeanUtils.copyProperties(umsAdminParam, umsAdmin);</span><br><span class="line">        umsAdmin.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        umsAdmin.setStatus(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//查询是否有相同用户名的用户</span></span><br><span class="line">        <span class="type">UmsAdminExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UmsAdminExample</span>();</span><br><span class="line">        example.createCriteria().andUsernameEqualTo(umsAdmin.getUsername());</span><br><span class="line">        List&lt;UmsAdmin&gt; umsAdminList = adminMapper.selectByExample(example);</span><br><span class="line">        <span class="keyword">if</span> (umsAdminList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将密码进行加密操作</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">encodePassword</span> <span class="operator">=</span> passwordEncoder.encode(umsAdmin.getPassword());</span><br><span class="line">        umsAdmin.setPassword(encodePassword);</span><br><span class="line">        adminMapper.insert(umsAdmin);</span><br><span class="line">        <span class="keyword">return</span> umsAdmin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">UserDetails</span> <span class="variable">userDetails</span> <span class="operator">=</span> userDetailsService.loadUserByUsername(username);</span><br><span class="line">            <span class="keyword">if</span> (!passwordEncoder.matches(password, userDetails.getPassword())) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BadCredentialsException</span>(<span class="string">&quot;密码不正确&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authentication</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(userDetails, <span class="literal">null</span>, userDetails.getAuthorities());</span><br><span class="line">            SecurityContextHolder.getContext().setAuthentication(authentication);</span><br><span class="line">            token = jwtTokenUtil.generateToken(userDetails);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">            LOGGER.warn(<span class="string">&quot;登录异常:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;UmsPermission&gt; <span class="title function_">getPermissionList</span><span class="params">(Long adminId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> adminRoleRelationDao.getPermissionList(adminId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改Swagger的配置"><a href="#修改Swagger的配置" class="headerlink" title="修改Swagger的配置"></a>修改Swagger的配置</h3><blockquote><p>通过修改配置实现调用接口自带Authorization头，这样就可以访问需要登录的接口了。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.macro.mall.tiny.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiKey;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.AuthorizationScope;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.SecurityReference;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.service.contexts.SecurityContext;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Swagger2API文档的配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Swagger2Config</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">createRestApi</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//为当前包下controller生成API文档</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.macro.mall.tiny.controller&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build()</span><br><span class="line">                <span class="comment">//添加登录认证</span></span><br><span class="line">                .securitySchemes(securitySchemes())</span><br><span class="line">                .securityContexts(securityContexts());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;SwaggerUI演示&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;mall-tiny&quot;</span>)</span><br><span class="line">                .contact(<span class="string">&quot;macro&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;ApiKey&gt; <span class="title function_">securitySchemes</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//设置请求头信息</span></span><br><span class="line">        List&lt;ApiKey&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">ApiKey</span> <span class="variable">apiKey</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApiKey</span>(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;header&quot;</span>);</span><br><span class="line">        result.add(apiKey);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;SecurityContext&gt; <span class="title function_">securityContexts</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//设置需要登录认证的路径</span></span><br><span class="line">        List&lt;SecurityContext&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        result.add(getContextByPath(<span class="string">&quot;/brand/.*&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SecurityContext <span class="title function_">getContextByPath</span><span class="params">(String pathRegex)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SecurityContext.builder()</span><br><span class="line">                .securityReferences(defaultAuth())</span><br><span class="line">                .forPaths(PathSelectors.regex(pathRegex))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;SecurityReference&gt; <span class="title function_">defaultAuth</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;SecurityReference&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">AuthorizationScope</span> <span class="variable">authorizationScope</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthorizationScope</span>(<span class="string">&quot;global&quot;</span>, <span class="string">&quot;accessEverything&quot;</span>);</span><br><span class="line">        AuthorizationScope[] authorizationScopes = <span class="keyword">new</span> <span class="title class_">AuthorizationScope</span>[<span class="number">1</span>];</span><br><span class="line">        authorizationScopes[<span class="number">0</span>] = authorizationScope;</span><br><span class="line">        result.add(<span class="keyword">new</span> <span class="title class_">SecurityReference</span>(<span class="string">&quot;Authorization&quot;</span>, authorizationScopes));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="给PmsBrandController接口中的方法添加访问权限"><a href="#给PmsBrandController接口中的方法添加访问权限" class="headerlink" title="给PmsBrandController接口中的方法添加访问权限"></a>给PmsBrandController接口中的方法添加访问权限</h3><ul><li>给查询接口添加<code>pms:brand:read</code>权限</li><li>给修改接口添加<code>pms:brand:update</code>权限</li><li>给删除接口添加<code>pms:brand:delete</code>权限</li><li>给添加接口添加<code>pms:brand:create</code>权限</li></ul><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;pms:brand:read&#x27;)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResult&lt;List&lt;PmsBrand&gt;&gt; <span class="title function_">getBrandList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> CommonResult.success(brandService.listAllBrand());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="认证与授权流程演示"><a href="#认证与授权流程演示" class="headerlink" title="认证与授权流程演示"></a>认证与授权流程演示</h2><p>Swagger api地址：<a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></p><p><img src="/%E6%95%B4%E5%90%88SpringSecurity%E5%92%8CJWT%E5%AE%9E%E7%8E%B0%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83/arch_screen_14.png" alt="img"></p><h3 id="未登录前访问接口"><a href="#未登录前访问接口" class="headerlink" title="未登录前访问接口"></a>未登录前访问接口</h3><p><img src="/%E6%95%B4%E5%90%88SpringSecurity%E5%92%8CJWT%E5%AE%9E%E7%8E%B0%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83/arch_screen_15.png" alt="img"></p><p><img src="/%E6%95%B4%E5%90%88SpringSecurity%E5%92%8CJWT%E5%AE%9E%E7%8E%B0%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83/arch_screen_16.png" alt="img"></p><h3 id="登录后访问接口"><a href="#登录后访问接口" class="headerlink" title="登录后访问接口"></a>登录后访问接口</h3><ul><li>进行登录操作：登录帐号test 123456</li></ul><p><img src="/%E6%95%B4%E5%90%88SpringSecurity%E5%92%8CJWT%E5%AE%9E%E7%8E%B0%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83/arch_screen_17.png" alt="img"></p><p><img src="/%E6%95%B4%E5%90%88SpringSecurity%E5%92%8CJWT%E5%AE%9E%E7%8E%B0%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83/arch_screen_18.png" alt="img"></p><ul><li>点击Authorize按钮，在弹框中输入登录接口中获取到的token信息</li></ul><p><img src="/%E6%95%B4%E5%90%88SpringSecurity%E5%92%8CJWT%E5%AE%9E%E7%8E%B0%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83/arch_screen_19.png" alt="img"></p><p><img src="/%E6%95%B4%E5%90%88SpringSecurity%E5%92%8CJWT%E5%AE%9E%E7%8E%B0%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83/arch_screen_20.png" alt="img"></p><ul><li>登录后访问获取权限列表接口，发现已经可以正常访问</li></ul><p><img src="/%E6%95%B4%E5%90%88SpringSecurity%E5%92%8CJWT%E5%AE%9E%E7%8E%B0%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83/arch_screen_15.png" alt="img"></p><p><img src="/%E6%95%B4%E5%90%88SpringSecurity%E5%92%8CJWT%E5%AE%9E%E7%8E%B0%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83/arch_screen_21.png" alt="img"></p><h3 id="访问需要权限的接口"><a href="#访问需要权限的接口" class="headerlink" title="访问需要权限的接口"></a>访问需要权限的接口</h3><blockquote><p>由于test帐号并没有设置任何权限，所以他无法访问具有<code>pms:brand:read</code>权限的获取品牌列表接口。</p></blockquote><p><img src="/%E6%95%B4%E5%90%88SpringSecurity%E5%92%8CJWT%E5%AE%9E%E7%8E%B0%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83/arch_screen_22.png" alt="img"></p><p><img src="/%E6%95%B4%E5%90%88SpringSecurity%E5%92%8CJWT%E5%AE%9E%E7%8E%B0%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83/arch_screen_23.png" alt="img"></p><h3 id="改用其他有权限的帐号登录"><a href="#改用其他有权限的帐号登录" class="headerlink" title="改用其他有权限的帐号登录"></a>改用其他有权限的帐号登录</h3><blockquote><p>改用admin 123456登录后访问，点击Authorize按钮打开弹框,点击logout登出后再重新输入新token。</p></blockquote><p><code>注意</code>：如果admin帐号密码不对的话，公众号后台回复<code>体验</code>来获取。</p><p><img src="/%E6%95%B4%E5%90%88SpringSecurity%E5%92%8CJWT%E5%AE%9E%E7%8E%B0%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83/arch_screen_22.png" alt="img"></p><p><img src="/%E6%95%B4%E5%90%88SpringSecurity%E5%92%8CJWT%E5%AE%9E%E7%8E%B0%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83/arch_screen_24.png" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;整合SpringSecurity和JWT实现认证和授权&quot;&gt;&lt;a href=&quot;#整合SpringSecurity和JWT实现认证和授权&quot; class=&quot;headerlink&quot; title=&quot;整合SpringSecurity和JWT实现认证和授权&quot;&gt;&lt;/a&gt;整合Spr</summary>
      
    
    
    
    <category term="SpringSecurity" scheme="http://cardioid.gitee.io/categories/SpringSecurity/"/>
    
    
    <category term="SpringSecurity" scheme="http://cardioid.gitee.io/tags/SpringSecurity/"/>
    
  </entry>
  
  <entry>
    <title>JWT</title>
    <link href="http://cardioid.gitee.io/2022/04/14/Java/JWT/JWT/"/>
    <id>http://cardioid.gitee.io/2022/04/14/Java/JWT/JWT/</id>
    <published>2022-04-14T04:31:11.000Z</published>
    <updated>2022-04-10T17:06:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目使用框架介绍"><a href="#项目使用框架介绍" class="headerlink" title="项目使用框架介绍"></a>项目使用框架介绍</h2><h3 id="SpringSecurity"><a href="#SpringSecurity" class="headerlink" title="SpringSecurity"></a>SpringSecurity</h3><blockquote><p>SpringSecurity是一个强大的可高度定制的认证和授权框架，对于Spring应用来说它是一套Web安全标准。SpringSecurity注重于为Java应用提供认证和授权功能，像所有的Spring项目一样，它对自定义需求具有强大的扩展性。</p></blockquote><h3 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h3><blockquote><p>JWT是JSON WEB TOKEN的缩写，它是基于 RFC 7519 标准定义的一种可以安全传输的的JSON对象，由于使用了数字签名，所以是可信任和安全的。</p></blockquote><h4 id="JWT的组成"><a href="#JWT的组成" class="headerlink" title="JWT的组成"></a>JWT的组成</h4><ul><li><p>JWT token的格式：header.payload.signa ture &#x2F; che</p></li><li><p>header中用于存放签名的生成算法</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS512&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>payload中用于存放用户名、token的生成时间和过期时间</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span><span class="string">&quot;admin&quot;</span><span class="punctuation">,</span><span class="attr">&quot;created&quot;</span><span class="punctuation">:</span><span class="number">1489079981393</span><span class="punctuation">,</span><span class="attr">&quot;exp&quot;</span><span class="punctuation">:</span><span class="number">1489684781</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>signature为以header和payload生成的签名，一旦header和payload被篡改，验证将失败</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//secret为加密算法的密钥</span></span><br><span class="line"><span class="type">String</span> <span class="variable">signature</span> <span class="operator">=</span> HMACSHA512(base64UrlEncode(header) + <span class="string">&quot;.&quot;</span> +base64UrlEncode(payload),secret)</span><br></pre></td></tr></table></figure></li></ul><h4 id="JWT实例"><a href="#JWT实例" class="headerlink" title="JWT实例"></a>JWT实例</h4><p>这是一个JWT的字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImNyZWF0ZWQiOjE1NTY3NzkxMjUzMDksImV4cCI6MTU1NzM4MzkyNX0.d-iki0193X0bBOETf2UN3r3PotNIEAV7mzIxxeI5IxFyzzkOZxS0PGfF_SK6wxCv2K8S0cZjMkv6b5bCqc0VBw</span><br></pre></td></tr></table></figure><p>可以在该网站上获得解析结果：<a href="https://jwt.io/">https://jwt.io/</a> <img src="/JWT/arch_screen_13.png" alt="img"></p><h4 id="JWT实现认证和授权的原理"><a href="#JWT实现认证和授权的原理" class="headerlink" title="JWT实现认证和授权的原理"></a>JWT实现认证和授权的原理</h4><ul><li>用户调用登录接口，登录成功后获取到JWT的token；</li><li>之后用户每次调用接口都在http的header中添加一个叫Authorization的头，值为JWT的token；</li><li>后台程序通过对Authorization头中信息的解码及数字签名校验来获取其中的用户信息，从而实现认证和授权。</li></ul><h3 id="Hutool"><a href="#Hutool" class="headerlink" title="Hutool"></a>Hutool</h3><blockquote><p>Hutool是一个丰富的Java开源工具包,它帮助我们简化每一行代码，减少每一个方法，mall项目采用了此工具包。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;项目使用框架介绍&quot;&gt;&lt;a href=&quot;#项目使用框架介绍&quot; class=&quot;headerlink&quot; title=&quot;项目使用框架介绍&quot;&gt;&lt;/a&gt;项目使用框架介绍&lt;/h2&gt;&lt;h3 id=&quot;SpringSecurity&quot;&gt;&lt;a href=&quot;#SpringSecurity&quot;</summary>
      
    
    
    
    <category term="JWT" scheme="http://cardioid.gitee.io/categories/JWT/"/>
    
    
    <category term="登录" scheme="http://cardioid.gitee.io/tags/%E7%99%BB%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>异步编排</title>
    <link href="http://cardioid.gitee.io/2022/03/28/Java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/CompletableFuture%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92/"/>
    <id>http://cardioid.gitee.io/2022/03/28/Java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/CompletableFuture%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92/</id>
    <published>2022-03-28T10:13:25.000Z</published>
    <updated>2022-04-04T15:00:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异步编排"><a href="#异步编排" class="headerlink" title="异步编排"></a>异步编排</h1><p>所谓异步 就是new几个其他线程 与主线程同时做任务 分活给其他人一起干</p><p>（）-{</p><p>​} 大括号以内就是要干的活</p><p>业务场景：</p><p>查询商品详情页逻辑比较复杂，有些数据还需要远程调用，必然需要花费更多的时间</p><p>基本信息<br>图片信息<br>促销信息<br>销售属性<br>规格参数</p><p>等</p><p><img src="/CompletableFuture%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92/image-20201105163535757.png" alt="image-20201105163535757"></p><p>那么，用户需要5.5s后才能看到商品相详情页的内容，很显然是不能接受的</p><p>如果有多个线程同时完成这 6 步操作，也许只需要 1.5s 即可完成响应</p><h2 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h2><p>第一种</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">//员工数量</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="comment">//创建计数器</span></span><br><span class="line">    <span class="comment">//构造参数传入的数量值代表的是latch.countDown()调用的次数</span></span><br><span class="line">    <span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(count);</span><br><span class="line">    System.out.println(<span class="string">&quot;核心线程数&quot;</span>+count);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建线程池，可以通过以下方式创建</span></span><br><span class="line">    <span class="comment">//ThreadPoolExecutor threadPool = new ThreadPoolExecutor(1,1,60,TimeUnit.SECONDS,new LinkedBlockingQueue&lt;Runnable&gt;(count));</span></span><br><span class="line">    <span class="comment">//ExecutorService threadPool =  Executors.newFixedThreadPool(count);</span></span><br><span class="line">    <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> ThreadPoolFactory.createFixedThreadPool(<span class="string">&quot;集合&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;公司发送通知，每一位员工在周六早上8点到公司大门口集合&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        threadPool.execute(<span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;员工：&quot;</span> + Thread.currentThread() + <span class="string">&quot;，正在前往公司大门口集合...&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;员工：&quot;</span> + Thread.currentThread() + <span class="string">&quot;，已到达。&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//当前计算工作已结束，计数器减一</span></span><br><span class="line">                latch.countDown();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">0</span>; i1 &lt; <span class="number">100000</span>; i1++) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;员工：&quot;</span> + Thread.currentThread() + <span class="string">&quot;，吃饭、喝水、拍照。&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//阻塞当前线程，直到所有员工到达公司大门口之后才执行</span></span><br><span class="line">    latch.await();</span><br><span class="line">    <span class="comment">// 使当前线程在锁存器倒计数至零之前一直等待，除非线程被中断或超出了指定的等待时间。</span></span><br><span class="line">    <span class="comment">//latch.await(long timeout, TimeUnit unit)</span></span><br><span class="line">    System.out.println(<span class="string">&quot;所有员工已经到达公司大门口，大巴车发动，前往活动目的地。&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最后关闭线程池，但执行以前提交的任务，不接受新任务</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭线程池，停止所有正在执行的活动任务，暂停处理正在等待的任务，并返回等待执行的任务列表。</span></span><br><span class="line">    <span class="comment">//threadPool.shutdownNow();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CompletableFuture"><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h2><h3 id="创建异步对象"><a href="#创建异步对象" class="headerlink" title="创建异步对象"></a>创建异步对象</h3><p>CompletableFuture 提供了四个静态方法来创建一个异步操作</p><p><img src="/CompletableFuture%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92/image-20201105185420349.png" alt="image-20201105185420349"></p><p>1、<strong>runXxx 都是没有返回结果的，supplyXxxx都是可以获取返回结果的</strong></p><p>2、可以传入<strong>自定义的线程池</strong>，否则就是用默认的线程池</p><p>3、根据方法的返回类型来判断是否该方法<strong>是否有返回类型</strong></p><p>代码实现：</p><h5 id="无返回-runAsync"><a href="#无返回-runAsync" class="headerlink" title="无返回   runAsync"></a><strong>无返回</strong>   runAsync</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;Void&gt; completableFuture = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;当前线程：&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">         <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">2</span>;</span><br><span class="line">         System.out.println(<span class="string">&quot;运行结果：&quot;</span> + i);</span><br><span class="line">     &#125;, executorService);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="有返回-supplyAsync"><a href="#有返回-supplyAsync" class="headerlink" title="有返回   supplyAsync"></a><strong>有返回</strong>   supplyAsync</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前线程：&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">2</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;运行结果：&quot;</span> + i);</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;, executorService);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> future.get();</span><br></pre></td></tr></table></figure><h3 id="计算完成时"><a href="#计算完成时" class="headerlink" title="计算完成时"></a>计算完成时</h3><h4 id="回调方法whenComplete"><a href="#回调方法whenComplete" class="headerlink" title="回调方法whenComplete"></a>回调方法whenComplete</h4><p><img src="/CompletableFuture%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92/image-20201105185821263.png" alt="image-20201105185821263"></p><p>，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;当前线程：&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;运行结果：&quot;</span> + i);</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;, executor).whenComplete((result,exception) -&gt;&#123;</span><br><span class="line">    <span class="comment">// 虽然能得到异常信息，但是没法修改返回的数据</span></span><br><span class="line">    System.out.println(<span class="string">&quot;异步任务成功完成了...结果是：&quot;</span> +result + <span class="string">&quot;异常是：&quot;</span> + exception);</span><br><span class="line">&#125;).exceptionally(throwable -&gt; &#123;</span><br><span class="line">    <span class="comment">// 可以感知到异常，同时返回默认值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>whenComplete 可以处理正常和异常的计算结果</p></blockquote><blockquote><p>exceptionally 处理异常情况</p></blockquote><p><strong>whenComplete 和 whenCompleteAsync 的区别</strong></p><p>​whenComplete ：<strong>是执行当前任务的线程继续执行 whencomplete 的任务</strong></p><p>​whenCompleteAsync： 是执行把 whenCompleteAsync 这个任务继续<strong>提交给线程池</strong>来进行执行</p><p>方法<strong>不以 Async 结尾</strong>，意味着 Action 使用<strong>相同的线程执行</strong>，而 Async结尾 <strong>可能会使用其他线程</strong>执行（如果是使用相同的线程池，也可能会被同一个线程选中执行）</p><h4 id="处理异常-方法-handle"><a href="#处理异常-方法-handle" class="headerlink" title="处理异常 方法  handle"></a>处理异常 方法  handle</h4><p><img src="/CompletableFuture%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92/image-20201105194503175.png" alt="image-20201105194503175"></p><p>和 complete 一样，可以<strong>对结果做最后的处理（可处理异常）</strong>，可改变返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;当前线程：&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">2</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;运行结果：&quot;</span> + i);</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;, executor).handle((res,thr) -&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span> (res != <span class="literal">null</span> ) &#123;</span><br><span class="line">        <span class="keyword">return</span> res * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (thr != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="串行方法thenxxxAsync"><a href="#串行方法thenxxxAsync" class="headerlink" title="串行方法thenxxxAsync"></a>串行方法thenxxxAsync</h4><p><img src="/CompletableFuture%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92/image-20201105195632819.png" alt="image-20201105195632819"></p><p>thenApply 方法：<strong>当一个线程依赖另一个线程时，获取上一个任务返回的结果，并返回当前任物的返回值</strong></p><p>thenAccept方法：<strong>消费处理结果，接受任务处理结果，并消费处理，无返回结果</strong></p><p>thenRun 方法：<strong>只要上面任务执行完成，就开始执行 thenRun ,只是处理完任务后，执行 thenRun的后续操作</strong></p><p>带有 <strong>Async 默认是异步执行</strong>的，同之前，</p><p>以上都要前置任务完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 线程串行化，</span></span><br><span class="line"><span class="comment">      * 1、thenRun:不能获取到上一步的执行结果，无返回值</span></span><br><span class="line"><span class="comment">      * .thenRunAsync(() -&gt;&#123;</span></span><br><span class="line"><span class="comment">      *             System.out.println(&quot;任务2启动了....&quot;);</span></span><br><span class="line"><span class="comment">      *         &#125;,executor);</span></span><br><span class="line"><span class="comment">      * 2、能接受上一步结果，但是无返回值 thenAcceptAsync</span></span><br><span class="line"><span class="comment">      * 3、thenApplyAsync 能收受上一步结果，有返回值</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     CompletableFuture&lt;String&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;当前线程：&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">         <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">2</span>;</span><br><span class="line">         System.out.println(<span class="string">&quot;运行结果：&quot;</span> + i);</span><br><span class="line">         <span class="keyword">return</span> i;</span><br><span class="line">     &#125;, executor).thenApplyAsync(res -&gt; &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;任务2启动了...&quot;</span> + res);</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + res;</span><br><span class="line">     &#125;, executor);</span><br><span class="line">     <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> future.get();</span><br><span class="line"></span><br><span class="line">     System.out.println(<span class="string">&quot;main....stop.....&quot;</span> + s);</span><br></pre></td></tr></table></figure><h3 id="任务组合"><a href="#任务组合" class="headerlink" title="任务组合"></a>任务组合</h3><h4 id="都要完成"><a href="#都要完成" class="headerlink" title="都要完成"></a>都要完成</h4><p><img src="/CompletableFuture%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92/image-20210102044028142.png" alt="image-20210102044028142"></p><p><img src="/CompletableFuture%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92/image-20210102044044914.png" alt="image-20210102044044914"></p><p>两个任务必须都完成，触发该任务</p><p>thenCombine: 组合两个 future，获取两个 future的返回结果，并返回当前任务的返回值</p><p>thenAccpetBoth: 组合两个 future，获取两个 future 任务的返回结果，然后处理任务，没有返回值</p><p>runAfterBoth:组合 两个 future，不需要获取 future 的结果，只需要两个 future处理完成任务后，处理该任务，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 两个都完成</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        CompletableFuture&lt;Integer&gt; future01 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;任务1当前线程：&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">4</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;任务1结束：&quot;</span> + i);</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;, executor);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;String&gt; future02 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;任务2当前线程：&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">            System.out.println(<span class="string">&quot;任务2结束：&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        &#125;, executor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// f1 和 f2 执行完成后在执行这个</span></span><br><span class="line"><span class="comment">//        future01.runAfterBothAsync(future02,() -&gt; &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;任务3开始&quot;);</span></span><br><span class="line"><span class="comment">//        &#125;,executor);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回f1 和 f2 的运行结果</span></span><br><span class="line"><span class="comment">//        future01.thenAcceptBothAsync(future02,(f1,f2) -&gt; &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;任务3开始....之前的结果:&quot; + f1 + &quot;==&gt;&quot; + f2);</span></span><br><span class="line"><span class="comment">//        &#125;,executor);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// f1 和 f2 单独定义返回结果</span></span><br><span class="line">        CompletableFuture&lt;String&gt; future = future01.thenCombineAsync(future02, (f1, f2) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> f1 + <span class="string">&quot;:&quot;</span> + f2 + <span class="string">&quot;-&gt; Haha&quot;</span>;</span><br><span class="line">        &#125;, executor);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;main....end.....&quot;</span> + future.get());</span><br></pre></td></tr></table></figure><h4 id="一个完成"><a href="#一个完成" class="headerlink" title="一个完成"></a>一个完成</h4><p><img src="/CompletableFuture%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92/image-20201106101904880.png" alt="image-20201106101904880"></p><p><img src="/CompletableFuture%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92/image-20201106101918013.png" alt="image-20201106101918013"></p><p>当两个任务中，任意一个future 任务完成时，执行任务</p><p><strong>applyToEither</strong>;两个任务有一个执行完成，获取它的返回值，处理任务并有新的返回值</p><p><strong>acceptEither</strong>: 两个任务有一个执行完成，获取它的返回值，处理任务，没有新的返回值</p><p><strong>runAfterEither</strong>:两个任务有一个执行完成，不需要获取 future 的结果，处理任务，也没有返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 两个任务，只要有一个完成，我们就执行任务</span></span><br><span class="line"><span class="comment">         * runAfterEnitherAsync：不感知结果，自己没有返回值</span></span><br><span class="line"><span class="comment">         * acceptEitherAsync：感知结果，自己没有返回值</span></span><br><span class="line"><span class="comment">         *  applyToEitherAsync：感知结果，自己有返回值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="comment">//        future01.runAfterEitherAsync(future02,() -&gt;&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;任务3开始...之前的结果:&quot;);</span></span><br><span class="line"><span class="comment">//        &#125;,executor);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        future01.acceptEitherAsync(future02,(res) -&gt; &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;任务3开始...之前的结果:&quot; + res);</span></span><br><span class="line"><span class="comment">//        &#125;,executor);</span></span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;String&gt; future = future01.applyToEitherAsync(future02, res -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;任务3开始...之前的结果：&quot;</span> + res);</span><br><span class="line">            <span class="keyword">return</span> res.toString() + <span class="string">&quot;-&gt;哈哈&quot;</span>;</span><br><span class="line">        &#125;, executor);</span><br></pre></td></tr></table></figure><h3 id="多任务组合"><a href="#多任务组合" class="headerlink" title="多任务组合"></a>多任务组合</h3><p><img src="/CompletableFuture%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92/image-20201106104031315.png" alt="image-20201106104031315"></p><p>allOf：<strong>等待所有任务完成</strong></p><p>anyOf:<strong>只要有一个任务完成</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">        CompletableFuture&lt;String&gt; futureImg = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;查询商品的图片信息&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;hello.jpg&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;String&gt; futureAttr = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;查询商品的属性&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;黑色+256G&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;String&gt; futureDesc = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123; TimeUnit.SECONDS.sleep(<span class="number">3</span>); &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;查询商品介绍&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;华为&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待全部执行完</span></span><br><span class="line"><span class="comment">//        CompletableFuture&lt;Void&gt; allOf = CompletableFuture.allOf(futureImg, futureAttr, futureDesc);</span></span><br><span class="line"><span class="comment">//        allOf.get();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 只需要有一个执行完</span></span><br><span class="line">        CompletableFuture&lt;Object&gt; anyOf = CompletableFuture.anyOf(futureImg, futureAttr, futureDesc);</span><br><span class="line">        anyOf.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;main....end.....&quot;</span> + anyOf.get());</span><br></pre></td></tr></table></figure><p>都是操作 CompletableFuture 类 更多方法还请参考该类</p><h4 id="测试及使用多任务组合"><a href="#测试及使用多任务组合" class="headerlink" title="测试及使用多任务组合"></a>测试及使用多任务组合</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SkuItemVo <span class="title function_">item</span><span class="params">(Long skuId)</span> &#123;</span><br><span class="line">        <span class="type">SkuItemVo</span> <span class="variable">skuItemVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SkuItemVo</span>();</span><br><span class="line">        <span class="comment">//1、sku基本信息获取 pms_sku_info</span></span><br><span class="line">        CompletableFuture&lt;SkuInfoEntity&gt; infoFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="type">SkuInfoEntity</span> <span class="variable">info</span> <span class="operator">=</span> getById(skuId);</span><br><span class="line">            skuItemVo.setInfo(info);</span><br><span class="line">            <span class="keyword">return</span> info;</span><br><span class="line">        &#125;, executor);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3、获取spu的销售属性组合</span></span><br><span class="line">        CompletableFuture&lt;Void&gt; saleAttrFuture = infoFuture.thenAcceptAsync((res) -&gt; &#123;</span><br><span class="line">            List&lt;SkuItemSaleAttrVo&gt; saleAttrVos = skuSaleAttrValueService.getSaleAttrsBySpuId(res.getSpuId());</span><br><span class="line">            skuItemVo.setSaleAttr(saleAttrVos);</span><br><span class="line">        &#125;, executor);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//4、获取spu的介绍 pms_spu_info_desc</span></span><br><span class="line">        CompletableFuture&lt;Void&gt; descFuture = infoFuture.thenAcceptAsync(res -&gt; &#123;</span><br><span class="line">            <span class="type">SpuInfoDescEntity</span> <span class="variable">spuInfoDescEntity</span> <span class="operator">=</span> spuInfoDescService.getById(res.getSpuId());</span><br><span class="line">            skuItemVo.setDesp(spuInfoDescEntity);</span><br><span class="line">        &#125;, executor);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//5、获取spu的规格参数信息</span></span><br><span class="line">        CompletableFuture&lt;Void&gt; attrGroupFuture = infoFuture.thenAcceptAsync(res -&gt; &#123;</span><br><span class="line">            List&lt;SpuItemAttrGroupVo&gt; attrGroupVos = attrGroupService.getAttrGroupWithAttrsBySpuId(res.getSpuId(), res.getCatalogId());</span><br><span class="line">            skuItemVo.setGroupAttrs(attrGroupVos);</span><br><span class="line">        &#125;, executor);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2、sku图片信息    pms_sku_images</span></span><br><span class="line">        CompletableFuture&lt;Void&gt; imgFuture = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">            List&lt;SkuImagesEntity&gt; skuImagesEntityList = imagesService.getImagesBySkuId(skuId);</span><br><span class="line">            skuItemVo.setImages(skuImagesEntityList);</span><br><span class="line">        &#125;, executor);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;Void&gt; seckillFuture = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">            <span class="comment">//3、远程调用查询当前sku是否参与秒杀优惠活动</span></span><br><span class="line">            <span class="type">R</span> <span class="variable">skuSeckilInfo</span> <span class="operator">=</span> seckillFeignService.getSkuSeckilInfo(skuId);</span><br><span class="line">            <span class="keyword">if</span> (skuSeckilInfo.getCode() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//查询成功</span></span><br><span class="line">                <span class="type">SeckillSkuVo</span> <span class="variable">seckilInfoData</span> <span class="operator">=</span> skuSeckilInfo.getData(<span class="string">&quot;data&quot;</span>, <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;SeckillSkuVo&gt;() &#123;</span><br><span class="line">                &#125;);</span><br><span class="line">                skuItemVo.setSeckillSkuVo(seckilInfoData);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (seckilInfoData != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">long</span> <span class="variable">currentTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">                    <span class="keyword">if</span> (currentTime &gt; seckilInfoData.getEndTime()) &#123;</span><br><span class="line">                        skuItemVo.setSeckillSkuVo(<span class="literal">null</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, executor);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//等待所有任务都完成</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            CompletableFuture.allOf(saleAttrFuture,descFuture,attrGroupFuture,imgFuture).get();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> skuItemVo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;异步编排&quot;&gt;&lt;a href=&quot;#异步编排&quot; class=&quot;headerlink&quot; title=&quot;异步编排&quot;&gt;&lt;/a&gt;异步编排&lt;/h1&gt;&lt;p&gt;所谓异步 就是new几个其他线程 与主线程同时做任务 分活给其他人一起干&lt;/p&gt;
&lt;p&gt;（）-{&lt;/p&gt;
&lt;p&gt;​	} 大括</summary>
      
    
    
    
    <category term="多线程" scheme="http://cardioid.gitee.io/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="多线程" scheme="http://cardioid.gitee.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>油猴脚本</title>
    <link href="http://cardioid.gitee.io/2022/03/19/Java/%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%B2%B9%E7%8C%B4%E8%84%9A%E6%9C%AC/"/>
    <id>http://cardioid.gitee.io/2022/03/19/Java/%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%B2%B9%E7%8C%B4%E8%84%9A%E6%9C%AC/</id>
    <published>2022-03-19T05:54:21.000Z</published>
    <updated>2022-04-10T16:54:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="油猴脚本"><a href="#油猴脚本" class="headerlink" title="油猴脚本"></a>油猴脚本</h1><p><img src="/%E6%B2%B9%E7%8C%B4%E8%84%9A%E6%9C%AC/image-20220302031852407.png" alt="image-20220302031852407"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h1 id=&quot;油猴脚本&quot;&gt;&lt;a href=&quot;#油猴脚本&quot; class=&quot;headerlink&quot; title=&quot;油猴脚本&quot;&gt;&lt;/a&gt;油猴脚本&lt;/h1&gt;&lt;p&gt;&lt;im</summary>
      
    
    
    
    <category term="油猴脚本" scheme="http://cardioid.gitee.io/categories/%E6%B2%B9%E7%8C%B4%E8%84%9A%E6%9C%AC/"/>
    
    
    <category term="浏览器扩展" scheme="http://cardioid.gitee.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>Edge浏览器扩展</title>
    <link href="http://cardioid.gitee.io/2022/03/19/Java/%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%89%A9%E5%B1%95/"/>
    <id>http://cardioid.gitee.io/2022/03/19/Java/%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%89%A9%E5%B1%95/</id>
    <published>2022-03-19T05:17:16.000Z</published>
    <updated>2022-04-10T16:53:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="Edge浏览器扩展"><a href="#Edge浏览器扩展" class="headerlink" title="Edge浏览器扩展"></a>Edge浏览器扩展</h2><p><img src="/%E6%89%A9%E5%B1%95/image-20220302031950262.png" alt="image-20220302031950262"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&quot;Edge浏览器扩展&quot;&gt;&lt;a href=&quot;#Edge浏览器扩展&quot; class=&quot;headerlink&quot; title=&quot;Edge浏览器扩展&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="浏览器扩展" scheme="http://cardioid.gitee.io/categories/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%A9%E5%B1%95/"/>
    
    
    <category term="浏览器扩展" scheme="http://cardioid.gitee.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%A9%E5%B1%95/"/>
    
  </entry>
  
  <entry>
    <title>IDEA插件</title>
    <link href="http://cardioid.gitee.io/2022/02/11/Java/IDEA/IDEA%E6%8F%92%E4%BB%B6/IDEA%E6%8F%92%E4%BB%B6/"/>
    <id>http://cardioid.gitee.io/2022/02/11/Java/IDEA/IDEA%E6%8F%92%E4%BB%B6/IDEA%E6%8F%92%E4%BB%B6/</id>
    <published>2022-02-11T05:21:44.000Z</published>
    <updated>2022-04-10T17:05:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="zookeeper-客户端工具-idea-插件zookeeper-tools（zoolytic）"><a href="#zookeeper-客户端工具-idea-插件zookeeper-tools（zoolytic）" class="headerlink" title="zookeeper 客户端工具 idea 插件zookeeper tools（zoolytic）"></a>zookeeper 客户端工具 idea 插件zookeeper tools（zoolytic）</h1><p><img src="/IDEA%E6%8F%92%E4%BB%B6/image-20220226171544120.png" alt="image-20220226171544120"></p><p><img src="/IDEA%E6%8F%92%E4%BB%B6/image-20220226171557691.png" alt="image-20220226171557691"></p><h1 id="IDEA好用的插件Codota-一个代码提示和类API示例的插件"><a href="#IDEA好用的插件Codota-一个代码提示和类API示例的插件" class="headerlink" title="IDEA好用的插件Codota(一个代码提示和类API示例的插件)"></a>IDEA好用的插件Codota(一个代码提示和类API示例的插件)</h1><p>IDEA—Settings—Plugins，输入codota</p><p> 各种代码提示，自动补全，更多便捷功能等你发现。。。。。。</p><h1 id="IDEA插件Free-Mybatis-plugin"><a href="#IDEA插件Free-Mybatis-plugin" class="headerlink" title="IDEA插件Free Mybatis plugin"></a>IDEA插件Free Mybatis plugin</h1><p> free-idea-mybatis是一款增强idea对mybatis支持的插件，主要功能如下：</p><ul><li>生成mapper xml文件</li><li>快速从代码跳转到mapper及从mapper返回代码</li><li>mybatis自动补全及语法错误提示</li></ul><h3 id="灵活使用alt-enter和ctrl-B实现提示和跳转"><a href="#灵活使用alt-enter和ctrl-B实现提示和跳转" class="headerlink" title="灵活使用alt+enter和ctrl+B实现提示和跳转"></a>灵活使用alt+enter和ctrl+B实现提示和跳转</h3><p><strong>生成mapper文件</strong></p><p>alter+enter弹出 。</p><p>根据数据库字段生产bean</p><p>快捷生成CURD操作</p><p>安装好这个插件之后，就可以随便跳转和参数自动补全了，很方便。  </p><h1 id="Lombok插件"><a href="#Lombok插件" class="headerlink" title="Lombok插件"></a>Lombok插件</h1><p>搜索  Lombok</p><p>引入pom中依赖，当前最细版本1.18.10。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在创建SpringBoot项目时直接在“Developer Tool”中选择Lombok。</p><p>同时，在插件的描述中也能够看到它支持的注解。</p><p><img src="/IDEA%E6%8F%92%E4%BB%B6/image-20220226172329271.png" alt="image-20220226172329271"></p><h1 id="JRebel插件"><a href="#JRebel插件" class="headerlink" title="JRebel插件"></a>JRebel插件</h1><p>Jrebel 可快速实现热部署，节省了大量重启时间，提高了个人开发效率。</p><p><img src="/IDEA%E6%8F%92%E4%BB%B6/image-20220226172549937.png" alt="image-20220226172549937"></p><blockquote><p><strong>第二步：在线GUID地址：在线生成GUID</strong></p></blockquote><blockquote><p>网址：<a href="https://www.guidgen.com/">在线GUID地址</a></p></blockquote><p><strong>打开jrebel 如下所示面板，选择Connect to online licensing service</strong></p><p><img src="/IDEA%E6%8F%92%E4%BB%B6/image-20220226172919619.png" alt="image-20220226172919619"></p><p> <strong>Ctrl+shift+F9</strong></p><blockquote><p><strong>设置自动编译</strong></p></blockquote><blockquote><p>要想实现热部署，首先需要对Intellij按如下进行设置：</p></blockquote><blockquote><ol><li>由于JRebel是实时监控class文件的变化来实现热部署的，所以在idea环境下需要打开自动变异功能才能实现随时修改，随时生效。</li></ol></blockquote><p><img src="/IDEA%E6%8F%92%E4%BB%B6/2021020317084925.png" alt="在这里插入图片描述"></p><blockquote><ol><li>打开运行时编译</li></ol></blockquote><blockquote><p><strong>设置compiler.automake.allow.when.app.running</strong></p></blockquote><blockquote><p>快捷键ctrl+shift+A，搜索：registry</p></blockquote><blockquote><p>或者</p></blockquote><blockquote><p>按快捷键 Ctrl+Shift+Alt+&#x2F; ，选择 Registry</p></blockquote><p><img src="/IDEA%E6%8F%92%E4%BB%B6/20210203170913434.png" alt="在这里插入图片描述"></p><p><img src="/IDEA%E6%8F%92%E4%BB%B6/20210203170904819.png" alt="在这里插入图片描述"></p><p><strong>使用</strong></p><blockquote><p>运行项目时要点击图中红框中的按钮，即可运行：</p></blockquote><p><img src="/IDEA%E6%8F%92%E4%BB%B6/20210203170927455.png" alt="在这里插入图片描述"></p><blockquote><p>第一个按钮是Run，第二个按钮是Debug。</p></blockquote><blockquote><p>修改代码（只测试了Java代码的修改）后，按快捷键 <strong>Ctrl + Shift + F9</strong>，运行后会提示有变化是否重新加载，选yes。完成加载以后，就已经实现了热更新效果。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;zookeeper-客户端工具-idea-插件zookeeper-tools（zoolytic）&quot;&gt;&lt;a href=&quot;#zookeeper-客户端工具-idea-插件zookeeper-tools（zoolytic）&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    <category term="IDEA" scheme="http://cardioid.gitee.io/categories/IDEA/"/>
    
    
    <category term="IDEA" scheme="http://cardioid.gitee.io/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>数据分片，多线程处理</title>
    <link href="http://cardioid.gitee.io/2022/02/04/Java/%E6%95%B0%E6%8D%AE%E5%88%86%E7%89%87-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%A4%84%E7%90%86/%E6%95%B0%E6%8D%AE%E5%88%86%E7%89%87%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%A4%84%E7%90%86/"/>
    <id>http://cardioid.gitee.io/2022/02/04/Java/%E6%95%B0%E6%8D%AE%E5%88%86%E7%89%87-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%A4%84%E7%90%86/%E6%95%B0%E6%8D%AE%E5%88%86%E7%89%87%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%A4%84%E7%90%86/</id>
    <published>2022-02-04T15:11:44.000Z</published>
    <updated>2022-04-10T16:52:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据分片，多线程处理"><a href="#数据分片，多线程处理" class="headerlink" title="数据分片，多线程处理"></a>数据分片，多线程处理</h1><p>场景：mysql有100w条数据，要根据id更新到Elasticsearch</p><p>处理方式：100w 条数据分页查询，每次查询1w条数据，再将这1w条数据分成10个分片，每个分片1000条数据，每个分片的1000数据由一条线程去执行处理，相当于10个分片由10个线程处理。</p><h2 id="线程池工具类"><a href="#线程池工具类" class="headerlink" title="线程池工具类"></a>线程池工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程池工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程池实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 核心线程数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">THREADPOOL_COREPOOLSIZE</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最大线程数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">THREADPOOL_MAXPOOLSIZE</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程等待回收的存活时间，单位：分钟</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">THREADPOOL_KEEPALIVETIME</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化线程池</span></span><br><span class="line"><span class="comment">     * 线程池拒绝策略为默认的拒绝策略，如果不能加入工作队列就抛出RejectedExecutionException异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"> </span><br><span class="line">        executor = <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(THREADPOOL_COREPOOLSIZE,</span><br><span class="line">                THREADPOOL_MAXPOOLSIZE,</span><br><span class="line">                THREADPOOL_KEEPALIVETIME,</span><br><span class="line">                TimeUnit.MINUTES,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">80</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">DefaultThreadFactory</span>(<span class="string">&quot;defaultPool&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用线程池运行任务，线程无返回值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> task</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Runnable task)</span>&#123;</span><br><span class="line">        executor.execute(task);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用线程池提交异步任务，任务运行带返回值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> task 实现了Callable接口的线程</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Future <span class="title function_">submit</span><span class="params">(Callable task)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> executor.submit(task);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 停止线程池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span> &#123;</span><br><span class="line">        executor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadPoolExecutor <span class="title function_">getExecutor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模拟测试数据"><a href="#模拟测试数据" class="headerlink" title="模拟测试数据"></a>模拟测试数据</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListFactory</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; data;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">curPage</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        String[] arr = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;9&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;4&quot;</span>&#125;;</span><br><span class="line">        <span class="built_in">this</span>.data = Arrays.asList(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;全部数据 &quot;</span> + <span class="built_in">this</span>.data);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> curPage * pageSize;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//数据取完了</span></span><br><span class="line">        <span class="keyword">if</span> (start &gt; data.size()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> Math.min((start + pageSize), data.size());</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//下一页</span></span><br><span class="line">        curPage++;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.data.subList(start, end);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.data.size();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCurPage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.curPage;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ListFactory</span> <span class="variable">listFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListFactory</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            List&lt;String&gt; data = listFactory.getNext();</span><br><span class="line">            System.out.println(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="执行的处理任务"><a href="#执行的处理任务" class="headerlink" title="执行的处理任务"></a>执行的处理任务</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MKTask</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; items;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MKTask</span><span class="params">(List&lt;String&gt; items)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.items = items;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; items.size(); j++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//模拟业务处理耗时</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">1</span> + (<span class="type">int</span>) (Math.random() * <span class="number">3</span>);</span><br><span class="line">                TimeUnit.SECONDS.sleep(s);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.cur = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCur</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.cur + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主线程分片"><a href="#主线程分片" class="headerlink" title="主线程分片"></a>主线程分片</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiThread</span> &#123;</span><br><span class="line">    List&lt;MKTask&gt; taskList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将任务切分，由多线程处理，并打印处理进度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleAll</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ListFactory</span> <span class="variable">listFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListFactory</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> listFactory.getSize();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//获取翻页数据</span></span><br><span class="line">            List&lt;String&gt; data = listFactory.getNext();</span><br><span class="line">            <span class="comment">//模拟取数据耗时</span></span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (data == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//每个线程处理 5 条</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">threadCount</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前页&quot;</span> + listFactory.getCurPage());</span><br><span class="line">            handlePageDate(data, threadCount);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//计算任务进度</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            <span class="comment">//每2秒打印一次各个线程的处理进度</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (MKTask mkTask : taskList) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> mkTask.getCur();</span><br><span class="line">                sum = sum + cur;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">DecimalFormat</span> <span class="variable">dF</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;0.00&quot;</span>);</span><br><span class="line">            <span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> (<span class="type">float</span>) sum / total;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (f == <span class="number">1.0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;全部任务完成&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;任务处理进度 &quot;</span> + dF.format(f * <span class="number">100</span>) + <span class="string">&quot;%&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handlePageDate</span><span class="params">(List&lt;String&gt; data, <span class="type">int</span> threadCount)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> data.size();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//分成 segment 份，需要 segment 个线程处理</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">segment</span> <span class="operator">=</span> (<span class="type">int</span>) Math.ceil((<span class="type">double</span>) pageSize / threadCount);</span><br><span class="line"> </span><br><span class="line">        System.out.println(<span class="string">&quot;当前页数据 &quot;</span> + data + <span class="string">&quot; 一共有 &quot;</span> + pageSize + <span class="string">&quot; 条, 每个线程处理 &quot;</span> + threadCount + <span class="string">&quot; 条数据, 需要 &quot;</span> + segment + <span class="string">&quot; 个线程处理&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; segment; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> i * threadCount;</span><br><span class="line">            <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> (i == segment - <span class="number">1</span>) ? pageSize : (start + threadCount);</span><br><span class="line"> </span><br><span class="line">            List&lt;String&gt; subList = data.subList(start, end);</span><br><span class="line">            <span class="type">MKTask</span> <span class="variable">mkTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MKTask</span>(subList);</span><br><span class="line">            taskList.add(mkTask);</span><br><span class="line">            System.out.println(start + <span class="string">&quot; - &quot;</span> + end + <span class="string">&quot; 范围数据 &quot;</span> + subList + <span class="string">&quot; 交给一条线程处理&quot;</span>);</span><br><span class="line">            ThreadUtil.execute(mkTask);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">全部数据 <span class="selector-attr">[9, 1, 2, 1, 3, 5, 8, 3, 9, 6, 8, 7, 5, 5, 1, 1, 5, 4, 9, 4, 2, 7, 8, 8, 5, 1, 4, 3, 8, 1, 2, 4, 2, 4, 4, 8, 8, 4, 4, 5, 3, 3, 6, 4, 7, 6, 5, 4, 1, 8, 4, 3, 6, 7, 7, 4, 5, 3, 9, 9, 5, 5, 6, 1, 4, 1, 9, 3, 5, 1, 1, 7, 9, 4, 9, 2, 8, 7, 6, 6, 4, 1, 6, 6, 9, 1, 5, 2, 1, 1, 8, 1, 6, 3, 1, 8, 4]</span></span><br><span class="line">当前页<span class="number">1</span></span><br><span class="line">当前页数据 <span class="selector-attr">[9, 1, 2, 1, 3, 5, 8, 3, 9, 6, 8, 7, 5, 5, 1, 1, 5, 4, 9, 4]</span> 一共有 <span class="number">20</span> 条, 每个线程处理 <span class="number">5</span> 条数据, 需要 <span class="number">4</span> 个线程处理</span><br><span class="line"><span class="number">0</span> - <span class="number">5</span> 范围数据 <span class="selector-attr">[9, 1, 2, 1, 3]</span> 交给一条线程处理</span><br><span class="line"><span class="number">5</span> - <span class="number">10</span> 范围数据 <span class="selector-attr">[5, 8, 3, 9, 6]</span> 交给一条线程处理</span><br><span class="line"><span class="number">10</span> - <span class="number">15</span> 范围数据 <span class="selector-attr">[8, 7, 5, 5, 1]</span> 交给一条线程处理</span><br><span class="line"><span class="number">15</span> - <span class="number">20</span> 范围数据 <span class="selector-attr">[1, 5, 4, 9, 4]</span> 交给一条线程处理</span><br><span class="line">当前页<span class="number">2</span></span><br><span class="line">当前页数据 <span class="selector-attr">[2, 7, 8, 8, 5, 1, 4, 3, 8, 1, 2, 4, 2, 4, 4, 8, 8, 4, 4, 5]</span> 一共有 <span class="number">20</span> 条, 每个线程处理 <span class="number">5</span> 条数据, 需要 <span class="number">4</span> 个线程处理</span><br><span class="line"><span class="number">0</span> - <span class="number">5</span> 范围数据 <span class="selector-attr">[2, 7, 8, 8, 5]</span> 交给一条线程处理</span><br><span class="line"><span class="number">5</span> - <span class="number">10</span> 范围数据 <span class="selector-attr">[1, 4, 3, 8, 1]</span> 交给一条线程处理</span><br><span class="line"><span class="number">10</span> - <span class="number">15</span> 范围数据 <span class="selector-attr">[2, 4, 2, 4, 4]</span> 交给一条线程处理</span><br><span class="line"><span class="number">15</span> - <span class="number">20</span> 范围数据 <span class="selector-attr">[8, 8, 4, 4, 5]</span> 交给一条线程处理</span><br><span class="line">当前页<span class="number">3</span></span><br><span class="line">当前页数据 <span class="selector-attr">[3, 3, 6, 4, 7, 6, 5, 4, 1, 8, 4, 3, 6, 7, 7, 4, 5, 3, 9, 9]</span> 一共有 <span class="number">20</span> 条, 每个线程处理 <span class="number">5</span> 条数据, 需要 <span class="number">4</span> 个线程处理</span><br><span class="line"><span class="number">0</span> - <span class="number">5</span> 范围数据 <span class="selector-attr">[3, 3, 6, 4, 7]</span> 交给一条线程处理</span><br><span class="line"><span class="number">5</span> - <span class="number">10</span> 范围数据 <span class="selector-attr">[6, 5, 4, 1, 8]</span> 交给一条线程处理</span><br><span class="line"><span class="number">10</span> - <span class="number">15</span> 范围数据 <span class="selector-attr">[4, 3, 6, 7, 7]</span> 交给一条线程处理</span><br><span class="line"><span class="number">15</span> - <span class="number">20</span> 范围数据 <span class="selector-attr">[4, 5, 3, 9, 9]</span> 交给一条线程处理</span><br><span class="line">当前页<span class="number">4</span></span><br><span class="line">当前页数据 <span class="selector-attr">[5, 5, 6, 1, 4, 1, 9, 3, 5, 1, 1, 7, 9, 4, 9, 2, 8, 7, 6, 6]</span> 一共有 <span class="number">20</span> 条, 每个线程处理 <span class="number">5</span> 条数据, 需要 <span class="number">4</span> 个线程处理</span><br><span class="line"><span class="number">0</span> - <span class="number">5</span> 范围数据 <span class="selector-attr">[5, 5, 6, 1, 4]</span> 交给一条线程处理</span><br><span class="line"><span class="number">5</span> - <span class="number">10</span> 范围数据 <span class="selector-attr">[1, 9, 3, 5, 1]</span> 交给一条线程处理</span><br><span class="line"><span class="number">10</span> - <span class="number">15</span> 范围数据 <span class="selector-attr">[1, 7, 9, 4, 9]</span> 交给一条线程处理</span><br><span class="line"><span class="number">15</span> - <span class="number">20</span> 范围数据 <span class="selector-attr">[2, 8, 7, 6, 6]</span> 交给一条线程处理</span><br><span class="line">当前页<span class="number">5</span></span><br><span class="line">当前页数据 <span class="selector-attr">[4, 1, 6, 6, 9, 1, 5, 2, 1, 1, 8, 1, 6, 3, 1, 8, 4]</span> 一共有 <span class="number">17</span> 条, 每个线程处理 <span class="number">5</span> 条数据, 需要 <span class="number">4</span> 个线程处理</span><br><span class="line"><span class="number">0</span> - <span class="number">5</span> 范围数据 <span class="selector-attr">[4, 1, 6, 6, 9]</span> 交给一条线程处理</span><br><span class="line"><span class="number">5</span> - <span class="number">10</span> 范围数据 <span class="selector-attr">[1, 5, 2, 1, 1]</span> 交给一条线程处理</span><br><span class="line"><span class="number">10</span> - <span class="number">15</span> 范围数据 <span class="selector-attr">[8, 1, 6, 3, 1]</span> 交给一条线程处理</span><br><span class="line"><span class="number">15</span> - <span class="number">17</span> 范围数据 <span class="selector-attr">[8, 4]</span> 交给一条线程处理</span><br><span class="line">任务处理进度 <span class="number">48.45%</span></span><br><span class="line">任务处理进度 <span class="number">70.10%</span></span><br><span class="line">任务处理进度 <span class="number">87.63%</span></span><br><span class="line">任务处理进度 <span class="number">96.91%</span></span><br><span class="line">全部任务完成</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据分片，多线程处理&quot;&gt;&lt;a href=&quot;#数据分片，多线程处理&quot; class=&quot;headerlink&quot; title=&quot;数据分片，多线程处理&quot;&gt;&lt;/a&gt;数据分片，多线程处理&lt;/h1&gt;&lt;p&gt;场景：mysql有100w条数据，要根据id更新到Elasticsearch</summary>
      
    
    
    
    <category term="多线程" scheme="http://cardioid.gitee.io/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="多线程" scheme="http://cardioid.gitee.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cache</title>
    <link href="http://cardioid.gitee.io/2022/01/11/Java/%E7%BC%93%E5%AD%98/SpringCache/"/>
    <id>http://cardioid.gitee.io/2022/01/11/Java/%E7%BC%93%E5%AD%98/SpringCache/</id>
    <published>2022-01-11T14:14:11.000Z</published>
    <updated>2022-01-28T09:32:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-Cache"><a href="#Spring-Cache" class="headerlink" title="Spring Cache"></a>Spring Cache</h2><h4 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h4><ul><li>Spring 从3.1开始定义了 <code>org.springframework.cache.Cache</code> 和 <code>org.sprngframework.cache.CacheManager</code> 接口睐统一不同的缓存技术</li><li>并支持使用 <code>JCache</code>（JSR-107）注解简化我们的开发</li><li>Cache 接口为缓存的组件规范定义，包含缓存的各种操作集合 <code>Cache</code> 接口下 Spring 提供了各种 XXXCache的实现，如 <code>RedisCache</code>、<code>EhCache</code>,<code>ConcrrentMapCache</code>等等，</li><li>每次调用需要缓存功能实现方法的时候，<code>Spring</code> 会检查检查指定参数的马努表犯法是否已经被嗲用过，如果有就直接从缓存中获取方法调用后的结果，如果没有就调用方法并缓存结果后返回给用户，下次直接调用从缓存中获取</li><li>使用 <code>Sprng</code> 缓存抽象时我们需要关注的点有以下两点<ul><li>1、确定方法需要被缓存以及他们的的缓存策略</li><li>2、从缓存中读取之前缓存存储的数据</li></ul></li></ul><p>官网地址：<a href="https://docs.spring.io/spring-framework/docs/5.2.10.RELEASE/spring-framework-reference/integration.html#cache-strategie">https://docs.spring.io/spring-framework/docs/5.2.10.RELEASE/spring-framework-reference/integration.html#cache-strategie</a></p><p>缓存注解配置</p><p><img src="/SpringCache/image-20201228171806703.png" alt="image-20201228171806703"></p><h4 id="2、基础概念"><a href="#2、基础概念" class="headerlink" title="2、基础概念"></a>2、基础概念</h4><p>从3.1版本开始，Spring 框架就支持透明地向现有 Spring 应用程序添加缓存。与事务支持类似，缓存抽象允许在对代码影响最小的情况下一致地使用各种缓存解决方案。从 Spring 4.1 开始，缓存抽象在JSR-107注释和更多定制选项的支持下得到了显著扩展。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  8、整合SpringCache简化缓存开发</span></span><br><span class="line"><span class="comment">*      1、引入依赖</span></span><br><span class="line"><span class="comment">*          spring-boot-starter-cache</span></span><br><span class="line"><span class="comment">*      2、写配置</span></span><br><span class="line"><span class="comment">*          1、自动配置了那些</span></span><br><span class="line"><span class="comment">*              CacheAutoConfiguration会导入 RedisCacheConfiguration</span></span><br><span class="line"><span class="comment">*              自动配置好了缓存管理器，RedisCacheManager</span></span><br><span class="line"><span class="comment">*          2、配置使用redis作为缓存</span></span><br><span class="line"><span class="comment">*          Spring.cache.type=redis</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*       4、原理</span></span><br><span class="line"><span class="comment">*       CacheAutoConfiguration -&gt;RedisCacheConfiguration -&gt;</span></span><br><span class="line"><span class="comment">*       自动配置了 RedisCacheManager -&gt;初始化所有的缓存 -&gt; 每个缓存决定使用什么配置</span></span><br><span class="line"><span class="comment">*       -&gt;如果redisCacheConfiguration有就用已有的，没有就用默认的</span></span><br><span class="line"><span class="comment">*       -&gt;想改缓存的配置，只需要把容器中放一个 RedisCacheConfiguration 即可</span></span><br><span class="line"><span class="comment">*       -&gt;就会应用到当前 RedisCacheManager管理所有缓存分区中</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="3、注解"><a href="#3、注解" class="headerlink" title="3、注解"></a>3、注解</h4><p>对于缓存声明，Spring的缓存抽象提供了一组Java注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"><span class="doctag">@Cacheable</span>: Triggers cache population:触发将数据保存到缓存的操作</span></span><br><span class="line"><span class="comment"><span class="doctag">@CacheEvict</span>: Triggers cache eviction: 触发将数据从缓存删除的操作</span></span><br><span class="line"><span class="comment"><span class="doctag">@CachePut</span>: Updates the cache without interfering with the method execution:不影响方法执行更新缓存</span></span><br><span class="line"><span class="comment"><span class="doctag">@Caching</span>: Regroups multiple cache operations to be applied on a method:组合以上多个操作</span></span><br><span class="line"><span class="comment"><span class="doctag">@CacheConfig</span>: Shares some common cache-related settings at class-level:在类级别共享缓存的相同配置</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure><p><strong>注解使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1、每一个需要缓存的数据我们都需要指定放到那个名字的缓存【缓存分区的划分【按照业务类型划分】】</span></span><br><span class="line"><span class="comment">     * 2、<span class="doctag">@Cacheable</span>(&#123;&quot;category&quot;&#125;)</span></span><br><span class="line"><span class="comment">     *      代表当前方法的结果需要缓存，如果缓存中有，方法不调用</span></span><br><span class="line"><span class="comment">     *      如果缓存中没有，调用方法，最后将方法的结果放入缓存</span></span><br><span class="line"><span class="comment">     * 3、默认行为:</span></span><br><span class="line"><span class="comment">     *      1、如果缓存中有，方法不用调用</span></span><br><span class="line"><span class="comment">     *      2、key默自动生成，缓存的名字:SimpleKey[](自动生成的key值)</span></span><br><span class="line"><span class="comment">     *      3、缓存中value的值，默认使用jdk序列化，将序列化后的数据存到redis</span></span><br><span class="line"><span class="comment">     *      3、默认的过期时间，-1</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *    自定义操作</span></span><br><span class="line"><span class="comment">     *      1、指定缓存使用的key     key属性指定，接收一个SpEl</span></span><br><span class="line"><span class="comment">     *      2、指定缓存数据的存活时间  配置文件中修改ttl</span></span><br><span class="line"><span class="comment">     *      3、将数据保存为json格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//value 缓存的别名</span></span><br><span class="line">     <span class="comment">// key redis中key的名称，默认是方法名称</span></span><br><span class="line">    <span class="meta">@Cacheable(value = &#123;&quot;category&quot;&#125;,key = &quot;#root.method.name&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;CategoryEntity&gt; <span class="title function_">getLevel1Categorys</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// parent_cid为0则是一级目录</span></span><br><span class="line">        List&lt;CategoryEntity&gt; categoryEntities = baseMapper.selectList(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;CategoryEntity&gt;().eq(<span class="string">&quot;parent_cid&quot;</span>, <span class="number">0</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;耗费时间：&quot;</span> + (System.currentTimeMillis() - l));</span><br><span class="line">        <span class="keyword">return</span> categoryEntities;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="4、表达式语法"><a href="#4、表达式语法" class="headerlink" title="4、表达式语法"></a>4、表达式语法</h4><p>配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.gulimall.product.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.cache.CacheProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gcq</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Create</span> 2020-11-01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(CacheProperties.class)</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCacheConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置文件中的东西没有用上</span></span><br><span class="line"><span class="comment">     * 1、原来的配置吻技安绑定的配置类是这样子的</span></span><br><span class="line"><span class="comment">     *      <span class="doctag">@ConfigurationProperties</span>(prefix = &quot;Spring.cache&quot;)</span></span><br><span class="line"><span class="comment">     * 2、要让他生效</span></span><br><span class="line"><span class="comment">     *      <span class="doctag">@EnableConfigurationProperties</span>(CacheProperties.class)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cacheProperties</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    RedisCacheConfiguration <span class="title function_">redisCacheConfiguration</span><span class="params">(CacheProperties cacheProperties)</span> &#123;</span><br><span class="line">        <span class="type">RedisCacheConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> RedisCacheConfiguration.defaultCacheConfig();</span><br><span class="line">        <span class="comment">// 设置key的序列化</span></span><br><span class="line">        config = config.serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>()));</span><br><span class="line">        <span class="comment">// 设置value序列化 -&gt;JackSon</span></span><br><span class="line">        config = config.serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>()));</span><br><span class="line"></span><br><span class="line">        CacheProperties.<span class="type">Redis</span> <span class="variable">redisProperties</span> <span class="operator">=</span> cacheProperties.getRedis();</span><br><span class="line">        <span class="keyword">if</span> (redisProperties.getTimeToLive() != <span class="literal">null</span>) &#123;</span><br><span class="line">            config = config.entryTtl(redisProperties.getTimeToLive());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (redisProperties.getKeyPrefix() != <span class="literal">null</span>) &#123;</span><br><span class="line">            config = config.prefixKeysWith(redisProperties.getKeyPrefix());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!redisProperties.isCacheNullValues()) &#123;</span><br><span class="line">            config = config.disableCachingNullValues();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!redisProperties.isUseKeyPrefix()) &#123;</span><br><span class="line">            config = config.disableKeyPrefix();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>yaml </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Spring:</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">time-to-live:</span> <span class="number">3600000</span>           <span class="comment"># 过期时间</span></span><br><span class="line">      <span class="attr">key-prefix:</span> <span class="string">CACHE_</span>              <span class="comment"># key前缀</span></span><br><span class="line">      <span class="attr">use-key-prefix:</span> <span class="literal">true</span>            <span class="comment"># 是否使用写入redis前缀</span></span><br><span class="line">      <span class="attr">cache-null-values:</span> <span class="literal">true</span>         <span class="comment"># 是否允许缓存空值</span></span><br></pre></td></tr></table></figure><h4 id="5、缓存穿透问题解决"><a href="#5、缓存穿透问题解决" class="headerlink" title="5、缓存穿透问题解决"></a>5、缓存穿透问题解决</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、每一个需要缓存的数据我们都需要指定放到那个名字的缓存【缓存分区的划分【按照业务类型划分】】</span></span><br><span class="line"><span class="comment"> * 2、<span class="doctag">@Cacheable</span>(&#123;&quot;category&quot;&#125;)</span></span><br><span class="line"><span class="comment"> *      代表当前方法的结果需要缓存，如果缓存中有，方法不调用</span></span><br><span class="line"><span class="comment"> *      如果缓存中没有，调用方法，最后将方法的结果放入缓存</span></span><br><span class="line"><span class="comment"> * 3、默认行为:</span></span><br><span class="line"><span class="comment"> *      1、如果缓存中有，方法不用调用</span></span><br><span class="line"><span class="comment"> *      2、key默自动生成，缓存的名字:SimpleKey[](自动生成的key值)</span></span><br><span class="line"><span class="comment"> *      3、缓存中value的值，默认使用jdk序列化，将序列化后的数据存到redis</span></span><br><span class="line"><span class="comment"> *      3、默认的过期时间，-1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    自定义操作</span></span><br><span class="line"><span class="comment"> *      1、指定缓存使用的key     key属性指定，接收一个SpEl</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> <span class="doctag">@Cacheable</span>(value = &#123;&quot;category&quot;&#125;,key = &quot;#root.method.name&quot;)</span></span><br><span class="line"><span class="comment"> *      2、指定缓存数据的存活时间  配置文件中修改ttl</span></span><br><span class="line"><span class="comment"> Spring:</span></span><br><span class="line"><span class="comment">  cache:</span></span><br><span class="line"><span class="comment">    type: redis</span></span><br><span class="line"><span class="comment">    redis:</span></span><br><span class="line"><span class="comment">      time-to-live: 3600000      1h</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> *      3、将数据保存为json格式</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> * 4、Spring-Cache的不足：</span></span><br><span class="line"><span class="comment"> *      1、读模式：</span></span><br><span class="line"><span class="comment"> *          缓存穿透:查询一个null数据，解决 缓存空数据：ache-null-values=true</span></span><br><span class="line"><span class="comment"> *          缓存击穿:大量并发进来同时查询一个正好过期的数据，解决:加锁 ？ 默认是无加锁</span></span><br><span class="line"><span class="comment"> *          缓存雪崩:大量的key同时过期，解决：加上随机时间，Spring-cache-redis-time-to-live</span></span><br><span class="line"><span class="comment"> *       2、写模式：（缓存与数据库库不一致）</span></span><br><span class="line"><span class="comment"> *          1、读写加锁</span></span><br><span class="line"><span class="comment"> *          2、引入canal，感知到MySQL的更新去更新数据库</span></span><br><span class="line"><span class="comment"> *          3、读多写多，直接去数据库查询就行</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    总结：</span></span><br><span class="line"><span class="comment"> *      常规数据（读多写少，即时性，一致性要求不高的数据）完全可以使用SpringCache 写模式（ 只要缓存数据有过期时间就足够了）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    特殊数据：特殊设计</span></span><br><span class="line"><span class="comment"> *      原理：</span></span><br><span class="line"><span class="comment"> *          CacheManager(RedisManager) -&gt; Cache(RedisCache) -&gt;Cache负责缓存的读写</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Cacheable(value = &#123;&quot;category&quot;&#125;,key = &quot;#root.method.name&quot;,sync = true)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;CategoryEntity&gt; <span class="title function_">getLevel1Categorys</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="comment">// parent_cid为0则是一级目录</span></span><br><span class="line">    List&lt;CategoryEntity&gt; categoryEntities = baseMapper.selectList(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;CategoryEntity&gt;().eq(<span class="string">&quot;parent_cid&quot;</span>, <span class="number">0</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;耗费时间：&quot;</span> + (System.currentTimeMillis() - l));</span><br><span class="line">    <span class="keyword">return</span> categoryEntities;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、缓存更新"><a href="#6、缓存更新" class="headerlink" title="6、缓存更新"></a>6、缓存更新</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 级联更新所有的关联数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@CacheEvict</span> 失效模式</span></span><br><span class="line"><span class="comment">     * 1、同时进行多种缓存操作 <span class="doctag">@Caching</span></span></span><br><span class="line"><span class="comment">     * 2、指定删除某个分区下的所有数据 <span class="doctag">@CacheEvict</span>(value = &#123;&quot;category&quot;&#125;,allEntries = true)</span></span><br><span class="line"><span class="comment">     * 3、存储同一类型的数据，都可以指定成同一分区，分区名默认就是缓存的前缀</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> category</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Caching(evict = &#123;</span></span><br><span class="line"><span class="meta">            @CacheEvict(value = &#123;&quot;category&quot;&#125;,key = &quot;&#x27;getLevel1Categorys&#x27;&quot;),</span></span><br><span class="line"><span class="meta">            @CacheEvict(value = &#123;&quot;category&quot;&#125;,key = &quot;&#x27;getCatelogJson&#x27;&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line"><span class="comment">//    @CacheEvict(value = &#123;&quot;category&quot;&#125;,allEntries = true)</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateCascate</span><span class="params">(CategoryEntity category)</span> &#123;</span><br><span class="line">        <span class="comment">// 更新自己表对象</span></span><br><span class="line">        <span class="built_in">this</span>.updateById(category);</span><br><span class="line">        <span class="comment">// 更新关联表对象</span></span><br><span class="line">        categoryBrandRelationService.updateCategory(category.getCatId(), category.getName());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>总结业务流程：</p><p>如果忘了这个技术点看下做的笔记的例子，然后去官网看下文档，温故而知新</p><p>流程图</p><p><img src="/SpringCache/image-20201228171552816.png" alt="image-20201228171552816"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Spring-Cache&quot;&gt;&lt;a href=&quot;#Spring-Cache&quot; class=&quot;headerlink&quot; title=&quot;Spring Cache&quot;&gt;&lt;/a&gt;Spring Cache&lt;/h2&gt;&lt;h4 id=&quot;1、简介&quot;&gt;&lt;a href=&quot;#1、简介&quot; cla</summary>
      
    
    
    
    <category term="缓存" scheme="http://cardioid.gitee.io/categories/%E7%BC%93%E5%AD%98/"/>
    
    
    <category term="缓存" scheme="http://cardioid.gitee.io/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat的安装及配置</title>
    <link href="http://cardioid.gitee.io/2022/01/11/Java/tomcat/Tomcat/"/>
    <id>http://cardioid.gitee.io/2022/01/11/Java/tomcat/Tomcat/</id>
    <published>2022-01-11T11:32:11.000Z</published>
    <updated>2022-04-10T16:38:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><h2 id="下载、安装"><a href="#下载、安装" class="headerlink" title="下载、安装"></a>下载、安装</h2><h3 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h3><p>　　进官网下载 ： <a href="https://tomcat.apache.org/">Apache Tomcat® - Welcome!</a><br>　　选择自己适合的版本。在这里演示的是下载 Tomcat 7（解压安装版）。</p><p><img src="/Tomcat/1688578-20190715201044938-457753953.png" alt="img"></p><h3 id="2、解压、启动tomcat"><a href="#2、解压、启动tomcat" class="headerlink" title="2、解压、启动tomcat"></a>2、解压、启动tomcat</h3><p>　　解压到指定目录。<br>　　tomcat7之后的版本一般不用配置环境变量。</p><p>配置环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">若进不去网址，则需要手动配置环境变量。</span><br><span class="line">    CATALINA_HOME：Tomcat的安装路径。 比如： C:\Users\Downloads\apache-tomcat-7.0.94</span><br><span class="line">    PATH：一些命令所在的路径。 比如: C:\Users\Downloads\apache-tomcat-7.0.94\bin</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">找到bin目录下的 startup.bat 文件。</span><br><span class="line">使用某软件打开后（比如：Notepad++），</span><br><span class="line">如果存在  if exist &quot;%CATALINA_HOME%\bin\catalina.bat&quot; goto okHome  ，</span><br><span class="line">则表示 bin 目录下存在 catalina.bat文件即可访问tomcat页面（启动服务器后），</span><br><span class="line">此时不需要配置环境变量。</span><br><span class="line"></span><br><span class="line">启动 tomcat 服务后（可直接双击startup.bat文件）， 在浏览器中输入 http://localhost:8080/， 若能进入页面，则成功。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">启动tomcat:</span><br><span class="line">    方法1：</span><br><span class="line">        直接双击打开bin目录下的startup.bat文件。</span><br><span class="line">        </span><br><span class="line">    方法2：</span><br><span class="line">        使用命令行启动，首先进入tomcat的bin目录，然后输入startup即可启动。</span><br><span class="line">        比如： </span><br><span class="line">            通过命令行进入bin目录</span><br><span class="line">                cd C:\Users\Downloads\apache-tomcat-7.0.94\bin</span><br><span class="line">            启动tomcat</span><br><span class="line">                startup</span><br><span class="line">            关闭tomcat </span><br><span class="line">                shutdown</span><br></pre></td></tr></table></figure><p>成功启动后，访问网站后显示如下：</p><p><img src="/Tomcat/1688578-20190715201251407-518918367.png" alt="img"></p><h3 id="3、tomcat日志文件乱码问题"><a href="#3、tomcat日志文件乱码问题" class="headerlink" title="3、tomcat日志文件乱码问题"></a>3、tomcat日志文件乱码问题</h3><p>　　找到安装目录下logging.properties文件的位置。<br>　　比如 F:\tomcat\apache-tomcat-7.0.94\conf\logging.properties<br>　　将其中关于utf-8 的信息删除即可。</p><p><img src="/Tomcat/1688578-20190715201353281-68318591.png" alt="img"></p><p><img src="/Tomcat/1688578-20190715201427672-549961247.png" alt="img"></p><h2 id="IntelliJ-IDEA配置Tomcat"><a href="#IntelliJ-IDEA配置Tomcat" class="headerlink" title="IntelliJ IDEA配置Tomcat"></a>IntelliJ IDEA配置Tomcat</h2><h3 id="1、新建一个JavaWeb项目"><a href="#1、新建一个JavaWeb项目" class="headerlink" title="1、新建一个JavaWeb项目"></a>1、新建一个JavaWeb项目</h3><p><img src="/Tomcat/1688578-20190715202254141-1870003486.png" alt="img"></p><h3 id="2、配置Tomcat"><a href="#2、配置Tomcat" class="headerlink" title="2、配置Tomcat"></a>2、配置Tomcat</h3><p>选择Run –&gt; Edit Configurations…</p><p><img src="/Tomcat/1688578-20190715202348747-104151589.png" alt="img"></p><p>选择 Tomcat Server –&gt; Local， 并配置相关的信息。</p><p><img src="/Tomcat/1688578-20190715202436844-1406328321.png" alt="img"></p><p>在Deployment下，选择需要放入tomcat容器的项目。</p><p><img src="/Tomcat/1688578-20190715202519427-1863309457.png" alt="img"></p><h3 id="3、远程-Debug-Tomcat-代码"><a href="#3、远程-Debug-Tomcat-代码" class="headerlink" title="3、远程 Debug Tomcat 代码"></a>3、远程 Debug Tomcat 代码</h3><p>　　选择Run –&gt; Edit Configurations –&gt; Remote</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">【配置 JVM 参数】</span><br><span class="line">    -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005</span><br><span class="line"></span><br><span class="line">注：</span><br><span class="line">    用于 debug 的代码必须与远程部署的代码完全一致，不能发生任何的修改，否则打上的断点可能无法命中。</span><br></pre></td></tr></table></figure><p><img src="/Tomcat/1688578-20211218132748403-828342498.png" alt="img"></p><h2 id="tomcat启动失败情况"><a href="#tomcat启动失败情况" class="headerlink" title="tomcat启动失败情况"></a>tomcat启动失败情况</h2><h3 id="1、若是8080报错。"><a href="#1、若是8080报错。" class="headerlink" title="1、若是8080报错。"></a>1、若是8080报错。</h3><p>先查询是哪个进程占用了，若能直接删除最好，不行的话，再百度。</p><p>　　windows查询端口号以及进程：<br>　　　　WIN + R 敲cmd打开命令行。<br>　　　　　　输入：netstat -aon|findstr 端口号<br>　　　　　　输出的是端口号以及其PID。</p><p>　　　　　　输入：tasklist | findstr PID<br>　　　　　　输出的是占用端口号的进程。</p><p>　　　　　　输入：taskkill &#x2F;f &#x2F;t &#x2F;im 进程名 （用于结束进程）</p><p>　　若是oracle软件导致的，可以根据以下步骤进行修改。<br>　　　　oracle 10g修改默认端口号（8080-&gt;&gt;8088）<br>　　　　windows下：<br>　　　　　　WIN + R 敲cmd打开命令行。<br>　　　　　　输入：sqlplus &#x2F; as sysdba；<br>　　　　然后会提示输入数据库的用户名+口令（根据自己的情况输入）。<br>　　　　　　输入（用户名）：SYSTEM<br>　　　　　　输入（口令）：SYSTEM<br>　　　　连接数据库成功后：<br>　　　　　　输入：exec dbms_xdb.sethttpport(8088)<br>　　　　此时就将默认端口号（8080）改为了8088.</p><h3 id="2、ClassFormatException"><a href="#2、ClassFormatException" class="headerlink" title="2、ClassFormatException"></a>2、ClassFormatException</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">【启动tomcat报错：】</span><br><span class="line">org.apache.tomcat.util.bcel.classfile.ClassFormatException: Invalid byte tag in constant pool: 18</span><br><span class="line"></span><br><span class="line">【原因一：可能是 metadata-complete=&quot;true&quot;未设置。】</span><br><span class="line"></span><br><span class="line">&lt;web-app version=&quot;3.0&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot; metadata-complete=&quot;true&quot;&gt;</span><br><span class="line"></span><br><span class="line">  metadata-complete=&quot;true&quot; 这句话的意思是设置tomcat启动后不要自动扫描注解和网络碎片。【原因二：当前 tomcat 版本与 JDK 不兼容】比如 maven 工程且通过命令  tomcat:run -Dmaven.tomcat.port=9000 去启动时，可能默认选择的是 tomcat6 的版本。解决办法是添加一个 tomcat7-maven-plugin 插件，并通过命令 tomcat7:run -Dmaven.tomcat.port=9000 去启动。</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">  &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.2&lt;/version&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Tomcat&quot;&gt;&lt;a href=&quot;#Tomcat&quot; class=&quot;headerlink&quot; title=&quot;Tomcat&quot;&gt;&lt;/a&gt;Tomcat&lt;/h1&gt;&lt;h2 id=&quot;下载、安装&quot;&gt;&lt;a href=&quot;#下载、安装&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="Tomcat" scheme="http://cardioid.gitee.io/categories/Tomcat/"/>
    
    
    <category term="Tomcat" scheme="http://cardioid.gitee.io/tags/Tomcat/"/>
    
  </entry>
  
  <entry>
    <title>JVM 虚拟机</title>
    <link href="http://cardioid.gitee.io/2022/01/11/Java/jvm%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/jvm/"/>
    <id>http://cardioid.gitee.io/2022/01/11/Java/jvm%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/jvm/</id>
    <published>2022-01-11T04:15:07.000Z</published>
    <updated>2022-04-10T16:44:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JVM内存结构"><a href="#JVM内存结构" class="headerlink" title="JVM内存结构"></a>JVM内存结构</h1><p>java虚拟机在执行程序的过程中会将内存划分为不同的数据区域</p><img src="jvm/aHR0cDovL3d3dy5jaG91cGFuZ3hpYS5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTkvMTAvMTU3MTM2MzMwOTUzNC5qcGc" alt="image" style="zoom: 50%;" /><p><strong>黄色</strong>（私有）      </p><ol><li>java文件 编译成     .class 文件     </li><li>.class 文件      会被类装载器 <strong>装载</strong>到我们的运行时数据区</li><li>运行时数据区 主要是包括堆、栈（虚拟机栈、本地方法栈）、方法区、程序计数器</li><li>程序计数器：当前线程走到哪</li></ol><ul><li><p>第一，JVM分为五个区域：虚拟机栈、本地方法栈、方法区、堆、程序计数器。</p></li><li><p>第二，JVM五个区中线程私有(黄色)   虚拟机栈、本地方法栈、程序计数器</p><p>​                                                   线程共享区（绿色） 方法区和堆为。</p></li><li><p>第三，JVM不同区域的占用内存大小不同，一般情况下堆最大，程序计数器较小。那么最大的区域会放什么？当然就是Java中最多的“对象”了。</p></li></ul><h2 id="线程共享"><a href="#线程共享" class="headerlink" title="线程共享"></a>线程共享</h2><h3 id="堆（Heap）"><a href="#堆（Heap）" class="headerlink" title="堆（Heap）"></a>堆（Heap）</h3><img src="jvm/aHR0cDovL3d3dy5jaG91cGFuZ3hpYS5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTkvMTAvaGVhcC5qcGc" alt="image" style="zoom:50%;" /><p>堆可以细分为：</p><ul><li><p>新生代</p><ul><li>Eden空间</li><li>From Survivor 空间</li><li>To Survivor 空间</li></ul></li><li><p>老年代</p></li><li><p>永久代&#x2F;原空间</p><ul><li>Java8 以前永久代、受 JVM 管理</li><li>Java8 以后原空间，直接使用物理内存，因此默认情况下，原空间的大小仅受本地内存限制</li></ul></li></ul><p>上面已经得出结论，堆内存最大，堆是被线程共享，堆的目的就是<strong>存放对象</strong>。几乎所有的<strong>对象实例都在此分配</strong>。当然，随着优化技术的更新，某些数据也会被放在栈上等。</p><p>枪打出头鸟，树大招风。因为堆占用内存空间最大，堆也是Java垃圾回收的主要区域（重点对象），因此也称作“GC堆”（Garbage Collected Heap）。</p><p>Java虚拟机规范规定，Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可。也就是说堆的内存是一块块拼凑起来的。要增加堆空间时，往上“拼凑”（可扩展性）即可，但当堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError异常。</p><h3 id="方法区（Method-Area）"><a href="#方法区（Method-Area）" class="headerlink" title="方法区（Method Area）"></a>方法区（Method Area）</h3><p>方法区与堆有很多共性：线程共享、内存不连续、可扩展、可垃圾回收，同样当无法再扩展时会抛出OutOfMemoryError异常。</p><p>正因为如此相像，Java虚拟机规范把方法区描述为堆的一个逻辑部分，但目前实际上是与Java堆分开的（Non-Heap）。</p><p>方法区个性化的是，它存储的是已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p><p>方法区的内存回收目标主要是针对常量池的回收和对类型的卸载，一般来说这个区域的回收“成绩”比较难以令人满意，尤其是类型的卸载，条件相当苛刻，但是回收确实是有必要的。</p><img src="jvm/aHR0cDovL3d3dy5jaG91cGFuZ3hpYS5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTkvMTAvbWV0aG9kYXJlYS5qcGc" alt="image" style="zoom: 50%;" /><h2 id="线程私有"><a href="#线程私有" class="headerlink" title="线程私有"></a>线程私有</h2><h3 id="程序计数器（Program-Counter-Register）"><a href="#程序计数器（Program-Counter-Register）" class="headerlink" title="程序计数器（Program Counter Register）"></a>程序计数器（Program Counter Register）</h3><p>关于程序计数器我们已经得知：占用内存较小，现成私有。它是唯一没有OutOfMemoryError异常的区域。</p><p>程序计数器的作用可以看做是当前线程所执行的字节码的行号指示器，字节码解释器工作时就是通过改变计数器的值来选取下一条字节码指令。其中，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖计数器来完成。</p><p>Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）只会执行一条线程中的指令。</p><p><img src="/jvm/aHR0cDovL3d3dy5jaG91cGFuZ3hpYS5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTkvMTAvcHJvZ3JhbS1jb3VudGVyLmpwZw" alt="image"></p><p>因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间的计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。</p><p>如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Natvie方法，这个计数器值则为空（Undefined）。</p><h3 id="虚拟机栈（JVM-Stacks）"><a href="#虚拟机栈（JVM-Stacks）" class="headerlink" title="虚拟机栈（JVM Stacks）"></a>虚拟机栈（JVM Stacks）</h3><p>虚拟机栈线程私有，生命周期与线程相同。</p><p>栈帧(Stack Frame)是用于支持虚拟机进行方法调用和方法执行的数据结构。栈帧存储了方法的局部变量表、操作数栈、动态连接和方法返回地址等信息。每一个方法从调用至执行完成的过程，都对应着一个栈帧在虚拟机栈里从入栈到出栈的过程。</p><p><img src="/jvm/aHR0cDovL3d3dy5jaG91cGFuZ3hpYS5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTkvMTAvc3RhY2suanBn" alt="image"></p><p>局部变量表(Local Variable Table)是一组变量值存储空间，用于存放方法参数和方法内定义的局部变量。包括8种基本数据类型、对象引用（reference类型）和returnAddress类型（指向一条字节码指令的地址）。</p><p>其中64位长度的long和double类型的数据会占用2个局部变量空间（Slot），其余的数据类型只占用1个。</p><p>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常；如果虚拟机栈动态扩展时无法申请到足够的内存时会抛出OutOfMemoryError异常。</p><p>操作数栈(Operand Stack)也称作操作栈，是一个后入先出栈(LIFO)。随着方法执行和字节码指令的执行，会从局部变量表或对象实例的字段中复制常量或变量写入到操作数栈，再随着计算的进行将栈中元素出栈到局部变量表或者返回给方法调用者，也就是出栈&#x2F;入栈操作。</p><p>动态链接：Java虚拟机栈中，每个栈帧都包含一个指向运行时常量池中该栈所属方法的符号引用，持有这个引用的目的是为了支持方法调用过程中的动态链接(Dynamic Linking)。</p><p>方法返回：无论方法是否正常完成，都需要返回到方法被调用的位置，程序才能继续进行。</p><h3 id="本地方法栈（Native-Method-Stacks）"><a href="#本地方法栈（Native-Method-Stacks）" class="headerlink" title="本地方法栈（Native Method Stacks）"></a>本地方法栈（Native Method Stacks）</h3><p>本地方法栈（Native Method Stacks）与虚拟机栈作用相似，也会抛出StackOverflowError和OutOfMemoryError异常。</p><p>区别在于虚拟机栈为虚拟机执行Java方法（字节码）服务，而本地方法栈是为虚拟机使用到的Native方法服务。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>经。</p><p><img src="/jvm/aHR0cDovL3d3dy5jaG91cGFuZ3hpYS5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTkvMTAvanZtLXhtaW5kLmpwZw" alt="image"></p><h1 id="设置内存参数"><a href="#设置内存参数" class="headerlink" title="设置内存参数"></a>设置内存参数</h1><p><img src="/jvm/aHR0cDovL3d3dy5jaG91cGFuZ3hpYS5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTkvMTAvaGVhcC5qcGc" alt="image"></p><p>图中展示了堆中三个区域：Eden、From Survivor、To Survivor。从图中可以也可以看到它们的大小比例，准确来说是：8:1:1。</p><p>还记得在设置JVM时，常用的类似-Xms和-Xmx等参数吗？对的它们就是用来说设置堆中各区域的大小的。</p><p> <img src="/jvm/aHR0cDovL3d3dy5jaG91cGFuZ3hpYS5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTkvMTAvc3RhY2stc2l6ZS5wbmc" alt="image"></p><p>控制参数详解：</p><ul><li>-Xms设置<strong>堆的最小空间</strong>大小。</li><li>-Xmx设置<strong>堆的最大空间</strong>大小。</li><li>-Xmn堆中<strong>新生代初始及最大大小</strong>（NewSize和MaxNewSize为其细化）。</li><li>-XX:NewSize设置新生代最小空间大小。</li><li>-XX:MaxNewSize设置新生代最大空间大小。</li><li>-XX:PermSize设置永久代最小空间大小。</li><li>-XX:MaxPermSize设置永久代最大空间大小。</li><li>-Xss设置每个线程的堆栈大小。</li></ul><p>对照上面两个图，再来看这些参数是不是没有之前那么枯燥了，它们在图中都有了对应的位置。</p><p>有没有发现没有直接设置老年代空间大小的参数？我们通过简单的计算获得。</p><ol><li>老年代空间大小&#x3D;堆空间大小-年轻代大空间大小</li></ol><p>对上面参数立即了，但记忆有困难？那么，以下几个助记词可能更好的帮你记忆和理解参数的含义。</p><p>Xmx（memory maximum）, Xms（memory startup）, Xmn（memory nursery&#x2F;new）, Xss（stack size）。</p><p>对于参数的格式可以这样理解：</p><ul><li><p>-: 标准VM选项，VM规范的选项。</p></li><li><p>-X: 非标准VM选项，不保证所有VM支持。</p></li><li><p>-XX: 高级选项，高级特性，但属于不稳定的选项</p></li></ul><h1 id="GC垃圾回收"><a href="#GC垃圾回收" class="headerlink" title="GC垃圾回收"></a>GC垃圾回收</h1><h2 id="GC概述"><a href="#GC概述" class="headerlink" title="GC概述"></a>GC概述</h2><p>垃圾收集（Garbage Collection）通常被称为“GC”，由虚拟机“自动化”完成垃圾回收工作。</p><p>思考一个问题，既然GC会自动回收，开发人员为什么要学习GC和内存分配呢？为了能够配置上面的参数配置？参数配置又是为了什么？</p><p>“<strong>当需要排查各种内存溢出，内存泄露问题时，当垃圾成为系统达到更高并发量的瓶颈时，我们就需要对GC的自动回收实施必要的监控和调节。</strong>”</p><p>JVM中程序计数器、虚拟机栈、本地方法栈3个区域随线程而生随线程而灭。栈帧随着方法的进入和退出做入栈和出栈操作，实现了自动的内存清理。它们的内存分配和回收都具有确定性。</p><p>因此，GC垃圾回收主要<strong>集中在堆和方法区</strong>，在程序运行期间，这部分内存的分配和使用都是动态的。</p><h2 id="GC回收流程"><a href="#GC回收流程" class="headerlink" title="GC回收流程"></a>GC回收流程</h2><p>​               <img src="/jvm/aHR0cHM6Ly9pbWcxLnR1aWNvb2wuY29tL3JNM1FSM3EuanBnIXdlYg" alt="img"></p><p>（1）Eden区域是用来存放使用new或者newInstance等方式创建的对象，默认都是存放在Eden区，除非这个对象太大，或者超过了设定的阈值-XX:PretenureSizeThresold,这样的对象会被直接分配到Old区域。</p><p>（2）2个Survivor（幸存）区，一般称S0，S1，理论上他们是一样大的，解释一下，他们是如何工作的：</p><p>在不断创建对象的过程中，Eden区会满，这时候会开始做Young G也叫Minor GC，而Young空间的第一次GC就是找出Eden区中，幸存活着的对象，然后将这些对象，放到S0，或S1区中的其中一个， 假设第一次选择了S0，它会逐步将活着的对象拷贝到S0区域，但是如果S0区域满了，剩下活着的对象只能放old区域了，接下来要做的是，将Eden区域 清空，此时时候S1区域也是空的。</p><p>当第二次Eden区域满的时候，就将Eden区域中活着的对象+S0区域中活着的对象，迁移到S1中，如果S1放不下，就会将剩下的部门，放到Old区域中，只是这次对象来源区域增加了S0，最后会将Eden区+S0区域，清空</p><p>第三次和第四次依次类推，始终保证S0和S1有一个是空的，用来存储临时对象，用于交换空间的目的，反反复复多次没有被淘汰的对象，将会放入old区域中，默认是15次。具体的交换过程就和上图中的信息相似。</p><p>如果old区域放不下，会进行fullGC，old区 young区 所有垃圾 全部剔除  如果放得下就放 再放不下 就会报内存溢出异常OOM</p><h2 id="如何判断对象存活"><a href="#如何判断对象存活" class="headerlink" title="如何判断对象存活"></a>如何判断对象存活</h2><p>判断对象常规有两种方法：引用计数算法和可达性分析算法（Reachability Analysis）。</p><p><strong>引用计数算法</strong>：给对象添加一个引用计数器，每当有一个地方引用它时计数器加1，引用释放时计数减1，当计数器为0时可以回收。</p><p>引用计数算法实现简单，判断高效，在微软COM和Python语言等被广泛使用，但在主流的Java虚拟机中没有使用该方法，主要是因为无法解决<strong>对象相互循环引用</strong>的问题。</p><p><strong>可达性分析算法</strong>：基本思想是通过一系列称为“GC Root”的对象（如系统类加载器、栈中的对象、处于激活状态的线程等）作为起点，基于对象引用关系，开始向下搜索，所走过的路径称为引用链，当一个对象到GC Root没有任何引用链相连，证明对象是不可用的。</p><p><img src="/jvm/aHR0cDovL3d3dy5jaG91cGFuZ3hpYS5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTkvMTAvZ2Mtcm9vdC5qcGc" alt="image"></p><p>上图中中绿色部分为存活对象，灰色部分为可回收对象。虽然灰色部分内部依旧有关联，但它们到GC Root是不可达的。 </p><h2 id="面试问题"><a href="#面试问题" class="headerlink" title="面试问题"></a>面试问题</h2><p>面试官，说说Java GC都用了哪些算法？分别应用在什么地方？</p><p>答：复制算法、标记清除、标记整理……</p><h2 id="标记清除算法"><a href="#标记清除算法" class="headerlink" title="标记清除算法"></a>标记清除算法</h2><p>标记清除（Mark-Sweep）算法，包含“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收掉所有被标记的对象。</p><p>标记清除算法是最基础的收集算法，后续的收集算法都是基于该思路并对其缺点进行改进而得到的。</p><p>​           <img src="/jvm/aHR0cDovL3d3dy5jaG91cGFuZ3hpYS5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTkvMTAvbWFyay1jbGVhbi5naWY" alt="image"> </p><p>主要缺点：一个是效率问题，标记和清除过程的效率都不高；另外是空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致，当程序在以后的运行过程中需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</p><h2 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h2><p>复制（Copying）算法：将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当一块内存用完了，就将还存活着的对象复制到另外一块上，然后清理掉前一块。</p><p><img src="/jvm/aHR0cDovL3d3dy5jaG91cGFuZ3hpYS5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTkvMTAvZ2MtY29weWluZy5qcGc" alt="image"></p><p>每次对半区内存回收时、内存分配时就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。</p><p>缺点：将内存缩小为一半，性价比低，持续复制长生存期的对象则导致效率低下。</p><p>JVM堆中新生代便采用复制算法。回到最初推分配结构图。</p><p><img src="/jvm/aHR0cDovL3d3dy5jaG91cGFuZ3hpYS5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTkvMTAvaGVhcC5qcGc" alt="image"></p><p>在GC回收过程中，当Eden区满时，还存活的对象会被复制到其中一个Survivor区；当回收时，会将Eden和使用的Survivor区还存活的对象，复制到另外一个Survivor区，然后对Eden和用过的Survivor区进行清理。</p><p>如果另外一个Survivor区没有足够的内存存储时，则会进入老年代。</p><p>这里针对哪些对象会进入老年代有这样的机制：对象每经历一次复制，年龄加1，达到晋升年龄阈值后，转移到老年代。</p><p>在这整个过程中，由于Eden中的对象属于像浮萍一样“瞬生瞬灭”的对象，所以并不需要1：1的比例来分配内存，而是采用了8：1：1的比例来分配。</p><p>而针对那些像“水熊虫”一样，历经多次清理依旧存活的对象，则会进入老年代，而老年的清理算法则采用下面要讲到的“标记整理算法”。</p><h2 id="标记整理算法"><a href="#标记整理算法" class="headerlink" title="标记整理算法"></a>标记整理算法</h2><p>标记整理（Mark-Compact）算法：标记过程与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p><p><img src="/jvm/aHR0cDovL3d3dy5jaG91cGFuZ3hpYS5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTkvMTAvbWFyay1jb21wYWN0LmpwZw" alt="image"></p><p>这种算法不既不用浪费50%的内存，也解决了复制算法在对象存活率较高时的效率低下问题。</p><h2 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h2><p>分代收集算法，基本思路：将Java的堆内存逻辑上分成两块，新生代和老年代，针对不同存活周期、不同大小的对象采取不同的垃圾回收策略。</p><p>而在新生代中大多数对象都是瞬间对象，只有少量对象存活，复制较少对象即可完成清理，因此采用复制算法。而针对老年代中的对象，存活率较高，又没有额外的担保内存，因此采用标记整理算法。</p><p>其实，回头看，分代收集算法就是对新生代和老年代算法从策略维度的规划而已。</p><h1 id="常见问题锦集"><a href="#常见问题锦集" class="headerlink" title="常见问题锦集"></a>常见问题锦集</h1><h2 id="1、对象进入Old区域有什么坏处？"><a href="#1、对象进入Old区域有什么坏处？" class="headerlink" title="1、对象进入Old区域有什么坏处？"></a>1、对象进入Old区域有什么坏处？</h2><p>old区域一般称为老年代，老年代与新生代不一样，年轻代，我们可以认为存活下来的对象很少，而老年代则相反，存活下来的对象很多，所以JVM的 堆内存，才是我们通常关注的主战场，因为这里面活着的对象非常多，所以发生一次FULL GC，来找出来所有存活的对象是非常耗时的，因此，我们应该尽量避免FULL GC的发生。</p><h2 id="2、S0和S1一般多大，靠什么参数来控制，有什么变化？"><a href="#2、S0和S1一般多大，靠什么参数来控制，有什么变化？" class="headerlink" title="2、S0和S1一般多大，靠什么参数来控制，有什么变化？"></a>2、S0和S1一般多大，靠什么参数来控制，有什么变化？</h2><p>一般来说很小，我们大概知道它与Young差不多相差一倍的比例，设置的的参数主要有两个：</p><p>-XX:SurvivorRatio&#x3D;8</p><p>-XX:InitialSurvivorRatio&#x3D;8</p><p>第一个参数是Eden和Survivor区域比重，注意是一个Survivor的的大小，如果将其设置为8，则说明Eden区是一个Survivor区的8倍，换句话说S0或S1空间是整个Young空间的1&#x2F;10，剩余的80%由Eden区域来使用。</p><p>第二个参数是Young&#x2F;S0的比值，当其设置为8时，表示s0或s1占整个Young空间的12.5%。</p><h2 id="3、一个对象每次Minor-Gc时，活着的对象都会在s0和s1区域转移，经过经过Minor-GC多少次后，会进入Old区域呢？"><a href="#3、一个对象每次Minor-Gc时，活着的对象都会在s0和s1区域转移，经过经过Minor-GC多少次后，会进入Old区域呢？" class="headerlink" title="3、一个对象每次Minor Gc时，活着的对象都会在s0和s1区域转移，经过经过Minor GC多少次后，会进入Old区域呢？"></a>3、一个对象每次Minor Gc时，活着的对象都会在s0和s1区域转移，经过经过Minor GC多少次后，会进入Old区域呢？</h2><p>默认是15次，参数设置-XX:MaxTenuringThreshold&#x3D;15,计数器会在对象的头部记录它交换的次数</p><h2 id="4、为什么发生FULL-GC会带来很大的危害？"><a href="#4、为什么发生FULL-GC会带来很大的危害？" class="headerlink" title="4、为什么发生FULL GC会带来很大的危害？"></a>4、为什么发生FULL GC会带来很大的危害？</h2><p>在发生FULL GC的时候，意味着JVM会安全的暂停所有正在执行的线程（Stop The World），来回收内存空间，在这个时间段内，所有除<strong>了回收垃圾的线程外，其他有关JAVA的程序，代码都会静止</strong>，反映到系统上，就会出现<strong>系统响应大幅度变慢，卡机</strong>等状态。</p><p>举个通俗易懂点的例子，就是在一个房间里，如果有一个人，不停的扔垃圾，然后有一个清洁工不停扫垃圾，这时候，我们的系统是OK的，因为基本不会 出现垃圾堆满房间的情景，而且因为清洁工可以对付过来，假设现在有10个人不停扔垃圾，那么就房间就会很快被堆满，这时候清洁工，由于工作不过来了，大声 吼一声，你们都暂停3分钟，别再扔了，我先把这个房间打扫完，你们才可以扔。</p><p>在这个场景中，一个人扔，一个人扫，就类似于Minor GC，这时候，并不会影响扔垃圾的人，然后一旦10个人同时仍，而且很快就没地方仍了，这时候，就会触发Full GC，然后JVM下令，你们暂时都别仍了，等我什么时候回收完垃圾了，你们在仍，现在大家清楚了吧，所谓的10个人，就是类似我们成千上百的java类， 在不停的执行任务，所谓的清洁工，就是我们的GC机制，所以，大家在平时编码的时候，一定注意尽量<strong>少造点垃圾对象</strong>，这样触发FULL GC的几率，才会变小。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JVM内存结构&quot;&gt;&lt;a href=&quot;#JVM内存结构&quot; class=&quot;headerlink&quot; title=&quot;JVM内存结构&quot;&gt;&lt;/a&gt;JVM内存结构&lt;/h1&gt;&lt;p&gt;java虚拟机在执行程序的过程中会将内存划分为不同的数据区域&lt;/p&gt;
&lt;img src=&quot;jvm/a</summary>
      
    
    
    
    <category term="JVM" scheme="http://cardioid.gitee.io/categories/JVM/"/>
    
    
    <category term="JVM" scheme="http://cardioid.gitee.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch的使用笔记</title>
    <link href="http://cardioid.gitee.io/2021/12/17/Java/elasticsearch/elasticsearch/"/>
    <id>http://cardioid.gitee.io/2021/12/17/Java/elasticsearch/elasticsearch/</id>
    <published>2021-12-17T15:12:36.000Z</published>
    <updated>2022-03-01T20:01:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="es的概念"><a href="#es的概念" class="headerlink" title="es的概念"></a>es的概念</h2><p>速度快、易扩展、弹性、灵活、操作简单、多语言客户端、X-Pack、hadoop&#x2F;spark强强联手、开箱即用。</p><ul><li><strong>分布式：</strong>横向扩展非常灵活</li><li><strong>全文检索：</strong>基于lucene的强大的全文检索能力；</li><li><strong>近实时搜索和分析：</strong>数据进入ES，可达到近实时搜索，还可进行聚合分析</li><li><strong>高可用：</strong>容错机制，自动发现新的或失败的节点，重组和重新平衡数据</li><li><strong>模式自由：</strong>ES的动态mapping机制可以自动检测数据的结构和类型，创建索引并使数据可搜索。</li><li><strong>RESTful API：</strong>JSON + HTTP</li></ul><h3 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h3><p>先将文档中包含的关键字全部提取出来<br>然后再将关键字与文档的对应关系保存起来<br>最后对关键字本身做索引排序。<br>这样在用户检索关键字时， 可以先查找关键字索引，在通过关键字与文档的对应关系查找到所在的文档。</p><p>如下面的两个文档：</p><p>文档1： I love elasticsearch<br>文档2： I love logstash<br>他们对应的倒排索引为： “√” 表示文档中包含这个关键字</p><p><img src="/./elasticsearch/1640660690269.png" alt="1640660690269"></p><h3 id="分片（shard）："><a href="#分片（shard）：" class="headerlink" title="分片（shard）："></a>分片（shard）：</h3><p>如果我们的索引数据量很大，超过硬件存放单个文件的限制，就会影响查询请求的速度，ES引入了分片技术。一个分片本身就是一个完成的搜索引擎，文档存储在分片中，而分片会被分配到集群中的各个节点中，随着集群的扩大和缩小，<strong>ES会自动的将分片在节点之间进行迁移</strong>，以保证集群能保持一种平衡。分片有以下特点：</p><ol><li><strong>ES的一个索引可以包含多个分片（shard）</strong>；</li><li><strong>每一个分片（shard）都是一个最小的工作单元，承载部分数据</strong>；</li><li>每个shard都是一个<strong>lucene实例</strong>，有完整的简历索引和处理请求的能力；</li><li>增减节点时，shard会自动在nodes中负载均衡；</li><li>一个文档只能完整的存放在一个shard上</li><li>一个索引中含有shard的数量，默认值为5，在索引创建后这个值是不能被更改的。</li><li>优点：水平分割和扩展我们存放的内容索引；分发和并行跨碎片操作提高性能&#x2F;吞吐量；</li><li>每一个shard关联的副本分片（replica shard）的数量，默认值为1，这个设置在任何时候都可以修改。</li></ol><h3 id="副本：replica"><a href="#副本：replica" class="headerlink" title="副本：replica"></a>副本：replica</h3><p>副本（replica shard）就是shard的冗余备份，它的主要作用：</p><ol><li>冗余备份，防止数据丢失；</li><li>shard异常时负责容错和负载均衡；</li></ol><h2 id="Elasticsearch安装"><a href="#Elasticsearch安装" class="headerlink" title="[Elasticsearch安装]"></a>[Elasticsearch安装]</h2><h2 id="安装中文分词器IKAnalyzer"><a href="#安装中文分词器IKAnalyzer" class="headerlink" title="[安装中文分词器IKAnalyzer]"></a>[安装中文分词器IKAnalyzer]</h2><ul><li>下载Elasticsearch<code>7.6.2</code>的docker镜像：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull elasticsearch:7.6.2</span><br></pre></td></tr></table></figure><ul><li>修改虚拟内存区域大小，否则会因为过小而无法启动:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -w vm.max_map_count=262144</span><br></pre></td></tr></table></figure><ul><li>使用如下命令启动Elasticsearch服务：</li></ul><p>-e ES_JAVA_OPTS&#x3D;”-Xms64m -Xmx512m”  大一点，有时候会因为内存小 比如批量导入数据时候出问题</p><p>如上表示启动的时候，最大内存512M，最小内存64M </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 9200:9200 -p 9300:9300 --name elasticsearch \</span><br><span class="line">-e &quot;discovery.type=single-node&quot; \</span><br><span class="line">-e &quot;cluster.name=elasticsearch&quot; \</span><br><span class="line">-e ES_JAVA_OPTS=&quot;-Xms64m -Xmx2g&quot; \</span><br><span class="line">-v /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">-v /mydata/elasticsearch/data:/usr/share/elasticsearch/data \</span><br><span class="line">-d elasticsearch:7.6.2</span><br></pre></td></tr></table></figure><ul><li>启动时会发现<code>/usr/share/elasticsearch/data</code>目录没有访问权限，只需要修改<code>/mydata/elasticsearch/data</code>目录的权限，再重新启动即可；</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 /mydata/elasticsearch/data/</span><br></pre></td></tr></table></figure><ul><li>安装中文分词器IKAnalyzer，并重新启动：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it elasticsearch /bin/bash</span><br><span class="line">#此命令需要在容器中运行 过程需呀输入y</span><br><span class="line">elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.6.2/elasticsearch-analysis-ik-7.6.2.zip</span><br><span class="line"></span><br><span class="line">docker restart elasticsearch</span><br></pre></td></tr></table></figure><ul><li>开启防火墙：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=9200/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><ul><li>访问会返回版本信息：<a href="http://192.168.3.101:9200/">http://192.168.3.101:9200</a></li></ul><p><img src="/elasticsearch/mall_linux_deploy_08-1640796877265.png" alt="img"></p><h4 id="es插件卸载"><a href="#es插件卸载" class="headerlink" title="es插件卸载"></a>es插件卸载</h4><p>查看安装了哪些插件</p><p>.&#x2F;bin&#x2F;<a href="https://so.csdn.net/so/search?q=elasticsearch">elasticsearch</a>-plugin list</p><p>a. 卸载x-pack插件<br>.&#x2F;bin&#x2F;elasticsearch-plugin remove x-pack</p><p>b. 删除配置文件（由于配置文件保护，需要手动删除）<br>cd &#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;config<br>rm -rf x-pack</p><p>4、安装ik插件<br>直接使用命令安装<br>.&#x2F;bin&#x2F;elasticsearch-plugin install <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.6.2/elasticsearch-analysis-ik-7.6.2.zip">https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.6.2/elasticsearch-analysis-ik-7.6.2.zip</a></p><h2 id="Kibana安装"><a href="#Kibana安装" class="headerlink" title="[Kibana安装]"></a>[Kibana安装]</h2><ul><li>下载Kibana<code>7.6.2</code>的docker镜像：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull kibana:7.6.2</span><br></pre></td></tr></table></figure><ul><li>使用如下命令启动Kibana服务：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --name kibana -p 5601:5601 \</span><br><span class="line">--link elasticsearch:es \</span><br><span class="line">-e &quot;elasticsearch.hosts=http://es:9200&quot; \</span><br><span class="line">-d kibana:7.6.2</span><br></pre></td></tr></table></figure><ul><li>开启防火墙：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=5601/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><ul><li>访问地址进行测试：<a href="http://192.168.3.101:5601/">http://192.168.3.101:5601</a></li></ul><p><img src="/elasticsearch/mall_linux_deploy_09-1640797262306.png" alt="img"></p><h2 id="ES的CURD操作"><a href="#ES的CURD操作" class="headerlink" title="ES的CURD操作"></a>ES的CURD操作</h2><p>PUT 类似于SQL中的增</p><p>DELETE 类似于SQL中的删</p><p>POST 类似于SQL中的改</p><p>GET 类似于SQL中的查</p><h3 id="1-索引"><a href="#1-索引" class="headerlink" title="1.索引"></a>1.索引</h3><h4 id="1-1-新增索引"><a href="#1-1-新增索引" class="headerlink" title="1.1 新增索引"></a>1.1 新增索引</h4><p>PUT &#x2F;indexname 增加一个indexname 的index库 </p><p><a href="http://8.144.162.164:9200/student">http://8.144.162.164:9200/student</a> </p><h4 id="1-2-查询索引"><a href="#1-2-查询索引" class="headerlink" title="1.2 查询索引"></a>1.2 查询索引</h4><p>GET &#x2F;_cat&#x2F;indices  命令查询ES中所有的index索引库 </p><h4 id="1-3-删除索引"><a href="#1-3-删除索引" class="headerlink" title="1.3 删除索引"></a>1.3 删除索引</h4><p>DELETE &#x2F;aura_index 删除一个aura_index的index库 </p><h3 id="2-文档"><a href="#2-文档" class="headerlink" title="2.文档"></a>2.文档</h3><h4 id="2-1-新增文档"><a href="#2-1-新增文档" class="headerlink" title="2.1 新增文档"></a>2.1 新增文档</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">PUT /product/_doc/<span class="number">2</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot; dior chenyi&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shishang gaodang&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">7800</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;producer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dior producer&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;shishang&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;shechi&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>更新文档也用这个</p><h4 id="2-2-更新文档"><a href="#2-2-更新文档" class="headerlink" title="2.2 更新文档"></a>2.2 更新文档</h4><ol><li>PUT只会将json数据都进行替换, POST只会更新相同字段的值</li><li>PUT与DELETE都是幂等性操作, 即不论操作多少次, 结果都一样</li></ol><p>PUT修改是全局修改</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT/POST     /product/_doc/<span class="number">2</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李四&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改后</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;product&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> <span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> <span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;found&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;李四&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这次我们使用POST的方式进行修改数据，POST是局部更新数据，别的数据不动。PUT是全局更新 </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST /product/_doc/<span class="number">2</span>/_update</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李四&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /product/_update/<span class="number">2</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李四&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-查询文档"><a href="#2-3-查询文档" class="headerlink" title="2.3 查询文档"></a>2.3 查询文档</h4><p>查询单个</p><p>GET &#x2F;product&#x2F;_doc&#x2F;2</p><p>查询所有</p><p>GET &#x2F;product&#x2F;_search</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;product&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;desc&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;河北保定&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;price&quot;</span> <span class="punctuation">:</span> <span class="number">7800</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;producer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;提供方&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;tags&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;shishang&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;shechi&quot;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;product&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;desc&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;河北保定&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;price&quot;</span> <span class="punctuation">:</span> <span class="number">7800</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;producer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;提供方&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;tags&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;shishang&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;shechi&quot;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>took：耗费了6毫秒</p><p>shards：分片的情况</p><p>hits：获取到的数据的情况</p><p>total：3 总的数据条数</p><p>max_score：1 所有数据里面打分最高的分数</p><p>_index:”ecommerce” index名称</p><p>_type:”product” type的名称</p><p>_id:”2” id号</p><p>_score:1 分数，这个分数越大越靠前出来，百度也是这样。除非是花钱。否则匹配度越高越靠前</p><h4 id="2-4-删除文档"><a href="#2-4-删除文档" class="headerlink" title="2.4 删除文档"></a>2.4 删除文档</h4><p>DELETE  &#x2F;product&#x2F;_doc&#x2F;2</p><h4 id="2-5-整理总结"><a href="#2-5-整理总结" class="headerlink" title="2.5  整理总结"></a>2.5  整理总结</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">PUT /product</span><br><span class="line"></span><br><span class="line">PUT /product/_doc/<span class="number">2</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;河北石家庄&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">7800</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;producer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;提供方&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;shishang&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;shechi&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GET /product/_doc/<span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PUT /product/_doc/<span class="number">2</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;河北保定&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">7800</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;producer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;提供方&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;shishang&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;shechi&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">POST /product/_doc/<span class="number">2</span>/_update</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李四&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DELETE  /product/_doc/<span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="3-DSL语言"><a href="#3-DSL语言" class="headerlink" title="3. DSL语言"></a>3. DSL语言</h3><p>RESTful风格 </p><ul><li><p>query  DSL </p><p>domain Specialed Lanaguage 在特定领域的语言</p></li></ul><p>我们要进行全表扫描使用DSL语言，查询所有的商品 </p><h4 id="1-query-查询条件"><a href="#1-query-查询条件" class="headerlink" title="1. query 查询条件"></a>1. query 查询条件</h4><h5 id="1-1-match-all查询所有"><a href="#1-1-match-all查询所有" class="headerlink" title="1.1   match_all查询所有"></a>1.1   match_all查询所有</h5><p><code>match_all</code> 可以查询到所有文档   </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">// match_all 指定所有</span></span><br></pre></td></tr></table></figure><h5 id="1-2-match分词-全文检索"><a href="#1-2-match分词-全文检索" class="headerlink" title="1.2  match分词+全文检索"></a>1.2  match分词+全文检索</h5><p><code>match</code> 基本类型(非字符串)，精准匹配</p><p>字符串text 分词查询</p><p>匹配address字段 为mill lane</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mill lane&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>另一种写法</p><p>from 字段</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gu&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="1-3-multi-match多字段匹配"><a href="#1-3-multi-match多字段匹配" class="headerlink" title="1.3 multi_match多字段匹配"></a>1.3 multi_match多字段匹配</h5><p>mill 关键字 匹配 两个字段 “address”, “city”</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;multi_match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mill&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;address&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;city&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="1-4-match-phrase整体单词匹配-包含短语"><a href="#1-4-match-phrase整体单词匹配-包含短语" class="headerlink" title="1.4 match_phrase整体单词匹配 包含短语"></a>1.4 match_phrase整体单词匹配 包含短语</h5><ol><li><p>match_phrase还是分词后去搜的</p></li><li><p>目标文档需要包含分词后的所有词</p></li><li><p>目标文档还要保持这些词的相对顺序和文档中的一致</p><p><img src="/elasticsearch/1640811134534.png" alt="1640811134534"></p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>        </span><br><span class="line">    <span class="attr">&quot;match_phrase&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mill lane&quot;</span>   </span><br><span class="line">         <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span>   </span><br></pre></td></tr></table></figure><h5 id="1-5-term是代表完全匹配"><a href="#1-5-term是代表完全匹配" class="headerlink" title="1.5 term是代表完全匹配"></a>1.5 term是代表完全匹配</h5><p>和 match 一样，匹配某个属性的值，全文检索字段用 match，其他非text字段匹配用 term</p><p>用全部搜查询不到情况？</p><p>【总结】如果使用term查询，建索引的时候要注意。 <strong>要确保字段是no analyzed的</strong>。keyword</p><p><strong>说明text类型的字段会被分词，查询的时候如果用拆开查可以查询的到，但是要是直接全部查，就是查询不到。</strong> </p><p>搜“学习”搜不到，搜全文也搜不到，因为存的是“学”和“习” </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;汽车保养&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="1-6-bool复合查询"><a href="#1-6-bool复合查询" class="headerlink" title="1.6 bool复合查询"></a>1.6 bool复合查询</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mill&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="2-order排序"><a href="#2-order排序" class="headerlink" title="2. order排序"></a>2. order排序</h4><p>进行”age”字段进行排序</p><p>“order”: “desc”  :  排序为降序</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET zhifou/doc/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gu&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p> 3.分页</p><p>“from”: 5,<br>“size”: 5,</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;firstname&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;lastname&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="3-source返回部分字段"><a href="#3-source返回部分字段" class="headerlink" title="3. _source返回部分字段"></a>3. _source返回部分字段</h4><p>“_source”: [<br>        “firstname”,<br>        “lastname”<br>    ]</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;firstname&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;lastname&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>filter【结果过滤】</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="number">20000</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="number">30000</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>&#x2F;&#x2F; match</p><p>&#x2F;&#x2F;multi_match 多字段匹配</p><p>​    &#x2F;&#x2F; {</p><p>​    &#x2F;&#x2F; “match_phrase”: {</p><p>​    &#x2F;&#x2F;     “address”: “mill lane”</p><p>​    &#x2F;&#x2F; }</p><p>&#x2F;&#x2F;match_phrase 整体单词（不分词）进行检索</p><h2 id="Elasticsearch的java-api"><a href="#Elasticsearch的java-api" class="headerlink" title="[Elasticsearch的java api]"></a>[Elasticsearch的java api]</h2><p>1、9300：TCP</p><p>Spring-data-elasticsearch:transport-api.jar</p><p>SpringBoot版本不同，<code>transport-api.jar</code> 不同，不能适配 es 版本</p><p>7.x 已经不在适合使用，8 以后就要废弃</p><p><strong>2、9200：HTTP</strong></p><p>JestClient 非官方，更新慢</p><p>RestTemplate:默认发送 HTTP 请求，ES很多操作都需要自己封装、麻烦</p><p>HttpClient：同上</p><p>Elasticsearch - Rest - Client：官方RestClient，封装了 ES 操作，API层次分明</p><p>最终选择 Elasticsearch - Rest - Client （elasticsearch - rest - high - level - client）</p><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入es的 rest-high-level-client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Config配置"><a href="#Config配置" class="headerlink" title="Config配置"></a>Config配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gcq</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Create</span> 2020-10-26</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1、导入配置</span></span><br><span class="line"><span class="comment"> * 2、编写配置，给容器注入一个RestHighLevelClient</span></span><br><span class="line"><span class="comment"> * 3、参照API 官网进行开发</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GulimallElasticsearchConfig</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RequestOptions COMMON_OPTIONS;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        RequestOptions.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> RequestOptions.DEFAULT.toBuilder();</span><br><span class="line"><span class="comment">//        builder.addHeader(&quot;Authorization&quot;, &quot;Bearer &quot; + TOKEN);</span></span><br><span class="line"><span class="comment">//        builder.setHttpAsyncResponseConsumerFactory(</span></span><br><span class="line"><span class="comment">//                new HttpAsyncResponseConsumerFactory</span></span><br><span class="line"><span class="comment">//                        .HeapBufferedResponseConsumerFactory(30 * 1024 * 1024 * 1024));</span></span><br><span class="line">        COMMON_OPTIONS = builder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestHighLevelClient <span class="title function_">esRestClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">RestClientBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        builder = RestClient.builder(<span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;192.168.56.10&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(builder);</span><br><span class="line"><span class="comment">//        RestHighLevelClient client = new RestHighLevelClient(</span></span><br><span class="line"><span class="comment">//                RestClient.builder(</span></span><br><span class="line"><span class="comment">//                        new HttpHost(&quot;localhost&quot;, 9200, &quot;http&quot;),</span></span><br><span class="line"><span class="comment">//                        new HttpHost(&quot;localhost&quot;, 9201, &quot;http&quot;)));</span></span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试是否注入成功"><a href="#测试是否注入成功" class="headerlink" title="测试是否注入成功"></a>测试是否注入成功</h3><blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(client);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试是否能 添加 或更新数据</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加或者更新</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">indexData</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">IndexRequest</span> <span class="variable">indexRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;users&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setAge(<span class="number">19</span>);</span><br><span class="line">    user.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">    user.setUserName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(user);</span><br><span class="line">    indexRequest.source(jsonString,XContentType.JSON);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行操作</span></span><br><span class="line">    <span class="type">IndexResponse</span> <span class="variable">index</span> <span class="operator">=</span> client.index(indexRequest, GulimallElasticsearchConfig.COMMON_OPTIONS);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提取有用的响应数据</span></span><br><span class="line">    System.out.println(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复杂查询"><a href="#复杂查询" class="headerlink" title="复杂查询"></a>复杂查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">searchTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1、创建检索请求</span></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">searchRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>();</span><br><span class="line">        <span class="comment">// 指定索引</span></span><br><span class="line">        searchRequest.indices(<span class="string">&quot;bank&quot;</span>);</span><br><span class="line">        <span class="comment">// 指定 DSL，检索条件</span></span><br><span class="line">        <span class="type">SearchSourceBuilder</span> <span class="variable">sourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line"></span><br><span class="line">        sourceBuilder.query(QueryBuilders.matchQuery(<span class="string">&quot;address&quot;</span>, <span class="string">&quot;mill&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、2 按照年龄值分布进行聚合</span></span><br><span class="line">        <span class="type">TermsAggregationBuilder</span> <span class="variable">aggAvg</span> <span class="operator">=</span> AggregationBuilders.terms(<span class="string">&quot;ageAgg&quot;</span>).field(<span class="string">&quot;age&quot;</span>).size(<span class="number">10</span>);</span><br><span class="line">        sourceBuilder.aggregation(aggAvg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、3 计算平均薪资</span></span><br><span class="line">        <span class="type">AvgAggregationBuilder</span> <span class="variable">balanceAvg</span> <span class="operator">=</span> AggregationBuilders.avg(<span class="string">&quot;balanceAvg&quot;</span>).field(<span class="string">&quot;balance&quot;</span>);</span><br><span class="line">        sourceBuilder.aggregation(balanceAvg);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------\&quot;检索条件\&quot;: SearchSourceBuilder-------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(sourceBuilder.toString());</span><br><span class="line"></span><br><span class="line">        searchRequest.source(sourceBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、执行检索</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">searchResponse</span> <span class="operator">=</span> client.search(searchRequest, GulimallEsConfig.COMMON_OPTIONS);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------\&quot;分析结果\&quot;: searchResponse-------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、分析结果</span></span><br><span class="line">        System.out.println(searchResponse.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、拿到命中得结果</span></span><br><span class="line">        <span class="type">SearchHits</span> <span class="variable">hits</span> <span class="operator">=</span> searchResponse.getHits();</span><br><span class="line">        <span class="comment">// 5、搜索请求的匹配</span></span><br><span class="line">        SearchHit[] searchHits = hits.getHits();</span><br><span class="line">        <span class="comment">// 6、进行遍历</span></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : searchHits) &#123;</span><br><span class="line">            <span class="comment">// 7、拿到完整结果字符串</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sourceAsString</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line"><span class="comment">//            // 8、转换成实体类</span></span><br><span class="line"><span class="comment">//            Accout accout = JSON.parseObject(sourceAsString, Accout.class);</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;account:&quot; + accout );</span></span><br><span class="line">            <span class="comment">//System.out.println(sourceAsString);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 9、拿到聚合</span></span><br><span class="line">        <span class="type">Aggregations</span> <span class="variable">aggregations</span> <span class="operator">=</span> searchResponse.getAggregations();</span><br><span class="line"><span class="comment">//        for (Aggregation aggregation : aggregations) &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">// 10、通过先前名字拿到对应聚合</span></span><br><span class="line">        <span class="type">Terms</span> <span class="variable">ageAgg1</span> <span class="operator">=</span> aggregations.get(<span class="string">&quot;ageAgg&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Terms.Bucket bucket : ageAgg1.getBuckets()) &#123;</span><br><span class="line">            <span class="comment">// 11、拿到结果</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">keyAsString</span> <span class="operator">=</span> bucket.getKeyAsString();</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄:&quot;</span> + keyAsString);</span><br><span class="line">            <span class="type">long</span> <span class="variable">docCount</span> <span class="operator">=</span> bucket.getDocCount();</span><br><span class="line">            System.out.println(<span class="string">&quot;个数：&quot;</span> + docCount);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Avg</span> <span class="variable">balanceAvg1</span> <span class="operator">=</span> aggregations.get(<span class="string">&quot;balanceAvg&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;平均薪资：&quot;</span> + balanceAvg1.getValue());</span><br><span class="line">        System.out.println(searchResponse.toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h4><p>—————————-“检索条件”: SearchSourceBuilder——————————-</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mill&quot;</span></span><br><span class="line">                <span class="comment">//,</span></span><br><span class="line"><span class="comment">//&quot;operator&quot;: &quot;OR&quot;,</span></span><br><span class="line"><span class="comment">//&quot;prefix_length&quot;: 0,</span></span><br><span class="line"><span class="comment">//&quot;max_expansions&quot;: 50,</span></span><br><span class="line"><span class="comment">//&quot;fuzzy_transpositions&quot;: true,</span></span><br><span class="line"><span class="comment">//&quot;lenient&quot;: false,</span></span><br><span class="line"><span class="comment">//&quot;zero_terms_query&quot;: &quot;NONE&quot;,</span></span><br><span class="line"><span class="comment">//&quot;auto_generate_synonyms_phrase_query&quot;: true,</span></span><br><span class="line"><span class="comment">//&quot;boost&quot;: 1.0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;aggregations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;ageAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;age&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="comment">//,</span></span><br><span class="line"><span class="comment">//&quot;min_doc_count&quot;: 1,</span></span><br><span class="line"><span class="comment">//&quot;shard_min_doc_count&quot;: 0,</span></span><br><span class="line"><span class="comment">//&quot;show_term_doc_count_error&quot;: false,</span></span><br><span class="line"><span class="comment">//&quot;order&quot;: [&#123;</span></span><br><span class="line"><span class="comment">//&quot;count&quot;: &quot;desc&quot;</span></span><br><span class="line"><span class="comment">//&#125;, &#123;</span></span><br><span class="line"><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span></span><br><span class="line"><span class="comment">//&#125;]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;balanceAvg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;avg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;balance&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>—————————-“分析结果”: searchResponse——————————-</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;took&quot;</span><span class="punctuation">:</span> <span class="number">42</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;timed_out&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;skipped&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;relation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;max_score&quot;</span><span class="punctuation">:</span> <span class="number">5.4032025</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;doc&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;970&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;score&quot;</span><span class="punctuation">:</span> <span class="number">5.4032025</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;account_number&quot;</span><span class="punctuation">:</span> <span class="number">970</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="number">19648</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;firstname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Forbes&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;lastname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Wallace&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">28</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;990 Mill Road&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;employer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Pheast&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;forbeswallace@pheast.com&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Lopezo&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AK&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;doc&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;136&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;score&quot;</span><span class="punctuation">:</span> <span class="number">5.4032025</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;account_number&quot;</span><span class="punctuation">:</span> <span class="number">136</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="number">45801</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;firstname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Winnie&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;lastname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Holland&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">38</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;198 Mill Lane&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;employer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Neteria&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;winnieholland@neteria.com&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Urie&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="string">&quot;IL&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;doc&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;345&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;score&quot;</span><span class="punctuation">:</span> <span class="number">5.4032025</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;account_number&quot;</span><span class="punctuation">:</span> <span class="number">345</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="number">9812</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;firstname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Parker&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;lastname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Hines&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">38</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;715 Mill Avenue&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;employer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Baluba&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;parkerhines@baluba.com&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Blackgum&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="string">&quot;KY&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;doc&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;472&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;score&quot;</span><span class="punctuation">:</span> <span class="number">5.4032025</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;account_number&quot;</span><span class="punctuation">:</span> <span class="number">472</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="number">25571</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;firstname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Lee&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;lastname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Long&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">32</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;288 Mill Street&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;employer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Comverges&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;leelong@comverges.com&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Movico&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;aggregations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;lterms#ageAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;doc_count_error_upper_bound&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;sum_other_doc_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;buckets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="number">38</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="number">28</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="number">32</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;avg#balanceAvg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">25208.0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>年龄:38<br>个数：2<br>年龄:28<br>个数：1<br>年龄:32<br>个数：1<br>平均薪资：25208.0</p><h2 id="效率批量保存bulk"><a href="#效率批量保存bulk" class="headerlink" title="效率批量保存bulk"></a>效率批量保存bulk</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductSaveServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ProductSaveService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestHighLevelClient restHighLevelClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">productStatusUp</span><span class="params">(List&lt;SkuEsModel&gt; skuEsModels)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 保存到es</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1 给es中建立索引，product</span></span><br><span class="line">        <span class="type">BulkRequest</span> <span class="variable">bulkRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BulkRequest</span>();</span><br><span class="line">        <span class="comment">// 1 构造保存请求</span></span><br><span class="line">        <span class="keyword">for</span> (SkuEsModel model : skuEsModels) &#123;</span><br><span class="line">            <span class="type">IndexRequest</span> <span class="variable">indexRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(EsConstant.PRODUCT_INDEX);</span><br><span class="line">            </span><br><span class="line">            indexRequest.id(model.getSkuId().toString());</span><br><span class="line">            </span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> JSON.toJSONString(model);</span><br><span class="line">            </span><br><span class="line">            indexRequest.source(s, XContentType.JSON);</span><br><span class="line">            bulkRequest.add(indexRequest);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">BulkResponse</span> <span class="variable">bulk</span> <span class="operator">=</span> restHighLevelClient.bulk(bulkRequest, GulimallEsConfig.COMMON_OPTIONS);</span><br><span class="line">        <span class="comment">// TODO 如果批量错误</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> bulk.hasFailures();</span><br><span class="line">        List&lt;String&gt; collect = Arrays.stream(bulk.getItems()).map(item -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> item.getId();</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        log.info(<span class="string">&quot;商品上架完成,&#123;&#125;,返回数据,&#123;&#125;&quot;</span>,collect,bulk.toString());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ELK  </p><p>Elasticsearch 用于检索数据</p><p>logstach：存储数据</p><p>Kiban:视图化查看数据</p><h1 id="其他不常用"><a href="#其他不常用" class="headerlink" title="其他不常用"></a>其他不常用</h1><h2 id="es的扁平化处理"><a href="#es的扁平化处理" class="headerlink" title="es的扁平化处理"></a>es的扁平化处理</h2><p><img src="/elasticsearch/1641213328426.png" alt="1641213328426"></p><p>数组里面都是对象的时候 使用嵌入式的属性</p><p>设置对象的类型为嵌入式</p><p><img src="/elasticsearch/1641213517188.png" alt="1641213517188"></p><h2 id="ES的IK分词器使用案例"><a href="#ES的IK分词器使用案例" class="headerlink" title="ES的IK分词器使用案例"></a>ES的IK分词器使用案例</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#创建索引并添加映射</span><br><span class="line">PUT /account</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  </span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">#获取索引映射</span><br><span class="line">GET account/_mapping</span><br><span class="line"></span><br><span class="line">#添加数据</span><br><span class="line">POST /account/_doc</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;数据库管理工程师&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;工程师&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">#进行分词</span><br><span class="line">GET _analyze/</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span><span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span><span class="string">&quot;数据库管理&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查询</span><br><span class="line">POST /account/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;管理&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="特殊类型-数据范围"><a href="#特殊类型-数据范围" class="headerlink" title="特殊类型 数据范围"></a>特殊类型 <strong>数据范围</strong></h2><p>范围类型(range)是es中比较具有<strong>特色</strong>的数据类型。下面我们就先来看看官方对其的定义。</p><p><strong>定义</strong></p><p>数字范围类数据。主要类型及范围如下。</p><p><img src="/elasticsearch/20200307191836851-1640809100676.png" alt="在这里插入图片描述"></p><p><strong>数据范围类型的使用</strong></p><p><strong>映射定义</strong></p><p>假设我们有一张会议表。我们知道实际中党政机关会议都有一个出席率的问题，需要出席率在某个点或某个区间内才能算作是有效的。所以我们的映射结构来了。</p><p>示例如下。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PUT example</span><br><span class="line">PUT example/docs/_mapping</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;expectedAttendees&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer_range&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;date_range&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>数据新增</strong></p><p>假如这时我们需要添加一个10-20人参与，并且在2019-12-01到2019-12-02期间举行的会议。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PUT example/docs/<span class="number">112313213</span>?refresh</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;expectedAttendees&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="number">20</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-12-01 12:00:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-12-02 17:00:00&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>数据查询</strong></p><p>怎么查询呢？假如我们需要查询参会人数满足12人的会议记录。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET example/docs/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;expectedAttendees&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">12</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span><span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;range_index&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;my_type&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;expected_attendees&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;gte&quot;</span> <span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span> <span class="attr">&quot;lte&quot;</span> <span class="punctuation">:</span> <span class="number">20</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;time&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;gte&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;2019-12-01 12:00:00&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;lte&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;2019-12-02 17:00:00&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>当然我们可以按照<em>日期进行筛选</em>。例如下面这个查询。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST example/docs/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-12-01&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-12-02&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;relation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;within&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>relation</code>字段上的范围查询支持一个关系参数，该参数可以是<code>WITHIN</code>，<code>CONTAINS</code>，<code>INTERSECTS</code>之一（默认）。</p><p>结果如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span><span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;range_index&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;my_type&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;expected_attendees&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;gte&quot;</span> <span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span> <span class="attr">&quot;lte&quot;</span> <span class="punctuation">:</span> <span class="number">20</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;time&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;gte&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;2019-12-01 12:00:00&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;lte&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;2019-12-02 17:00:00&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><em>基于ip的数据类型也有很有趣的用法，感兴趣的同学可以深入研究下，这里就不展开。</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;es的概念&quot;&gt;&lt;a href=&quot;#es的概念&quot; class=&quot;headerlink&quot; title=&quot;es的概念&quot;&gt;&lt;/a&gt;es的概念&lt;/h2&gt;&lt;p&gt;速度快、易扩展、弹性、灵活、操作简单、多语言客户端、X-Pack、hadoop&amp;#x2F;spark强强联手、开箱即</summary>
      
    
    
    
    <category term="elasticsearch" scheme="http://cardioid.gitee.io/categories/elasticsearch/"/>
    
    
    <category term="elasticsearch" scheme="http://cardioid.gitee.io/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>IDEA配置与操作</title>
    <link href="http://cardioid.gitee.io/2021/11/19/Java/IDEA/IDEA%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%93%8D%E4%BD%9C/IDEA%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%93%8D%E4%BD%9C/"/>
    <id>http://cardioid.gitee.io/2021/11/19/Java/IDEA/IDEA%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%93%8D%E4%BD%9C/IDEA%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%93%8D%E4%BD%9C/</id>
    <published>2021-11-19T12:57:37.000Z</published>
    <updated>2022-01-26T08:49:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IDEA配置与操作"><a href="#IDEA配置与操作" class="headerlink" title="IDEA配置与操作"></a>IDEA配置与操作</h2><p>下面是Auto Import设置步骤详解。</p><p>Settings→Editor→General→Auto Import<br>然后勾选Add unambiguous imports on the fly以及Optimize imports on the fly</p><p><img src="/IDEA%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%93%8D%E4%BD%9C/1337265-20180413112619423-1610499505.png" alt="img"></p><p>Add unambiguous imports on the fly：快速添加明确的导入。</p><p>Optimize imports on the fly：快速优化导入，优化的意思即自动帮助删除无用的导入。</p><h2 id="2-IntelliJ-Idea设置-自定义的-类代码注释模板"><a href="#2-IntelliJ-Idea设置-自定义的-类代码注释模板" class="headerlink" title="2.IntelliJ Idea设置(自定义的)类代码注释模板"></a>2.IntelliJ Idea设置(自定义的)类代码注释模板</h2><p>用IntelliJ Idea开发的时候代码没有注释或者注释不如人意，我们就自定义一下类代码的注释。</p><p> 一、打开Settings – Editor – Code Style – File and Code Templates</p><p><img src="/IDEA%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%93%8D%E4%BD%9C/image-20220123171022850.png" alt="image-20220123171022850"></p><p> 二、注释模板内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">COPY/**</span><br><span class="line">* $&#123;DESCRIPTION&#125;</span><br><span class="line">* @author 名字</span><br><span class="line">* @create $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125; $&#123;TIME&#125;</span><br><span class="line">**/</span><br></pre></td></tr></table></figure><h2 id="3-取消Idea开始界面打开默认项目配置"><a href="#3-取消Idea开始界面打开默认项目配置" class="headerlink" title="3.取消Idea开始界面打开默认项目配置"></a>3.取消Idea开始界面打开默认项目配置</h2><p>去掉默认的勾选Reopen last project on startup（在启动的时候打开上次的项目），去掉勾选之后，点击确认。</p><p><img src="/IDEA%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%93%8D%E4%BD%9C/image-20220123171130128.png" alt="image-20220123171130128"></p><p>Confirm application exit   关闭了当前的工作空间  关闭确认提示    打开</p><h2 id="4-IDEA使用—代码如何在方法之间加入一条分割线"><a href="#4-IDEA使用—代码如何在方法之间加入一条分割线" class="headerlink" title="4.IDEA使用—代码如何在方法之间加入一条分割线"></a>4.IDEA使用—代码如何在方法之间加入一条分割线</h2><p><img src="/IDEA%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%93%8D%E4%BD%9C/image-20220123171433972.png" alt="image-20220123171433972"><br>把【Show method separators】打上勾即可。</p><h2 id="5-IDEA查看源码返回上一级快捷键"><a href="#5-IDEA查看源码返回上一级快捷键" class="headerlink" title="5.IDEA查看源码返回上一级快捷键"></a>5.IDEA查看源码返回上一级快捷键</h2><p>快捷键 alt + 方向左键 放回上一级</p><h2 id="6-打印日志时不同颜色插件"><a href="#6-打印日志时不同颜色插件" class="headerlink" title="6.打印日志时不同颜色插件"></a>6.打印日志时不同颜色插件</h2><p>Grep Console</p><h2 id="7-mapper与xml文件切换插件"><a href="#7-mapper与xml文件切换插件" class="headerlink" title="7.mapper与xml文件切换插件"></a>7.mapper与xml文件切换插件</h2><p>Free Mybatis plugin</p><h2 id="8-IDEA插件文件夹"><a href="#8-IDEA插件文件夹" class="headerlink" title="8.IDEA插件文件夹"></a>8.IDEA插件文件夹</h2><p>C:\Users\【用户名】\AppData\Roaming\JetBrains\IntelliJIdea2020.1</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;IDEA配置与操作&quot;&gt;&lt;a href=&quot;#IDEA配置与操作&quot; class=&quot;headerlink&quot; title=&quot;IDEA配置与操作&quot;&gt;&lt;/a&gt;IDEA配置与操作&lt;/h2&gt;&lt;p&gt;下面是Auto Import设置步骤详解。&lt;/p&gt;
&lt;p&gt;Settings→Edit</summary>
      
    
    
    
    <category term="IDEA" scheme="http://cardioid.gitee.io/categories/IDEA/"/>
    
    
    <category term="IDEA" scheme="http://cardioid.gitee.io/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>SpringSession</title>
    <link href="http://cardioid.gitee.io/2021/11/13/Java/Spring%20Session/Spring%20Session/"/>
    <id>http://cardioid.gitee.io/2021/11/13/Java/Spring%20Session/Spring%20Session/</id>
    <published>2021-11-13T13:19:18.000Z</published>
    <updated>2022-04-10T16:40:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="springboot、redis和session整合"><a href="#springboot、redis和session整合" class="headerlink" title="springboot、redis和session整合"></a>springboot、redis和session整合</h1><p>官网：<a href="https://docs.spring.io/spring-session/docs/2.5.0/reference/html5/#samples">https://docs.spring.io/spring-session/docs/2.5.0/reference/html5/#samples</a></p><h4 id="1、导入依赖"><a href="#1、导入依赖" class="headerlink" title="1、导入依赖"></a>1、导入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis依赖--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 整合 spring session 实现 session 共享--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、编写application-yml配置文件"><a href="#2、编写application-yml配置文件" class="headerlink" title="2、编写application.yml配置文件"></a>2、编写application.yml配置文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.10</span><span class="number">.123</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 配置session</span></span><br><span class="line">  <span class="attr">session:</span></span><br><span class="line">    <span class="comment">#存储在redis中</span></span><br><span class="line">    <span class="attr">store-type:</span> <span class="string">redis</span></span><br><span class="line">    <span class="comment"># 过期时间30分钟，可不要</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="string">30m</span></span><br></pre></td></tr></table></figure><h4 id="3、配置类SessionConfig-java"><a href="#3、配置类SessionConfig-java" class="headerlink" title="3、配置类SessionConfig.java"></a>3、配置类SessionConfig.java</h4><p>可以不用配置，根据实际情况配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.session.web.http.CookieSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.session.web.http.DefaultCookieSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CookieSerializer <span class="title function_">cookieSerializer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DefaultCookieSerializer</span> <span class="variable">cookieSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultCookieSerializer</span>();</span><br><span class="line">        <span class="comment">//设置cookie作用域</span></span><br><span class="line">        cookieSerializer.setDomainName(<span class="string">&quot;mall.com&quot;</span>);</span><br><span class="line">        <span class="comment">//可设置cookie的名字,默认SESSION</span></span><br><span class="line">        cookieSerializer.setCookieName(<span class="string">&quot;SESSION&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> cookieSerializer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisSerializer&lt;Object&gt; <span class="title function_">springSessionDefaultRedisSerializer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//使用JSON的序列化方式来序列化对象到Redis中</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4、主启动类增加注解：-EnableRedisHttpSession"><a href="#4、主启动类增加注解：-EnableRedisHttpSession" class="headerlink" title="4、主启动类增加注解：@EnableRedisHttpSession"></a>4、主启动类增加注解：@EnableRedisHttpSession</h4><h4 id="5、使用"><a href="#5、使用" class="headerlink" title="5、使用"></a>5、使用</h4><p><strong>在不同服务中：存入数据和取数据，都需以上四个步骤</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loginPage</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line"><span class="comment">//设置存入的数据，data可以是实体对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOGIN_USER</span> <span class="operator">=</span> <span class="string">&quot;loginUser&quot;</span>;</span><br><span class="line">session.setAttribute(LOGIN_USER,data);</span><br><span class="line"><span class="comment">//从session中取出数据</span></span><br><span class="line">session.getAttribute(LOGIN_USER);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//直接从前端获取session数据</span></span><br><span class="line">$&#123;session.loginUser&#125;</span><br></pre></td></tr></table></figure><h1 id="SpringSession-核心原理"><a href="#SpringSession-核心原理" class="headerlink" title="SpringSession 核心原理"></a>SpringSession 核心原理</h1><p>@EnableRedisHttpSession 导入 RedisHttpSessionConfiguration 配置</p><p>1、给容器中添加了一个组件 RedisOperationsSessionRepository：Redis操作session，session的增删改查封装类；</p><p>2、继承 SpringHttpSessionConfiguration 初始化了一个 SessionRepositoryFilter：session 存储过滤器；每个请求过来都必须经过 Filter 组件；创建的时候，自动从容器中获取到了 SessionRepository；</p><p> SessionRepositoryFilter：</p><ul><li>将原生的 HttpServletRequest Response 包装成 SessionRepositoryRequestWrapper ResponseWrapper；包装后的对象应用到了后面整个执行链；</li><li>以后获取 request.getSession(); 都会调用 wrappedRequesr.getSession(); 从SessionRepository获取；</li></ul><p>3、装饰者模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    request.setAttribute(SESSION_REPOSITORY_ATTR, <span class="built_in">this</span>.sessionRepository);</span><br><span class="line">    SessionRepositoryFilter&lt;S&gt;.<span class="type">SessionRepositoryRequestWrapper</span> <span class="variable">wrappedRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SessionRepositoryFilter</span>.SessionRepositoryRequestWrapper(request, response);</span><br><span class="line">    SessionRepositoryFilter.<span class="type">SessionRepositoryResponseWrapper</span> <span class="variable">wrappedResponse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SessionRepositoryFilter</span>.SessionRepositoryResponseWrapper(wrappedRequest, response);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        filterChain.doFilter(wrappedRequest, wrappedResponse);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        wrappedRequest.commitSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;springboot、redis和session整合&quot;&gt;&lt;a href=&quot;#springboot、redis和session整合&quot; class=&quot;headerlink&quot; title=&quot;springboot、redis和session整合&quot;&gt;&lt;/a&gt;springbo</summary>
      
    
    
    
    <category term="SpringSession" scheme="http://cardioid.gitee.io/categories/SpringSession/"/>
    
    
    <category term="Spring" scheme="http://cardioid.gitee.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>缓存数据一致性</title>
    <link href="http://cardioid.gitee.io/2021/11/02/Java/%E7%BC%93%E5%AD%98/%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7%E8%A7%A3%E5%86%B3/"/>
    <id>http://cardioid.gitee.io/2021/11/02/Java/%E7%BC%93%E5%AD%98/%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7%E8%A7%A3%E5%86%B3/</id>
    <published>2021-11-02T12:11:12.000Z</published>
    <updated>2022-01-28T08:15:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="缓存数据一致性"><a href="#缓存数据一致性" class="headerlink" title="缓存数据一致性"></a>缓存数据一致性</h3><h4 id="缓存数据一致性-双写模式"><a href="#缓存数据一致性-双写模式" class="headerlink" title="缓存数据一致性 - 双写模式"></a>缓存数据一致性 - 双写模式</h4><p><img src="/%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7%E8%A7%A3%E5%86%B3/image-20201101053613373.png" alt="image-20201101053613373"></p><p>两个线程写 最终只有一个线程写成功，后写成功的会把之前写的数据给覆盖，这就会造成脏数据</p><h4 id="缓存数据一致性-失效模式"><a href="#缓存数据一致性-失效模式" class="headerlink" title="缓存数据一致性 - 失效模式"></a>缓存数据一致性 - 失效模式</h4><p><img src="/%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7%E8%A7%A3%E5%86%B3/image-20201101053834126.png" alt="image-20201101053834126"></p><p>三个连接 </p><p>一号连接写 写数据库 然后删缓存</p><p>二号连接写 写数据库时网络连接慢，还没有写入成功</p><p>三号链接读 直接读取数据，读到的是一号连接写入的数据，此时 二号链接写入数据成功并删除了缓存，三号开始更新缓存发现更新的是二号的缓存</p><h4 id="缓存数据一致性解决方案"><a href="#缓存数据一致性解决方案" class="headerlink" title="缓存数据一致性解决方案"></a>缓存数据一致性解决方案</h4><p>无论是双写模式还是失效模式，都会到这缓存不一致的问题，即多个实力同时更新会出事，怎么办？</p><ul><li>1、如果是用户纯度数据（订单数据、用户数据），这并发几率很小，几乎不用考虑这个问题，缓存数据加上过期时间，每隔一段时间触发读的主动更新即可</li><li>2、如果是菜单，商品介绍等基础数据，也可以去使用 canal 订阅，binlog 的方式</li><li>3、缓存数据 + 过期时间也足够解决大部分业务对缓存的要求</li><li>4、通过加锁保证并发读写，写写的时候按照顺序排好队，读读无所谓，所以适合读写锁，（业务不关心脏数据，允许临时脏数据可忽略）</li></ul><p>总结:</p><ul><li>我们能放入缓存的数据本来就不应该是实时性、一致性要求超高的。所以缓存数据的时候加上<strong>过期时间</strong>，保证每天拿到当前的最新值即可</li><li>我们不应该过度设计，增加系统的复杂性</li><li>遇到实时性、一致性要求高的数据，就应该<strong>查数据库</strong>，即使慢点</li></ul><p><img src="/%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7%E8%A7%A3%E5%86%B3/image-20201101054937769.png" alt="image-20201101054937769"></p><p>最后符上 三级分类数据 加上分布式锁</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;缓存数据一致性&quot;&gt;&lt;a href=&quot;#缓存数据一致性&quot; class=&quot;headerlink&quot; title=&quot;缓存数据一致性&quot;&gt;&lt;/a&gt;缓存数据一致性&lt;/h3&gt;&lt;h4 id=&quot;缓存数据一致性-双写模式&quot;&gt;&lt;a href=&quot;#缓存数据一致性-双写模式&quot; class=&quot;</summary>
      
    
    
    
    <category term="缓存" scheme="http://cardioid.gitee.io/categories/%E7%BC%93%E5%AD%98/"/>
    
    
    <category term="缓存" scheme="http://cardioid.gitee.io/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>redis</title>
    <link href="http://cardioid.gitee.io/2021/10/28/Java/%E7%BC%93%E5%AD%98/redis/"/>
    <id>http://cardioid.gitee.io/2021/10/28/Java/%E7%BC%93%E5%AD%98/redis/</id>
    <published>2021-10-28T14:55:02.000Z</published>
    <updated>2022-01-28T08:14:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><h3 id="前置条件开放自定义端口6376"><a href="#前置条件开放自定义端口6376" class="headerlink" title="前置条件开放自定义端口6376"></a>前置条件开放自定义端口6376</h3><p>vi &#x2F;etc&#x2F;sysconfig&#x2F;iptables<br>-A INPUT -p tcp -m state –state NEW -m tcp –dport 6376 -j ACCEPT<br>service iptables restart</p><h3 id="redis安装"><a href="#redis安装" class="headerlink" title="redis安装"></a>redis安装</h3><p>1、拉取redis 6.2.6版本的镜像<br>docker pull redis:6.2.6<br>2、创建数据目录和配置目录<br>mkdir -p &#x2F;mydata&#x2F;redis&#x2F;conf &#x2F;mydata&#x2F;redis&#x2F;data<br>chmod -R 755 &#x2F;mydata&#x2F;redis<br>3、在&#x2F;mydata&#x2F;redis&#x2F;conf下创建自定义的配置文件redis.conf</p><p>vim &#x2F;mydata&#x2F;redis&#x2F;conf&#x2F;redis.conf</p><p>redis.con内容如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#bind 127.0.0.1 设置允许远程连接</span></span><br><span class="line"><span class="keyword">protected</span>-mode no </span><br><span class="line"><span class="meta">#最大连接数</span></span><br><span class="line">maxclients <span class="number">100000</span></span><br><span class="line"><span class="meta">#最大内存</span></span><br><span class="line">maxmemory <span class="number">5</span>G</span><br><span class="line"><span class="meta">#密码</span></span><br><span class="line">requirepass root</span><br></pre></td></tr></table></figure><p>4、启动创建容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 6376:6379 --name redis -v /mydata/redis/data:/data -v /mydata/redis/conf:/usr/local/etc/redis -v /etc/localtime:/etc/localtime:ro -d redis:6.2.6 redis-server /usr/local/etc/redis/redis.conf --save 60 1</span><br></pre></td></tr></table></figure><p>5、查看容器创建的情况<br>docker ps -a<br>docker exec -it redis &#x2F;bin&#x2F;bash<br>date</p><h3 id="redis的使用"><a href="#redis的使用" class="headerlink" title="redis的使用"></a>redis的使用</h3><h4 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1. 导入依赖"></a>1. 导入依赖</h4><p>Springboot 项目中Redis用lettuce连接池，如果长时间不用redis的话，就会断连。</p><p>springboot2.0以后默认使用lettuce作为操作redis的客户端，它使用netty进行通信。 lettuce的bug就是高并发导致netty堆对外内存溢出 -Xmx300m; netty如果没有指定对外内存，默认使用的就是300m。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lettuce-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.lettuce<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- jedis客户端 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- spring2.X集成redis所需common-pool2，使用jedis必须依赖它--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>lettuce 的bug导致netty堆外内存溢出， netty 如果没有指定堆内存移除   默认使用 -Xmx300m</p><p>1、升级 lettuce客户端，2、 切换使用jedis</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TODO 产生堆外内存溢出 OutOfDirectMemoryError</span></span><br><span class="line"><span class="comment"> * 1、SpringBoot2.0以后默认使用 Lettuce作为操作redis的客户端，它使用 netty进行网络通信</span></span><br><span class="line"><span class="comment"> * 2、lettuce 的bug导致netty堆外内存溢出，-Xmx300m netty 如果没有指定堆内存移除，</span></span><br><span class="line"><span class="comment"> *      可以通过-Dio.netty.maxDirectMemory 进行设置</span></span><br><span class="line"><span class="comment"> *   解决方案 不能使用 -Dio.netty.maxDirectMemory调大内存</span></span><br><span class="line"><span class="comment"> *   1、升级 lettuce客户端，2、 切换使用jedis</span></span><br><span class="line"><span class="comment"> *   redisTemplate:</span></span><br><span class="line"><span class="comment"> *   lettuce、jedis 操作redis的底层客户端，Spring再次封装</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="2-application-yaml"><a href="#2-application-yaml" class="headerlink" title="2. application.yaml"></a>2. application.yaml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.10</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span></span><br></pre></td></tr></table></figure><p>RedisAutoConfig.java</p><p><img src="/redis/image-20201031154710108.png" alt="image-20201031154710108"></p><h4 id="3-测试redis是否可用"><a href="#3-测试redis是否可用" class="headerlink" title="3. 测试redis是否可用"></a>3. 测试redis是否可用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testStringRedisTemplate</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    stringRedisTemplate.opsForValue().set(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world_&quot;</span> + UUID.randomUUID().toString());</span><br><span class="line">    <span class="type">String</span> <span class="variable">hello</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;之前保存的数据是：&quot;</span> + hello);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-优化三级分类数据获取"><a href="#4-优化三级分类数据获取" class="headerlink" title="4. 优化三级分类数据获取"></a>4. 优化三级分类数据获取</h4><p>给缓存中放 json 字符串、拿出的是 json 字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, List&lt;Catelog2Vo&gt;&gt; <span class="title function_">getCatelogJson</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给缓存中放 json 字符串、拿出的是 json 字符串，还要逆转为能用的对象类型【序列化和反序列化】</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、加入缓存逻辑，缓存中放的数据是 json 字符串</span></span><br><span class="line">    <span class="comment">// JSON 跨语言，跨平台兼容</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">catelogJSON</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;catelogJSON&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(catelogJSON)) &#123;</span><br><span class="line">        <span class="comment">// 2、缓存没有，从数据库中查询</span></span><br><span class="line">        Map&lt;String, List&lt;Catelog2Vo&gt;&gt; catelogJsonFromDb = getCatelogJsonFromDb();</span><br><span class="line">        <span class="comment">// 3、查询到数据，将数据转成 JSON 后放入缓存中</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> JSON.toJSONString(catelogJsonFromDb);</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;catelogJSON&quot;</span>,s);</span><br><span class="line">        <span class="keyword">return</span> catelogJsonFromDb;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 转换为我们指定的对象</span></span><br><span class="line">    Map&lt;String, List&lt;Catelog2Vo&gt;&gt; result = JSON.parseObject(catelogJSON, <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;Map&lt;String, List&lt;Catelog2Vo&gt;&gt;&gt;() &#123;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-解决雪崩问题-添加过期时间"><a href="#5-解决雪崩问题-添加过期时间" class="headerlink" title="5. 解决雪崩问题,添加过期时间"></a>5. 解决雪崩问题,添加过期时间</h4><p>设置过期时间 解决<strong>雪崩</strong>问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ops.set(<span class="string">&quot;getCatalogJsonFromDB&quot;</span>,s,<span class="number">1</span>, TimeUnit.DAYS);</span><br></pre></td></tr></table></figure><h4 id="6-加锁（本地锁）"><a href="#6-加锁（本地锁）" class="headerlink" title="6.加锁（本地锁）"></a>6.加锁（本地锁）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(<span class="built_in">this</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 再次查询是否有数据</span></span><br><span class="line"><span class="type">String</span> <span class="variable">catelogJSON</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;catelogJSON&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!StringUtils.isEmpty(catelogJSON)) &#123;</span><br><span class="line">  <span class="comment">// 转换为我们指定的对象</span></span><br><span class="line">    Map&lt;String, List&lt;Catelog2Vo&gt;&gt; result = JSON.parseObject(catelogJSON, <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;Map&lt;String, List&lt;Catelog2Vo&gt;&gt;&gt;() &#123;&#125;);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2. 查询数据库逻辑</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. 修改为 这个操作：查询到数据，将数据转成 JSON 后放入缓存中  “在锁里面”</span></span><br><span class="line">    <span class="comment">//  将查询数据库 放入缓存的操作 是原子性的操作 在锁中 保证只查询一次数据库</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> JSON.toJSONString(catelogJsonFromDb);</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;catelogJSON&quot;</span>,s);</span><br><span class="line">        <span class="keyword">return</span> catelogJsonFromDb;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这样加本地锁不对的 只能是一台服务器 只能锁住当前线程 看下面加分布式锁</p><h3 id="缓存穿透："><a href="#缓存穿透：" class="headerlink" title="缓存穿透："></a>缓存穿透：</h3><p>大量不存在的数据进行攻击 缓存是不命中，将去查询数据库  数据库压力增大 导致崩溃</p><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>布隆过滤器</p><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>缓存雪崩是指在我们设置缓存时<strong>key采用了相同的过期时间</strong>,导致缓存在某- -时刻同时失效，请求全部转发到DB, DB瞬时压力过重雪崩。</p><h4 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h4><p>原有的失效时间基础上增加一个随机值，</p><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>热点key失效</p><h4 id="解决：-1"><a href="#解决：-1" class="headerlink" title="解决："></a>解决：</h4><p>1.设置成永久key</p><p>2.加锁</p><h4 id="加锁方式一"><a href="#加锁方式一" class="headerlink" title="加锁方式一"></a>加锁方式一</h4><p>方式一  public synchronized  xxx(){</p><p>}方法加锁</p><p>方式二  synchronized(this) {</p><p>​再次查询缓存是否有数据</p><p>}   代码块加锁</p><p>springboot所有组件 在容器中都是单例的</p><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><h4 id="分布式锁原理与应用"><a href="#分布式锁原理与应用" class="headerlink" title="分布式锁原理与应用"></a>分布式锁原理与应用</h4><h5 id="分布式锁基本原理"><a href="#分布式锁基本原理" class="headerlink" title="分布式锁基本原理"></a>分布式锁基本原理</h5><p><strong>理解：</strong>就先当1000个人去占一个厕所（setIfAbsent（key,value）），厕所只能有一个人占到这个坑，占到这个坑其他人就只能在外面等待，等待一段时间后可以再次来占坑(调用此方法)，业务执行后，释放锁(delete(key))，那么其他人就可以来占这个坑</p><p>setNx  原子性 没有就放数据</p><p>setEx  设置过期时间 </p><h5 id="分布式锁演进-阶段一-没有设置锁的过期时间"><a href="#分布式锁演进-阶段一-没有设置锁的过期时间" class="headerlink" title="分布式锁演进 - 阶段一   没有设置锁的过期时间"></a>分布式锁演进 - 阶段一   没有设置锁的过期时间</h5><p><strong>问题</strong>:<br>    1、setnx占好 了位,<strong>业务代码异常</strong>或者程序在页面过程中<strong>宕机</strong>。</p><p>​<strong>没有删除锁</strong>，这就造成了死锁.</p><p><strong>解决</strong>:</p><p>setEx 设置锁的过期时间，即使没有删除，会自动删除</p><p>setIfAbsent   : setNx  </p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h5 id="分布式锁演进-阶段二"><a href="#分布式锁演进-阶段二" class="headerlink" title="分布式锁演进 - 阶段二"></a>分布式锁演进 - 阶段二</h5><p><img src="/redis/image-20201031123640746.png" alt="image-20201031123640746"></p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1.</span> 加锁  setNx 没有就放数据</span><br><span class="line"><span class="type">Boolean</span> <span class="variable">lock</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">       </span><br><span class="line"><span class="keyword">if</span> (lock) &#123;</span><br><span class="line">            <span class="comment">// 加锁成功..执行业务</span></span><br><span class="line">            Map&lt;String,List&lt;Catelog2Vo&gt;&gt; dataFromDb = getDataFromDB();</span><br><span class="line">            redisTemplate.delete(<span class="string">&quot;lock&quot;</span>); <span class="comment">// 删除锁</span></span><br><span class="line">            <span class="keyword">return</span> dataFromDb;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 加锁失败，重试 synchronized()</span></span><br><span class="line">            <span class="comment">// 休眠100ms重试</span></span><br><span class="line">            <span class="keyword">return</span> getCatelogJsonFromDbWithRedisLock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">问题：业务代码异常或者程序在页面过程中宕机。</span></span><br><span class="line"><span class="comment">没有删除锁，这就造成了死锁.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>设置过期时间  </span><br><span class="line"><span class="type">Boolean</span> <span class="variable">lock</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent()</span><br><span class="line">        <span class="keyword">if</span> (lock) &#123;</span><br><span class="line">            <span class="comment">// 加锁成功..执行业务</span></span><br><span class="line">            <span class="comment">// 设置过期时间</span></span><br><span class="line">            redisTemplate.expire(<span class="string">&quot;lock&quot;</span>,<span class="number">30</span>,TimeUnit.SECONDS);</span><br><span class="line">            Map&lt;String,List&lt;Catelog2Vo&gt;&gt; dataFromDb = getDataFromDB();</span><br><span class="line">            redisTemplate.delete(<span class="string">&quot;lock&quot;</span>); <span class="comment">// 删除锁</span></span><br><span class="line">            <span class="keyword">return</span> dataFromDb;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 加锁失败，重试 synchronized()</span></span><br><span class="line">            <span class="comment">// 休眠100ms重试</span></span><br><span class="line">            <span class="keyword">return</span> getCatelogJsonFromDbWithRedisLock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">问题：业务代码异常或者程序在页面过程中宕机。</span></span><br><span class="line"><span class="comment">没有到设置过期时间，这就造成了死锁.</span></span><br><span class="line"><span class="comment">设置过期时间和占位必须是原子的。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>设置值同时设置过期时间   setEx</span><br><span class="line"><span class="type">Boolean</span> <span class="variable">lock</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>,<span class="string">&quot;111&quot;</span>,<span class="number">300</span>,TimeUnit.SECONDS);</span><br><span class="line"><span class="keyword">if</span> (lock) &#123;</span><br><span class="line">    <span class="comment">// 加锁成功..执行业务</span></span><br><span class="line">    <span class="comment">// 设置过期时间,必须和加锁是同步的，原子的</span></span><br><span class="line">    redisTemplate.expire(<span class="string">&quot;lock&quot;</span>,<span class="number">30</span>,TimeUnit.SECONDS);</span><br><span class="line">    Map&lt;String,List&lt;Catelog2Vo&gt;&gt; dataFromDb = getDataFromDB();</span><br><span class="line">    redisTemplate.delete(<span class="string">&quot;lock&quot;</span>); <span class="comment">// 删除锁</span></span><br><span class="line">    <span class="keyword">return</span> dataFromDb;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 加锁失败，重试 synchronized()</span></span><br><span class="line">    <span class="comment">// 休眠100ms重试</span></span><br><span class="line">    <span class="keyword">return</span> getCatelogJsonFromDbWithRedisLock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">问题：于业务时间很长，锁自己过期了,删除别人的锁</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="number">4.</span>占锁的时候，值指定为uuid,每个人匹配是自己</span><br><span class="line">的锁才删除。</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">问题：如果正好判断是当前值，正要删除锁的时候,锁经过期,</span></span><br><span class="line"><span class="comment">别人已经设置到了新的值。那么我们删除的是别人的锁</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="number">5.</span>删除锁必须保证原子性。使用redis+Lua脚本完成</span><br><span class="line"></span><br><span class="line"> <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        <span class="comment">// 设置值同时设置过期时间</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">lock</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>,uuid,<span class="number">300</span>,TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">if</span> (lock) &#123;</span><br><span class="line">            <span class="comment">// 加锁成功..执行业务</span></span><br><span class="line">            <span class="comment">// 设置过期时间,必须和加锁是同步的，原子的</span></span><br><span class="line"><span class="comment">//            redisTemplate.expire(&quot;lock&quot;,30,TimeUnit.SECONDS);</span></span><br><span class="line">            Map&lt;String,List&lt;Catelog2Vo&gt;&gt; dataFromDb = getDataFromDB();</span><br><span class="line"><span class="comment">//            String lockValue = redisTemplate.opsForValue().get(&quot;lock&quot;);</span></span><br><span class="line"><span class="comment">//            if (lockValue.equals(uuid)) &#123;</span></span><br><span class="line"><span class="comment">//                // 删除我自己的锁</span></span><br><span class="line"><span class="comment">//                redisTemplate.delete(&quot;lock&quot;); // 删除锁</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">// 通过使用lua脚本进行原子性删除</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">script</span> <span class="operator">=</span> <span class="string">&quot;if redis.call(&#x27;get&#x27;,KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;,KEYS[1]) else return 0 end&quot;</span>;</span><br><span class="line">                <span class="comment">//删除锁</span></span><br><span class="line">                <span class="type">Long</span> <span class="variable">lock1</span> <span class="operator">=</span> redisTemplate.execute(<span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;Long&gt;(script, Long.class), Arrays.asList(<span class="string">&quot;lock&quot;</span>), uuid);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> dataFromDb;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 加锁失败，重试 synchronized()</span></span><br><span class="line">            <span class="comment">// 休眠100ms重试</span></span><br><span class="line">            <span class="keyword">return</span> getCatelogJsonFromDbWithRedisLock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">最后</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="number">6.</span>更难的事情，业务时间过长，锁的自动续期 </span><br><span class="line"><span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        <span class="comment">// 设置值同时设置过期时间</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">lock</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>,uuid,<span class="number">300</span>,TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">if</span> (lock) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;获取分布式锁成功&quot;</span>);</span><br><span class="line">            <span class="comment">// 加锁成功..执行业务</span></span><br><span class="line">            <span class="comment">// 设置过期时间,必须和加锁是同步的，原子的</span></span><br><span class="line"><span class="comment">//            redisTemplate.expire(&quot;lock&quot;,30,TimeUnit.SECONDS);</span></span><br><span class="line">            Map&lt;String,List&lt;Catelog2Vo&gt;&gt; dataFromDb;</span><br><span class="line"><span class="comment">//            String lockValue = redisTemplate.opsForValue().get(&quot;lock&quot;);</span></span><br><span class="line"><span class="comment">//            if (lockValue.equals(uuid)) &#123;</span></span><br><span class="line"><span class="comment">//                // 删除我自己的锁</span></span><br><span class="line"><span class="comment">//                redisTemplate.delete(&quot;lock&quot;); // 删除锁</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                dataFromDb = getDataFromDB();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">script</span> <span class="operator">=</span> <span class="string">&quot;if redis.call(&#x27;get&#x27;,KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;,KEYS[1]) else return 0 end&quot;</span>;</span><br><span class="line">                <span class="comment">//删除锁</span></span><br><span class="line">                <span class="type">Long</span> <span class="variable">lock1</span> <span class="operator">=</span> redisTemplate.execute(<span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;Long&gt;(script, Long.class), Arrays.asList(<span class="string">&quot;lock&quot;</span>), uuid);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> dataFromDb;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 加锁失败，重试 synchronized()</span></span><br><span class="line">            <span class="comment">// 休眠200ms重试</span></span><br><span class="line">            System.out.println(<span class="string">&quot;获取分布式锁失败，等待重试&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123; TimeUnit.MILLISECONDS.sleep(<span class="number">200</span>); &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">            <span class="keyword">return</span> getCatelogJsonFromDbWithRedisLock();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>问题：</p><ul><li>分布式加锁解锁都是这两套代码，可以封装成工具类</li><li>分布式锁有更专业的框架</li></ul><h3 id="分布式锁-Redisson"><a href="#分布式锁-Redisson" class="headerlink" title="分布式锁 - Redisson"></a>分布式锁 - Redisson</h3><p>官网文档上.</p><p>详细说明了 不推荐使用 setnx来实现分布式锁，应该参考 the Redlock algorithm 的实现</p><p><img src="/redis/image-20201101050725534.png" alt="image-20201101050725534"></p><p> the Redlock algorithm：<a href="https://redis.io/topics/distlock">https://redis.io/topics/distlock</a></p><p>在Java 语言环境下使用 Redisson</p><p>github：<a href="https://github.com/redisson/redisson">https://github.com/redisson/redisson</a></p><p>有对应的   <a href="https://github.com/redisson/redisson/wiki">中文文档</a></p><p><a href="https://github.com/redisson/redisson/wiki/%E7%9B%AE%E5%BD%95">目录</a></p><p>在 Maven 仓库中搜索也能搜索出 Redisson</p><p><img src="/redis/image-20201101051157803.png" alt="image-20201101051157803"></p><h5 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--以后使用 redisson 作为分布锁，分布式对象等功能--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2、创建RedissonClient"><a href="#2、创建RedissonClient" class="headerlink" title="2、创建RedissonClient"></a>2、创建RedissonClient</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.redisson.Redisson;</span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RedissonClient;</span><br><span class="line"><span class="keyword">import</span> org.redisson.config.Config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRedissonConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean(destroyMethod=&quot;shutdown&quot;)</span></span><br><span class="line">    RedissonClient <span class="title function_">redisson</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="comment">//Redisson需要的配置</span></span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">node</span> <span class="operator">=</span> <span class="string">&quot;8.144.162.164:6376&quot;</span>;<span class="comment">//redis地址</span></span><br><span class="line">        node = node.startsWith(<span class="string">&quot;redis://&quot;</span>) ? node : <span class="string">&quot;redis://&quot;</span> + node;</span><br><span class="line">        <span class="type">SingleServerConfig</span> <span class="variable">serverConfig</span> <span class="operator">=</span> config.useSingleServer()</span><br><span class="line">                .setAddress(node)</span><br><span class="line">                .setTimeout(<span class="number">3000</span>)<span class="comment">//超时时间</span></span><br><span class="line">                .setConnectionPoolSize(<span class="number">10</span>)</span><br><span class="line">                .setConnectionMinimumIdleSize(<span class="number">10</span>);</span><br><span class="line">        serverConfig.setPassword(<span class="string">&quot;root&quot;</span>);<span class="comment">//设置redis密码</span></span><br><span class="line">        <span class="comment">// 创建RedissonClient客户端实例</span></span><br><span class="line">        <span class="type">RedissonClient</span> <span class="variable">redissonClient</span> <span class="operator">=</span> Redisson.create(config);</span><br><span class="line">        <span class="keyword">return</span> redissonClient;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>destroyMethod ： 销毁方法</p><h5 id="2、Redisson-Lock-锁测试-Redisson-Lock-看门狗原理-Redisson-如何解决死锁"><a href="#2、Redisson-Lock-锁测试-Redisson-Lock-看门狗原理-Redisson-如何解决死锁" class="headerlink" title="2、Redisson - Lock 锁测试 &amp; Redisson - Lock 看门狗原理 - Redisson 如何解决死锁"></a>2、Redisson - Lock 锁测试 &amp; Redisson - Lock 看门狗原理 - Redisson 如何解决死锁</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 1、获取一把锁，只要锁得名字一样，就是同一把锁</span></span><br><span class="line">    <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redission.getLock(<span class="string">&quot;my-lock&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、加锁</span></span><br><span class="line">    lock.lock(); <span class="comment">// 阻塞式等待，默认加的锁都是30s时间</span></span><br><span class="line">    <span class="comment">//如果业务超长，运行期间过了十秒自动给锁续上新的30s，过了十秒（3分之1开门狗时间 30* 1/3）没有结束再上新的30s</span></span><br><span class="line">   <span class="comment">// 如果我们没有指定锁的超时时间，就是用 30 * 1000 LockWatchchdogTimeout看门狗的默认时间</span></span><br><span class="line">    <span class="comment">//      只要占锁成功，就会启动一个定时任务，【重新给锁设置过期时间，新的过期时间就是看门狗的默认时间】,每隔10s就自动续期</span></span><br><span class="line">    <span class="comment">//      internalLockLeaseTime【看门狗时间】 /3,10s</span></span><br><span class="line"></span><br><span class="line">    lock.lock(<span class="number">10</span>, TimeUnit.SECONDS); <span class="comment">//10s 后自动删除   没有自动续期操作</span></span><br><span class="line">    <span class="comment">//问题 lock.lock(10, TimeUnit.SECONDS) 在锁时间到了后，不会自动续期</span></span><br><span class="line">    <span class="comment">// 1、如果我们传递了锁的超时时间，执行lua脚本 就发送给 redis 执行脚本，进行占锁，默认超时就是我们指定的时间   </span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//推荐使用</span></span><br><span class="line">    <span class="comment">// lock.lock(10, TimeUnit.SECONDS);    省掉了整个续期操作，手动解锁</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加锁成功，执行业务...&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 解锁 将设解锁代码没有运行，reidsson会不会出现死锁</span></span><br><span class="line">        System.out.println(<span class="string">&quot;释放锁....&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Redisson-Lock-源码"><a href="#Redisson-Lock-源码" class="headerlink" title="Redisson Lock 源码"></a><code>Redisson</code> Lock 源码</h5><p>1、进入 <code>Lock</code> 的实现 发现 他调用的也是 <code>lock</code> 方法参数  时间为 -1</p><p><img src="/redis/image-20201101051659465.png" alt="image-20201101051659465"></p><p>2、再次进入 <code>lock</code> 方法</p><p>发现他调用了 tryAcquire</p><p><img src="/redis/image-20201101051925487.png" alt="image-20201101051925487"></p><p>3、进入 tryAcquire</p><p><img src="/redis/image-20201101052008724.png" alt="image-20201101052008724"></p><p>4、里头调用了 tryAcquireAsync</p><p>这里判断 laseTime !&#x3D; -1 就与刚刚的第一步传入的值有关系</p><p><img src="/redis/image-20201101052037959.png" alt="image-20201101052037959"></p><p>5、进入到 <code>tryLockInnerAsync</code> 方法</p><p><img src="/redis/image-20201101052158592.png" alt="image-20201101052158592"></p><p>6、<code>internalLockLeaseTime</code> 这个变量是锁的默认时间</p><p>这个变量在构造的时候就赋初始值</p><p><img src="/redis/image-20201101052346059.png" alt="image-20201101052346059"></p><p>7、最后查看 <code>lockWatchdogTimeout</code> 变量</p><p>也就是30秒的时间</p><p><img src="/redis/image-20201101052428198.png" alt="image-20201101052428198"></p><h5 id="3、Reidsson-读写锁"><a href="#3、Reidsson-读写锁" class="headerlink" title="3、Reidsson - 读写锁"></a>3、Reidsson - 读写锁</h5><p>写锁没释放,读锁就必须等待</p><p>有读锁，写也需要等待</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保证一定能读取到最新数据，修改期间，写锁是一个排他锁（互斥锁，独享锁）读锁是一个共享锁</span></span><br><span class="line"><span class="comment">     * 写锁没释放读锁就必须等待</span></span><br><span class="line"><span class="comment">     * 读 + 读 相当于无锁，并发读，只会在 reids中记录好，所有当前的读锁，他们都会同时加锁成功</span></span><br><span class="line"><span class="comment">     * 写 + 读 等待写锁释放</span></span><br><span class="line"><span class="comment">     * 写 + 写 阻塞方式</span></span><br><span class="line"><span class="comment">     * 读 + 写 有读锁，写也需要等待</span></span><br><span class="line"><span class="comment">     * 只要有写的存在，都必须等待</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/write&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">writeValue</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">RReadWriteLock</span> <span class="variable">lock</span> <span class="operator">=</span> redission.getReadWriteLock(<span class="string">&quot;rw_lock&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">RLock</span> <span class="variable">rLock</span> <span class="operator">=</span> lock.writeLock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1、改数据加写锁，读数据加读锁</span></span><br><span class="line">            rLock.lock();</span><br><span class="line">            System.out.println(<span class="string">&quot;写锁加锁成功...&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">            s = UUID.randomUUID().toString();</span><br><span class="line">            <span class="keyword">try</span> &#123; TimeUnit.SECONDS.sleep(<span class="number">3</span>); &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">            redisTemplate.opsForValue().set(<span class="string">&quot;writeValue&quot;</span>,s);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            rLock.unlock();</span><br><span class="line">            System.out.println(<span class="string">&quot;写锁释放...&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/read&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">readValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">RReadWriteLock</span> <span class="variable">lock</span> <span class="operator">=</span> redission.getReadWriteLock(<span class="string">&quot;rw_lock&quot;</span>);</span><br><span class="line">        <span class="type">RLock</span> <span class="variable">rLock</span> <span class="operator">=</span> lock.readLock();</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        rLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;读锁加锁成功...&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">            s = (String) redisTemplate.opsForValue().get(<span class="string">&quot;writeValue&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123; TimeUnit.SECONDS.sleep(<span class="number">3</span>); &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            rLock.unlock();</span><br><span class="line">            System.out.println(<span class="string">&quot;读锁释放...&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>来看下官网的解释</p><p><img src="/redis/image-20201101053042268.png" alt="image-20201101053042268"></p><h5 id="4、Redisson-闭锁测试"><a href="#4、Redisson-闭锁测试" class="headerlink" title="4、Redisson - 闭锁测试"></a>4、Redisson - 闭锁测试</h5><p>官网！！！</p><p><img src="/redis/image-20201101053053554.png" alt="image-20201101053053554"></p><p>上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 放假锁门</span></span><br><span class="line"><span class="comment"> * 1班没人了</span></span><br><span class="line"><span class="comment"> * 5个班级走完，我们可以锁们了</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/lockDoor&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">lockDoor</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">RCountDownLatch</span> <span class="variable">door</span> <span class="operator">=</span> redission.getCountDownLatch(<span class="string">&quot;door&quot;</span>);</span><br><span class="line">    door.trySetCount(<span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    door.await();<span class="comment">//等待闭锁都完成</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">///gogogo/&#123;id&#125; 请求五次</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;放假了....&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@GetMapping(&quot;/gogogo/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">gogogo</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">    <span class="type">RCountDownLatch</span> <span class="variable">door</span> <span class="operator">=</span> redission.getCountDownLatch(<span class="string">&quot;door&quot;</span>);</span><br><span class="line">    door.countDown();<span class="comment">// 计数器减一</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> id + <span class="string">&quot;班的人走完了.....&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和 JUC 的 CountDownLatch 一致</p><p>await()等待闭锁完成</p><p>countDown() 把计数器减掉后 await就会放行</p><h5 id="5、Redisson-信号量测试"><a href="#5、Redisson-信号量测试" class="headerlink" title="5、Redisson - 信号量测试"></a>5、Redisson - 信号量测试</h5><p>官网！！！</p><p><img src="/redis/image-20201101053450708.png" alt="image-20201101053450708"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 车库停车</span></span><br><span class="line"><span class="comment"> * 3车位</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/park&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">park</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">RSemaphore</span> <span class="variable">park</span> <span class="operator">=</span> redission.getSemaphore(<span class="string">&quot;park&quot;</span>);</span><br><span class="line">    <span class="comment">//boolean b = park.acquire();//占用一个车位</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> park.tryAcquire();<span class="comment">//获取一个信号，获取一个值，占用一个车位</span></span><br><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line"><span class="comment">//获取信号量成功执行业务</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> xxx;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok=&quot;</span> + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/go&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">go</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">RSemaphore</span> <span class="variable">park</span> <span class="operator">=</span> redission.getSemaphore(<span class="string">&quot;park&quot;</span>);</span><br><span class="line"></span><br><span class="line">    park.release(); <span class="comment">//释放一个车位</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似 JUC 中的 Semaphore </p><h5 id="Redission-缓存一致性解决"><a href="#Redission-缓存一致性解决" class="headerlink" title="Redission - 缓存一致性解决"></a>Redission - 缓存一致性解决</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;redis&quot;&gt;&lt;a href=&quot;#redis&quot; class=&quot;headerlink&quot; title=&quot;redis&quot;&gt;&lt;/a&gt;redis&lt;/h1&gt;&lt;h3 id=&quot;前置条件开放自定义端口6376&quot;&gt;&lt;a href=&quot;#前置条件开放自定义端口6376&quot; class=&quot;he</summary>
      
    
    
    
    <category term="缓存" scheme="http://cardioid.gitee.io/categories/%E7%BC%93%E5%AD%98/"/>
    
    
    <category term="缓存" scheme="http://cardioid.gitee.io/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Sentinel的使用笔记</title>
    <link href="http://cardioid.gitee.io/2021/10/21/Java/SpringCloud%20Alibaba/Sentinel/"/>
    <id>http://cardioid.gitee.io/2021/10/21/Java/SpringCloud%20Alibaba/Sentinel/</id>
    <published>2021-10-21T13:17:13.000Z</published>
    <updated>2022-02-09T10:10:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SpringCloud-Alibaba-Sentinel"><a href="#SpringCloud-Alibaba-Sentinel" class="headerlink" title="SpringCloud Alibaba-Sentinel"></a>SpringCloud Alibaba-Sentinel</h3><h4 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h4><h5 id="1、服务降级限流"><a href="#1、服务降级限流" class="headerlink" title="1、服务降级限流"></a>1、服务降级限流</h5><p><strong>熔断：</strong></p><p>​A 服务调用 B 服务的某个功能， B 服务卡机，导致功能时间超长可以<strong>直接将 B 断路</strong>了</p><p>（A 不在请求  B 接口）凡是调用 B 服务的<strong>直接返回降级数据</strong>，不必等待 B 的 超时执行，这样 B 的故障问题，就不会级联影响到 A。</p><p><strong>降级：</strong></p><p>​整个网站处于流量<strong>高峰期服务器压力剧增</strong>，根据当前自身业务情况以及流量，对一些服务和页面进行有策略的降级&#x2F;停止服务，所有的调用<strong>直接返回降级数据</strong>以此缓解服务器资源的压力，以保证核心业务的正常运行，同时也保持了客户和大部分客户等到正确的响应</p><p><strong>限流：</strong></p><p>​对打入的服务的请求流量进行控制，使服务能够承担不超过自己能力的流量压力</p><h5 id="2、Sentinel-简介"><a href="#2、Sentinel-简介" class="headerlink" title="2、Sentinel 简介"></a>2、Sentinel 简介</h5><p>官方文档：<a href="https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D">https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D</a></p><p>项目文档：<a href="https://github.com/alibaba/Sentinel">https://github.com/alibaba/Sentinel</a></p><p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。Sentinel 以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p><p><strong>Sentinel 分为两个部分:</strong></p><ul><li>核心库（Java 客户端）不依赖任何框架&#x2F;库，能够运行于所有 Java 运行时环境，同时对 Dubbo &#x2F; Spring Cloud 等框架也有较好的支持。</li><li>控制台（Dashboard）基于 Spring Boot 开发，打包后可以直接运行，不需要额外的 Tomcat 等应用容器。</li></ul><p><strong>Sentinel 基本概念:</strong></p><ul><li>资源<ul><li>资源是 Sentinel 的关键概念。它可以是 Java 应用程序中的任何内容，例如，由应用程序提供的服务，或由应用程序调用的其它应用提供的服务，甚至可以是一段代码。在接下来的文档中，我们都会用资源来描述代码块。</li><li><strong>只要通过 Sentinel API 定义的代码，就是资源，能够被 Sentinel 保护起来</strong>。大部分情况下，可以使用方法签名，URL，甚至服务名称作为资源名来标示资源。</li></ul></li><li>规则<ul><li>围绕资源的实时状态设定的规则，可以包括<strong>流量控制规则、熔断降级规则以及系统保护规则。所有规则可以动态实时调整。</strong></li></ul></li></ul><h4 id="2、Hystrix-与-Sentinel-比较"><a href="#2、Hystrix-与-Sentinel-比较" class="headerlink" title="2、Hystrix 与 Sentinel 比较"></a>2、Hystrix 与 Sentinel 比较</h4><p><img src="/Sentinel/image-20201125120634969.png" alt="image-20201125120634969"></p><h4 id="3、整合-Feign-和-Sentinel-测试熔断降级"><a href="#3、整合-Feign-和-Sentinel-测试熔断降级" class="headerlink" title="3、整合 Feign 和 Sentinel 测试熔断降级"></a>3、整合 Feign 和 Sentinel 测试熔断降级</h4><p>熔断降级官网解释：<a href="https://github.com/alibaba/Sentinel/wiki/%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7">https://github.com/alibaba/Sentinel/wiki/%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7</a></p><p>Spring-  Cloud整合Sentinel和Feign：<a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/Sentinel">https://github.com/alibaba/spring-cloud-alibaba/wiki/Sentinel</a></p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入sentinel依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入openFeign --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>application.properties </p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## sentinel与项目间的通信端口</span></span><br><span class="line"><span class="attr">spring.cloud.sentinel.transport.port</span>=<span class="string">8719</span></span><br><span class="line"><span class="comment">## sentinel端口设置</span></span><br><span class="line"><span class="attr">spring.cloud.sentinel.transport.dashboard</span>=<span class="string">localhost:8333</span></span><br><span class="line"><span class="comment">## 暴露信息</span></span><br><span class="line"><span class="attr">management.endpoints.web.exposure.exclude</span>=<span class="string">*</span></span><br><span class="line"><span class="comment">## 配置文件打开 Sentinel 对 Feign 的支持</span></span><br><span class="line"><span class="attr">feign.sentinel.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>开启后，在微服务中调用远程服务，Sentinel 就会记录微服务之间的调用，从而对远程调用进行设置熔断降级等。</p><p>请求设置</p><p><img src="/Sentinel/image-20201126154714221.png" alt="image-20201126154714221"></p><p>设置流控规则</p><p><img src="/Sentinel/image-20201126165501709.png" alt="image-20201126165501709"></p><p>Feign设置</p><p><img src="/Sentinel/image-20201126165336761.png" alt="image-20201126165336761"></p><p>结果</p><p><img src="/Sentinel/image-20201126164858768.png" alt="image-20201126164858768"></p><h4 id="4、整合-Sentinel-测试限流"><a href="#4、整合-Sentinel-测试限流" class="headerlink" title="4、整合 Sentinel 测试限流"></a>4、整合 Sentinel 测试限流</h4><p>官网Spring-Cloud 整合：<a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/Sentinel">https://github.com/alibaba/spring-cloud-alibaba/wiki/Sentinel</a></p><p>Pom.xml</p><blockquote><p>参考 3、整合 Feign 和 Sentinel 测试熔断降级</p></blockquote><p>控制台：</p><p><img src="/Sentinel/image-20201126161848389.png"></p><p>超过单继阈值，返回自定义请求结果</p><p>实现方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  1、代码</span></span><br><span class="line"><span class="comment"> *      try (Entry entry = SphU.entry(&quot;resourceName&quot;)) &#123;</span></span><br><span class="line"><span class="comment"> *      &#125;(BlockedException e)&#123;&#125;</span></span><br><span class="line"><span class="comment"> *      2、基于注解</span></span><br><span class="line"><span class="comment"> *       <span class="doctag">@SentinelResource</span>(value = &quot;getCurrentSeckillSkusSource&quot;,blockHandler = &quot;BlockHandler&quot;)</span></span><br><span class="line"><span class="comment"> *       无论1/2方式一定要配置限流以后的默认返回</span></span><br><span class="line"><span class="comment"> *       url可以设置统一返回</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure><p>具体实现方式参考官网给出文档：<a href="https://github.com/alibaba/Sentinel/wiki/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8">https://github.com/alibaba/Sentinel/wiki/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8</a></p><h4 id="5、Sentinel网关限流"><a href="#5、Sentinel网关限流" class="headerlink" title="5、Sentinel网关限流"></a>5、Sentinel网关限流</h4><p>官网文档：<a href="https://github.com/alibaba/Sentinel/wiki/%E7%BD%91%E5%85%B3%E9%99%90%E6%B5%81">https://github.com/alibaba/Sentinel/wiki/%E7%BD%91%E5%85%B3%E9%99%90%E6%B5%81</a></p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-sentinel-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>启动Sentinle1.7.1 后比原先的1.6.1多个一个功能</p><p><img src="/Sentinel/image-20201127102052864.png" alt="image-20201127102052864"></p><p>您可以在 <code>GatewayCallbackManager</code> 注册回调进行定制：</p><ul><li><code>setBlockHandler</code>：注册函数用于实现自定义的逻辑处理被限流的请求，对应接口为 <code>BlockRequestHandler</code>。默认实现为 <code>DefaultBlockRequestHandler</code>，当被限流时会返回类似于下面的错误信息：<code>Blocked by Sentinel: FlowException</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SentinelGatewayConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SentinelGatewayConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        GatewayCallbackManager.setBlockHandler(<span class="keyword">new</span> <span class="title class_">BlockRequestHandler</span>() &#123;</span><br><span class="line">            <span class="comment">// 网关限流了 就会回调</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title function_">handleRequest</span><span class="params">(ServerWebExchange serverWebExchange, Throwable throwable)</span> &#123;</span><br><span class="line">                <span class="type">R</span> <span class="variable">error</span> <span class="operator">=</span> R.error(BizCodeEnume.TO_MANY_REQUEST.getCode(), BizCodeEnume.TO_MANY_REQUEST.getMsg());</span><br><span class="line">                <span class="type">String</span> <span class="variable">errorJson</span> <span class="operator">=</span> JSON.toJSONString(error);</span><br><span class="line">                Mono&lt;ServerResponse&gt; body = ServerResponse.ok().body(Mono.just(errorJson), String.class);</span><br><span class="line">                <span class="keyword">return</span> body;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;SpringCloud-Alibaba-Sentinel&quot;&gt;&lt;a href=&quot;#SpringCloud-Alibaba-Sentinel&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud Alibaba-Sentinel&quot;&gt;&lt;/a&gt;Sp</summary>
      
    
    
    
    <category term="SpringCloud" scheme="http://cardioid.gitee.io/categories/SpringCloud/"/>
    
    
    <category term="SpringCloud" scheme="http://cardioid.gitee.io/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>布隆过滤器</title>
    <link href="http://cardioid.gitee.io/2021/10/19/Java/redis-%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>http://cardioid.gitee.io/2021/10/19/Java/redis-%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/</id>
    <published>2021-10-19T15:59:20.000Z</published>
    <updated>2022-01-26T08:58:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="布隆过滤器的使用"><a href="#布隆过滤器的使用" class="headerlink" title="布隆过滤器的使用"></a>布隆过滤器的使用</h1><p>1.先说下背景，肯定遇到这种情况，<strong>判断元素在不在一个集合里面</strong>，如果，集合里面的元素非常大，这个判断过程是非常耗时的，而且集合占用空间也很大。</p><p>2.应用场景，网页黑名单，垃圾邮件过滤，电话黑名单，url去重，内容推荐等。</p><p>3.原理：布隆过滤器实际上就是一个<strong>字节数组</strong>，字节数组的值是0或1，在添加元素的时候，对值通过<strong>多个hash函数的计算</strong>，得到多个0,1然后在字节数组里面在相应的位置设置值。这样处理完所有的值之后，一个完整的布隆过滤器就完成了。之后就进入应用阶段了，判断值在不在布隆过滤器里面了，如果新输出的对象是之前处理放在布隆过滤器里面的，那就一定是存在，因为两次计算得到的hash值是一样的，肯定在，那对于新的对象了，这时就有可能会出现误杀了，新的值的hash值可能与老的值hash一样，于是布隆过滤器就认为，这个值是黑名单里的了，会造成误杀的结果。相当于就是宁愿杀错一k，不愿放过一个。</p><p>4.改进：通常误杀的话，可以通过两个方法去补救，<strong>再建立一个白名单</strong>，从布隆器本身去优化，降低误杀率。</p><p>5.再举例，头条给你推荐内容的时候，肯定要去查询一个的你的历史阅读记录，你看过的内容，一定是存在你的记录中的，新内容会有很小的机率认为是你之前看过的。</p><p><strong>现象</strong>：用户大量并发请求的数据(key)对应的数据在redis和数据库中都不存在，导致尽管数据不存在但还是每次都会进行查DB。</p><p>为什么key对应数据在缓存和db中不存在还会每次都进行DB查询呢？因为很多开发同学写的代码写的逻辑都是先从redis缓存中查一把，如果缓存中为空则从DB中查，如果DB中查到的数据不为空则设置到缓存并返回给接口。那么问题来了，如果从DB中查询的数据为空呢？？</p><p><strong>解决方案</strong>：</p><ul><li>从DB中查询出来数据为空，也进行空数据的缓存，避免DB数据为空也每次都进行数据库查询；</li><li>使用布隆过滤器，但是会增加一定的复杂度及存在一定的误判率；</li></ul><p>bloomfilter就类似于一个hash set，用于快速判某个元素是否存在于集合中，其典型的应用场景就是快速判断一个key是否存在于某容器，不存在就直接返回。布隆过滤器的关键就在于hash算法和容器大小，下面先来简单的实现下看看效果，我这里用guava实现的布隆过滤器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;  </span><br><span class="line">     &lt;dependency&gt;  </span><br><span class="line">         &lt;groupId&gt;com.google.guava&lt;/groupId&gt;  </span><br><span class="line">         &lt;artifactId&gt;guava&lt;/artifactId&gt;  </span><br><span class="line">         &lt;version&gt;<span class="number">23.0</span>&lt;/version&gt;  </span><br><span class="line">     &lt;/dependency&gt;  </span><br><span class="line">&lt;/dependencies&gt;  </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BloomFilterTest</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> <span class="number">1000000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> <span class="number">999998</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BloomFilter&lt;Integer&gt; bloomFilter = BloomFilter.create(Funnels.integerFunnel(), capacity);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; capacity; i++) &#123;</span><br><span class="line">            bloomFilter.put(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*返回计算机最精确的时间，单位微妙*/</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (bloomFilter.mightContain(key)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;成功过滤到&quot;</span> + key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">        System.out.println(<span class="string">&quot;布隆过滤器消耗时间:&quot;</span> + (end - start));</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1020000</span> i &lt; <span class="number">1030000</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//这一万个错误数据</span></span><br><span class="line">            <span class="keyword">if</span> (bloomFilter.mightContain(i)) &#123;</span><br><span class="line">                sum = sum + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;错判率为:&quot;</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1秒 s&#x3D; 1000 毫秒 ms</p><p>1毫秒 ms &#x3D; 1,000 微秒 μs</p><p> 1微秒 μs &#x3D; 1,000 纳秒 ns</p><p>结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">成功过滤到999998</span><br><span class="line">布隆过滤器消耗时间:215518</span><br><span class="line">错判率为:318</span><br></pre></td></tr></table></figure><p>可以看到，100w个数据中只消耗了约0.2毫秒就匹配到了key，速度足够快。然后模拟了1w个不存在于布隆过滤器中的key，匹配错误率为318&#x2F;10000，也就是说，出错率大概为3%，跟踪下BloomFilter的源码发现默认的容错率就是0.03：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; BloomFilter&lt;T&gt; <span class="title function_">create</span><span class="params">(Funnel&lt;T&gt; funnel, <span class="type">int</span> expectedInsertions <span class="comment">/* n */</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> create(funnel, expectedInsertions, <span class="number">0.03</span>); <span class="comment">// FYI, for 3%, we always get 5 hash functions</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可调用BloomFilter的这个方法显式的指定误判率：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> BloomFilter&lt;Integer&gt; bloomFilter = BloomFilter.create(Funnels.integerFunnel(), capacity,<span class="number">0.01</span>);</span><br></pre></td></tr></table></figure><p>我们断点跟踪下，误判率为0.02和默认的0.03时候的区别:</p><p><img src="/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/20180601221013466" alt="img"></p><p><img src="/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/20180601221026433" alt="img"></p><p>对比两个出错率可以发现，误判率为0.02时数组大小为8142363，0.03时为7298440，误判率降低了0.01，BloomFilter维护的数组大小也减少了843923，可见BloomFilter默认的误判率0.03是设计者权衡系统性能后得出的值。要注意的是，布隆过滤器不支持删除操作。用在这边解决缓存穿透问题就是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getByKey</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="comment">// 通过key获取value</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> redisService.get(key);</span><br><span class="line">    <span class="keyword">if</span> (StringUtil.isEmpty(value)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (bloomFilter.mightContain(key)) &#123;</span><br><span class="line">            value = userService.getById(key);</span><br><span class="line">            redisService.set(key, value);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;布隆过滤器的使用&quot;&gt;&lt;a href=&quot;#布隆过滤器的使用&quot; class=&quot;headerlink&quot; title=&quot;布隆过滤器的使用&quot;&gt;&lt;/a&gt;布隆过滤器的使用&lt;/h1&gt;&lt;p&gt;1.先说下背景，肯定遇到这种情况，&lt;strong&gt;判断元素在不在一个集合里面&lt;/strong</summary>
      
    
    
    
    <category term="布隆过滤器" scheme="http://cardioid.gitee.io/categories/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    
    
    <category term="redis" scheme="http://cardioid.gitee.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>mysql安装使用问题</title>
    <link href="http://cardioid.gitee.io/2021/10/10/Java/mysql/mysql/"/>
    <id>http://cardioid.gitee.io/2021/10/10/Java/mysql/mysql/</id>
    <published>2021-10-10T15:45:55.000Z</published>
    <updated>2022-04-10T16:43:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sql语句"><a href="#sql语句" class="headerlink" title="sql语句"></a>sql语句</h2><p>暂未整理</p><h2 id="mysql安装使用问题"><a href="#mysql安装使用问题" class="headerlink" title="mysql安装使用问题"></a>mysql安装使用问题</h2><h3 id="1-不允许远程连接"><a href="#1-不允许远程连接" class="headerlink" title="1.不允许远程连接"></a>1.不允许远程连接</h3><p>方法一：</p><ul><li><p>问题描述</p><p>Host ‘xxx’ is not allowed to connect to this MySQL server 1130-主机‘xxx’不允许连接到此MySQL服务器</p></li></ul><p><strong>步骤一</strong> 登陆</p><p>mysql -u root -p</p><p><strong>步骤二</strong> 查询user表</p><p>use mysql;</p><p>select host from user where user&#x3D;’root’;</p><p>可以看到当前主机配置信息为localhost.</p><p><strong>步骤三</strong>.将Host设置为通配符%</p><p>Host列指定了允许用户登录所使用的IP，比如user&#x3D;root Host&#x3D;192.168.1.1。这里的意思就是说root用户只能通过192.168.1.1的客户端去访问。 user&#x3D;root Host&#x3D;localhost，表示只能通过本机客户端去访问。而%是个通配符，如果Host&#x3D;192.168.1.%，那么就表示只要是IP地址前缀为“192.168.1.”的客户端都可以连接。如果Host&#x3D;%，表示所有IP都有连接权限。 </p><p>注意：在生产环境下不能为了省事将host设置为%，这样做会存在安全问题，具体的设置可以根据<strong>生产环境的IP进行设置</strong>；</p><p>update user set host &#x3D; ‘%’ where user &#x3D;’root’;</p><p>Host设置了“%”后便可以允许远程访问。</p><p><strong>步骤四</strong>.Host修改完成后记得执行flush privileges使配置立即生效</p><p>flush privileges;</p><p>6.使用navicat 成功连接至mysql</p><p>方法二：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span> <span class="keyword">with</span> <span class="keyword">grant</span> option;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>h或者</p><pre><code>//授权grant all privileges on *.* to &#39;root&#39; @&#39;%&#39; identified by &#39;密码&#39;;//刷新flush privileges;</code></pre><h3 id="2-修改mysql密码"><a href="#2-修改mysql密码" class="headerlink" title="2.修改mysql密码"></a>2.修改mysql密码</h3><h4 id="知道密码"><a href="#知道密码" class="headerlink" title="知道密码"></a>知道密码</h4><p>在清楚的知道密码的情况之下可以使用以下几种方式修改MySQL的密码。</p><p><strong>方式一</strong></p><blockquote><p>登录mysql执行以下语句</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br></pre></td></tr></table></figure><blockquote><p>按回车确认, 如果安装正确且 MySQL 正在运行, 会得到以下响应:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enter password: xxx</span><br></pre></td></tr></table></figure><blockquote><p>若密码存在, 输入密码登录, 不存在则直接按回车登录。登录成功后你将会看到 Welcome to the MySQL monitor… 的提示语。</p></blockquote><p>修改密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p>出现Query OK, 0 rows affected (0.36 sec)，表示修改成功。</p></blockquote><p>报错  ERROR 1396 (HY000): Operation ALTER USER failed for ‘root‘@’localhost’</p><p>mysql&gt; use mysql;<br>mysql&gt; select user,host from user;<br>+——————+———–+<br>| user             | host      |<br>+——————+———–+<br>| root             | %         |<br>| admin            | localhost |<br>| mysql.infoschema | localhost |<br>| mysql.session    | localhost |<br>| mysql.sys        | localhost |<br>| zhangj           | localhost |<br>+——————+———–+<br>注意我的root，host是’%’</p><p>你可能执行的是:</p><p>ALTER USER ‘root‘@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘123’;<br>改成:</p><p>ALTER USER ‘root‘@’%’ IDENTIFIED WITH mysql_native_password BY ‘123’;</p><p> <strong>方式二</strong></p><p><strong>通过mysqladmin修改密码</strong></p><p>root 用户可以使用 mysqladmin 命令来修改密码，mysqladmin 的语法格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u username -h hostname -p password <span class="string">&quot;newpwd&quot;</span></span><br></pre></td></tr></table></figure><p>语法参数说明如下：</p><ul><li>usermame 指需要修改密码的用户名称，在这里指定为 root 用户；</li><li>hostname 指需要修改密码的用户主机名，该参数可以不写，默认是 localhost；</li><li>password 为关键字，而不是指旧密码；</li><li>newpwd 为新设置的密码，必须用双引号括起来。如果使用单引号会引发错误，可能会造成修改后的密码不是你想要的。</li></ul><p><img src="/mysql/20210620124108836.png" alt="img"></p><p>警告：由于密码将以明文形式发送到服务器，请使用ssl连接以确保密码安全。</p><p>提示的这部分就不用管了。 </p><p>修改完成。</p><h4 id="忘记密码"><a href="#忘记密码" class="headerlink" title="忘记密码"></a>忘记密码</h4><p>在忘记密码的情况下如何强制修改密码，我在此提供一种办法。</p><blockquote><ol><li>以超级管理员打开cmd，关闭mysql服务</li></ol></blockquote><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net <span class="keyword">stop</span> mysql</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>跳过权限验证登录mysql</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --shared-memory --skip-grant-tables</span><br></pre></td></tr></table></figure><blockquote><ol start="3"><li>在新的窗口中登录mysql</li></ol></blockquote><p>使用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>无需输入密码，直接回车即可。</p><blockquote><ol start="4"><li>切换到mysql，将密码置空。</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">update user <span class="built_in">set</span> authentication_string=<span class="string">&#x27;&#x27;</span> <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure><p>然后刷新权限:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><blockquote><ol start="5"><li>设置加密规则并更新新密码，授权(直接复制这些SQL语句你的密码会更新为123456)</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;123456&#x27;</span> PASSWORD EXPIRE NEVER; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">alter user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">grant all privileges  on *.*  to <span class="string">&quot;root&quot;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><blockquote><ol start="6"><li>设置成功后，重启mysql服务，使用新密码登录</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;sql语句&quot;&gt;&lt;a href=&quot;#sql语句&quot; class=&quot;headerlink&quot; title=&quot;sql语句&quot;&gt;&lt;/a&gt;sql语句&lt;/h2&gt;&lt;p&gt;暂未整理&lt;/p&gt;
&lt;h2 id=&quot;mysql安装使用问题&quot;&gt;&lt;a href=&quot;#mysql安装使用问题&quot; class</summary>
      
    
    
    
    <category term="mysql" scheme="http://cardioid.gitee.io/categories/mysql/"/>
    
    
    <category term="mysql" scheme="http://cardioid.gitee.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>接口幂等性</title>
    <link href="http://cardioid.gitee.io/2021/10/05/Java/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E6%80%A7%E5%A4%84%E7%90%86/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E6%80%A7/"/>
    <id>http://cardioid.gitee.io/2021/10/05/Java/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E6%80%A7%E5%A4%84%E7%90%86/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E6%80%A7/</id>
    <published>2021-10-05T08:33:21.000Z</published>
    <updated>2022-04-10T16:55:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="什么是接口幂等性？"><a href="#什么是接口幂等性？" class="headerlink" title="什么是接口幂等性？"></a>什么是接口幂等性？</h2><p><strong>接口幂等性就是用户对于同一操作发起的一次请求或者多次请求的结果是一致的</strong><br>就像我们支付时，多次点支付按钮，只会扣一次。</p><h2 id="哪些情况需要防止"><a href="#哪些情况需要防止" class="headerlink" title="哪些情况需要防止"></a>哪些情况需要防止</h2><p>用户多次点击按钮<br>用户页面回退再次提交<br>微服务互相调用，由于网络问题，导致请求失败。feign 触发重试机制<br>等等</p><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p><strong>1、token机制</strong><br>1、服务端提供了发送 [token]的接口。我们在分析业务的时候，哪些业务是存在幂等问题的， 就必须在执行业务前，先去获取 token，服务器会把 token 保存到 redis 中。<br>2、然后调用业务接口请求时，把 token 携带过去，一般放在请求头部。<br>3、服务器判断 token 是否存在 [redis] 中，存在表示第一次请求，然后删除 token,继续执行业 务。<br>4、如果判断 token 不存在 redis 中，就表示是重复操作，直接返回重复标记给 client，这样 就保证了业务代码，不被重复执行</p><p>危险性： </p><p>1、先删除 token 还是后删除 token； </p><p>(1) 先删除可能导致，业务确实没有执行，重试还带上之前 token，由于防重设计导致， 请求还是不能执行。 </p><p>(2) 后删除可能导致，业务处理成功，但是服务闪断，出现超时，没有删除 token，别 人继续重试，导致业务被执行两边 </p><p>(3)<strong>我们最好设计为先删除 token，如果业务调用失败，就重新获取 token 再次请求。</strong></p><p>2、<strong>Token 获取、比较和删除必须是原子性</strong> </p><p>(1) redis.get(token) 、token.equals、redis.del(token)如果这两个操作不是原子，可能导 致，高并发下，都 get 到同样的数据，判断都成功，继续业务并发执行 (2) <strong>可以在 redis 使用 lua 脚本完成这个操作</strong></p><p>**2.各种唯一性约束（数据库的唯一约束，防重表，全局唯一性ID，redis的Set防重等等）<br>**</p><p><strong>3.锁机制（数据库锁（乐观锁和悲观锁））</strong></p><h2 id="实战之用token机制防止订单重复提交"><a href="#实战之用token机制防止订单重复提交" class="headerlink" title="实战之用token机制防止订单重复提交"></a>实战之用token机制防止订单重复提交</h2><p>1.流程<br><img src="/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E6%80%A7/1b09d2d2dadb6be6150bdb9d73bfb353.png" alt="在这里插入图片描述"><br><strong>核心：保证 验，删 令牌的原子性</strong><br>2.代码<br>生成订单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成令牌</span></span><br><span class="line"><span class="type">String</span> <span class="variable">orderToken</span> <span class="operator">=</span> UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        orderConfirmVO.setOrderToken(orderToken);</span><br><span class="line">        <span class="comment">//保存到redis中</span></span><br><span class="line">        redisTemplate.opsForValue().set(</span><br><span class="line">                ORDER_TOKEN_REDIS_PREFIX + memberVO.getUserId(),</span><br><span class="line">                orderToken,</span><br><span class="line">                <span class="number">30</span>,</span><br><span class="line">                TimeUnit.MINUTES);</span><br><span class="line">                <span class="comment">//返回数据</span></span><br><span class="line">                 <span class="keyword">return</span> orderConfirmVO;</span><br></pre></td></tr></table></figure><p>提交订单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">orderToken</span> <span class="operator">=</span> orderSubmitVO.getOrderToken();</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        *使用lua脚本,保证令牌比较和删除令牌是原子性操作,结果只能是Long, Boolean, List</span></span><br><span class="line"><span class="comment">        * the script result type. Should be one of Long, Boolean, List, or deserialized value type</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">script</span> <span class="operator">=</span> <span class="string">&quot;if redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;, KEYS[1]) else return 0 end&quot;</span>;</span><br><span class="line">       <span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> redisTemplate.execute(<span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;Long&gt;(script, Long.class),</span><br><span class="line">               Arrays.asList(ORDER_TOKEN_REDIS_PREFIX + memberVO.getUserId()),</span><br><span class="line">               orderToken);</span><br><span class="line">       <span class="keyword">if</span> (result != <span class="literal">null</span> &amp;&amp; result == <span class="number">1L</span>) &#123;</span><br><span class="line">           <span class="comment">//令牌操作成功,创建订单</span></span><br><span class="line">           &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">//提醒用户</span></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&quot;什么是接口幂等性？&quot;&gt;&lt;a href=&quot;#什么是接口幂等性？&quot; class=&quot;headerlink&quot; title=&quot;什么是接口幂等性？&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="网络" scheme="http://cardioid.gitee.io/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="网络" scheme="http://cardioid.gitee.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
</feed>
