<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2024/04/23/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>lambda 表达式</title>
    <url>/2021/09/22/Java/1.8%E6%96%B0%E7%89%B9%E6%80%A7lambda/lambda%20%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="java-lambda-表达式中的双冒号的用法"><a href="#java-lambda-表达式中的双冒号的用法" class="headerlink" title="java lambda 表达式中的双冒号的用法"></a>java lambda 表达式中的双冒号的用法</h2><p><strong>类名::方法名</strong></p>
<p>注意是方法名哦，后面没有括号“()”</p>
<p>为啥不要括号，因为这样的是式子并不代表一定会调用这个方法。</p>
<p>这种式子一般是用作<a href="https://so.csdn.net/so/search?q=Lambda&spm=1001.2101.3001.7020">Lambda</a>表达式，Lambda有所谓<strong>懒加载</strong>嘛，不要括号就是说，看情况调用方法。</p>
<blockquote>
<p>例如</p>
</blockquote>
<ol>
<li>表达式:</li>
</ol>
<ul>
<li>person -&gt; person.getAge();</li>
</ul>
<p>可以替换成</p>
<ul>
<li>Person::getAge</li>
</ul>
<ol start="2">
<li>表达式</li>
</ol>
<ul>
<li>() -&gt; new HashMap&lt;&gt;();</li>
</ul>
<p>可以替换成</p>
<ul>
<li>HashMap::new</li>
</ul>
<p>比如表达式person -&gt; person.getAge(); </p>
<p>传入参数是person，</p>
<p>返回值是person.getAge()，那么方法引用Person::getAge就对应着Function&lt;Person,Integer&gt;类型。</p>
<p>题一：下面这段代码，进行的操作是，把List<String>里面的String全部大写并返还新的ArrayList<String>，在前面的例子中我们是这么写的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">collected = collected.stream().map(string -&gt; string.toUpperCase()).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<p>现在也可以被替换成下面的写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">collected = collected.stream().map(String::toUpperCase).collect(Collectors.toCollection(ArrayList::<span class="keyword">new</span>));<span class="comment">//注意发生的变化 </span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>lambda 表达式</category>
      </categories>
      <tags>
        <tag>JDK1.8新特性</tag>
      </tags>
  </entry>
  <entry>
    <title>Stream</title>
    <url>/2021/03/28/Java/1.8%E6%96%B0%E7%89%B9%E6%80%A7Stream/stream%E6%B5%81/</url>
    <content><![CDATA[<h1 id="JDK-1-8-函数式编程-Stream-学习笔记"><a href="#JDK-1-8-函数式编程-Stream-学习笔记" class="headerlink" title="JDK 1.8 函数式编程  Stream  学习笔记"></a>JDK 1.8 函数式编程  Stream  学习笔记</h1><hr>
<p>首先对流的操作可以分为两类，中间操作（intermediate operations）和结束操作（terminal operations）：</p>
<ul>
<li>中间操作总是会惰式执行，调用中间操作只会生成一个标记了该操作的新流。</li>
<li>结束操作会触发实际计算，计算发生时会把所有中间操作积攒的操作以pipeline的方式执行，这样可以减少迭代次数。计算完成之后流就会失效。</li>
</ul>
<p>虽然大部分情况下stream是容器调用Collection.stream（）方法得到的，但stream和collections有以下不同：</p>
<ul>
<li>无存储。stream不是一种数据结构，它只是某种数据源的一个视图，数据源可以是一个数组，Java容器或I&#x2F;O channel等。</li>
<li>为函数式编程而生。对stream的任何修改都不会修改背后的数据源，比如对stream执行过滤操作并不会删除被过滤的元素，而是会产生一个不包含被过滤元素的新流。</li>
<li>惰式执行。stream上的操作并不会立即执行，只有等到用户真正需要结果的时候才会执行。</li>
<li>可消费性。stream只能被”消费”一次，一旦遍历过就会失效，就像容器的迭代器那样，想要再次遍历必须重新生成。</li>
</ul>
<hr>
<blockquote>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2></blockquote>
<h2 id="一、获取数据流"><a href="#一、获取数据流" class="headerlink" title="一、获取数据流"></a>一、获取数据流</h2><p>数组 </p>
<p>Arrays.stream(arr);</p>
<p>集合</p>
<p>list.stream();</p>
<h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">       List&lt;User&gt; list = Arrays.asList(</span><br><span class="line">               <span class="comment">// name，age</span></span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">11</span>),</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">20</span>),</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;王五&quot;</span>, <span class="number">91</span>),</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">8</span>),</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">44</span>),</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">44</span>),</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">44</span>)</span><br><span class="line">       );</span><br><span class="line"></span><br><span class="line">       <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> JSON.toJSONString(list);</span><br><span class="line">       List&lt;User&gt; list2 = JSON.parseObject(s1, List.class);</span><br><span class="line">       System.out.println(s1);</span><br><span class="line">       System.out.println(list2);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;王五&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">91</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;王五&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">44</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李四&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">44</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李四&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">44</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李四&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">11</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;王五&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">20</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;王五&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">91</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">8</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李四&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">44</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李四&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">44</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李四&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">44</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>





<h2 id="1、-forEach"><a href="#1、-forEach" class="headerlink" title="1、.forEach()"></a>1、.forEach()</h2><p>forEach 迭代输出每条数据.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * forEach 迭代输出每条数据.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testForEach</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// java 8 前</span></span><br><span class="line">  System.out.println(<span class="string">&quot;java 8 前&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span>(User user: list)&#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// java 8 lambda</span></span><br><span class="line">  </span><br><span class="line">  System.out.println(<span class="string">&quot;java 8 lambda&quot;</span>);</span><br><span class="line">  list.forEach(user -&gt; System.out.println(user));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// java 8 stream lambda</span></span><br><span class="line">  </span><br><span class="line">  System.out.println(<span class="string">&quot;java 8 stream lambda&quot;</span>);</span><br><span class="line">  list.stream().forEach(user -&gt; System.out.println(user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出<br>java 8 前<br>User{name&#x3D;’张三’, age&#x3D;11}<br>User{name&#x3D;’王五’, age&#x3D;20}<br>User{name&#x3D;’王五’, age&#x3D;91}<br>User{name&#x3D;’张三’, age&#x3D;8}<br>User{name&#x3D;’李四’, age&#x3D;44}<br>User{name&#x3D;’李四’, age&#x3D;44}<br>User{name&#x3D;’李四’, age&#x3D;44}<br>java 8 lambda<br>User{name&#x3D;’张三’, age&#x3D;11}<br>User{name&#x3D;’王五’, age&#x3D;20}<br>User{name&#x3D;’王五’, age&#x3D;91}<br>User{name&#x3D;’张三’, age&#x3D;8}<br>User{name&#x3D;’李四’, age&#x3D;44}<br>User{name&#x3D;’李四’, age&#x3D;44}<br>User{name&#x3D;’李四’, age&#x3D;44}<br>java 8 stream lambda<br>User{name&#x3D;’张三’, age&#x3D;11}<br>User{name&#x3D;’王五’, age&#x3D;20}<br>User{name&#x3D;’王五’, age&#x3D;91}<br>User{name&#x3D;’张三’, age&#x3D;8}<br>User{name&#x3D;’李四’, age&#x3D;44}<br>User{name&#x3D;’李四’, age&#x3D;44}<br>User{name&#x3D;’李四’, age&#x3D;44}</p>
<hr>
<h2 id="2、-sorted"><a href="#2、-sorted" class="headerlink" title="2、.sorted()"></a>2、.sorted()</h2><h3 id="Comparator-comparing"><a href="#Comparator-comparing" class="headerlink" title="Comparator.comparing()"></a>Comparator.comparing()</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * sort 排序.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSort</span><span class="params">()</span> &#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;-----排序前-----&quot;</span>);</span><br><span class="line">     list.forEach(user -&gt; System.out.println(user));</span><br><span class="line">     System.out.println(<span class="string">&quot;-----排序后-----&quot;</span>);</span><br><span class="line">     <span class="comment">// java 8 前</span></span><br><span class="line">     System.out.println(<span class="string">&quot;java 8 前&quot;</span>);</span><br><span class="line">     Comparator&lt;User&gt; comparator = <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;User&gt;() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(User o1, User o2)</span> &#123;</span><br><span class="line">             <span class="comment">// 升序</span></span><br><span class="line">             <span class="keyword">return</span> o1.getAge().compareTo(o2.getAge());</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;;</span><br><span class="line">     Collections.sort(list, comparator);</span><br><span class="line">     </span><br><span class="line">     <span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">         System.out.println(user);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// java 8 stream 方法引用</span></span><br><span class="line">     System.out.println(<span class="string">&quot;java 8 stream 方法引用&quot;</span>);</span><br><span class="line">     list.stream().sorted(Comparator.comparing(User::getAge)).forEach(user -&gt; System.out.println(user));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<p>—–排序前—–<br>User(name&#x3D;张三, age&#x3D;11)<br>User(name&#x3D;王五, age&#x3D;20)<br>User(name&#x3D;王五, age&#x3D;91)<br>User(name&#x3D;张三, age&#x3D;8)<br>User(name&#x3D;李四, age&#x3D;44)<br>User(name&#x3D;李四, age&#x3D;44)<br>User(name&#x3D;李四, age&#x3D;44)</p>
<p>—–排序后—–<br>java 8 前<br>User(name&#x3D;张三, age&#x3D;8)<br>User(name&#x3D;张三, age&#x3D;11)<br>User(name&#x3D;王五, age&#x3D;20)<br>User(name&#x3D;李四, age&#x3D;44)<br>User(name&#x3D;李四, age&#x3D;44)<br>User(name&#x3D;李四, age&#x3D;44)<br>User(name&#x3D;王五, age&#x3D;91)</p>
<p>java 8 stream 方法引用<br>User(name&#x3D;张三, age&#x3D;8)<br>User(name&#x3D;张三, age&#x3D;11)<br>User(name&#x3D;王五, age&#x3D;20)<br>User(name&#x3D;李四, age&#x3D;44)<br>User(name&#x3D;李四, age&#x3D;44)<br>User(name&#x3D;李四, age&#x3D;44)<br>User(name&#x3D;王五, age&#x3D;91)</p>
<p>List<Person> list &#x3D; map.entrySet().stream().sorted(Comparator.comparing(Map.Entry::getValue)).map(e -&gt; new Person(e.getKey(), e.getValue())).collect(Collectors.toList());</p>
<hr>
<h2 id="3、-filter"><a href="#3、-filter" class="headerlink" title="3、.filter()"></a>3、.filter()</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * filter 过滤.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFilter</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// 输出年龄大于50的人</span></span><br><span class="line">  System.out.println(<span class="string">&quot;-----过滤前-----&quot;</span>);</span><br><span class="line">  list.forEach(user -&gt; System.out.println(user));</span><br><span class="line">  System.out.println(<span class="string">&quot;-----过滤后-----&quot;</span>);</span><br><span class="line">  <span class="comment">// java 8 前</span></span><br><span class="line">  System.out.println(<span class="string">&quot;java 8 前&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span>(User user: list)&#123;</span><br><span class="line">    <span class="keyword">if</span> (user.getAge() &gt; <span class="number">50</span>) &#123;</span><br><span class="line">      System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// java 8 stream</span></span><br><span class="line">  System.out.println(<span class="string">&quot;java 8 stream&quot;</span>);</span><br><span class="line">  list.stream().filter((User user) -&gt; user.getAge() &gt; <span class="number">50</span>).forEach(user -&gt; System.out.println(user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制台&gt;</p>
<p>—–过滤前—–<br>User(name&#x3D;张三, age&#x3D;11)<br>User(name&#x3D;王五, age&#x3D;20)<br>User(name&#x3D;王五, age&#x3D;91)<br>User(name&#x3D;张三, age&#x3D;8)<br>User(name&#x3D;李四, age&#x3D;44)<br>User(name&#x3D;李四, age&#x3D;44)<br>User(name&#x3D;李四, age&#x3D;44)<br>—–过滤后—–<br>java 8 前<br>User(name&#x3D;王五, age&#x3D;91)<br>java 8 stream<br>User(name&#x3D;王五, age&#x3D;91)</p>
<hr>
<h2 id="4、-map"><a href="#4、-map" class="headerlink" title="4、.map()"></a>4、.map()</h2><h2 id="peek"><a href="#peek" class="headerlink" title="peek"></a>peek</h2><p>peek map 的区别就是是否有返回值</p>
<p>接收一个方法作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * map 映射.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMap</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// 只输出所有人的年龄</span></span><br><span class="line">  list.stream().forEach(user -&gt; System.out.println(user.getAge()));</span><br><span class="line">  System.out.println(<span class="string">&quot;映射后-----&gt;&quot;</span>);</span><br><span class="line">  List&lt;Integer&gt; ages = list.stream().map(user -&gt; user.getAge()).collect(Collectors.toList());</span><br><span class="line">  ages.forEach(age -&gt; System.out.println(age));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>console-&gt;</p>
<p>User(name&#x3D;张三, age&#x3D;11)<br>User(name&#x3D;王五, age&#x3D;20)<br>User(name&#x3D;王五, age&#x3D;91)<br>User(name&#x3D;张三, age&#x3D;8)<br>User(name&#x3D;李四, age&#x3D;44)<br>User(name&#x3D;李四, age&#x3D;44)<br>User(name&#x3D;李四, age&#x3D;44)<br>映射后—–&gt;<br>11<br>20<br>91<br>8<br>44<br>44<br>44</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 小写转大写</span></span><br><span class="line">List&lt;String&gt; words = Arrays.asList(<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;vvvv&quot;</span>, <span class="string">&quot;cccc&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;全部大写----&gt;&quot;</span>);</span><br><span class="line">List&lt;String&gt; collect = words.stream().map(s -&gt; s.toUpperCase()).collect(Collectors.toList());</span><br><span class="line">collect.forEach(s -&gt; System.out.println(s));</span><br></pre></td></tr></table></figure>

<p>console-&gt;</p>
<p>全部大写—-&gt;<br>AAA<br>VVVV<br>CCCC</p>
<h2 id="5、-limit（）"><a href="#5、-limit（）" class="headerlink" title="5、.limit（）"></a>5、.limit（）</h2><p>使用该方法截断</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * limit 截断.</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void testLimit() &#123;</span><br><span class="line">  // 从第三个开始截断，只输出前三个</span><br><span class="line">  System.out.println(&quot;-----截断前-----&quot;);</span><br><span class="line">  list.forEach(user -&gt; System.out.println(user));</span><br><span class="line">  System.out.println(&quot;-----截断后-----&quot;);</span><br><span class="line">  // java 8 前</span><br><span class="line">  System.out.println(&quot;java 8 前&quot;);</span><br><span class="line">  for (int i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">    System.out.println(list.get(i));</span><br><span class="line">  &#125;</span><br><span class="line">  // java 8 stream</span><br><span class="line">  System.out.println(&quot;java 8 stream&quot;);</span><br><span class="line">  list.stream().limit(3).forEach(user -&gt; System.out.println(user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制台&gt;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-----截断前-----</span><br><span class="line">User(name=张三, age=<span class="number">11</span>)</span><br><span class="line">User(name=王五, age=<span class="number">20</span>)</span><br><span class="line">User(name=王五, age=<span class="number">91</span>)</span><br><span class="line">User(name=张三, age=<span class="number">8</span>)</span><br><span class="line">User(name=李四, age=<span class="number">44</span>)</span><br><span class="line">User(name=李四, age=<span class="number">44</span>)</span><br><span class="line">User(name=李四, age=<span class="number">44</span>)</span><br><span class="line">-----截断后-----</span><br><span class="line">java <span class="number">8</span> 前</span><br><span class="line">User(name=张三, age=<span class="number">11</span>)</span><br><span class="line">User(name=王五, age=<span class="number">20</span>)</span><br><span class="line">User(name=王五, age=<span class="number">91</span>)</span><br><span class="line">java <span class="number">8</span> stream</span><br><span class="line"><span class="title function_">User</span><span class="params">(name=张三, age=<span class="number">11</span>)</span></span><br><span class="line">User(name=王五, age=<span class="number">20</span>)</span><br><span class="line">User(name=王五, age=<span class="number">91</span>)</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="5、-skip（）："><a href="#5、-skip（）：" class="headerlink" title="5、.skip（）："></a>5、.skip（）：</h2><p>与limit互斥，使用该方法跳过元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * skip 跳过.</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void testSkip() &#123;</span><br><span class="line">  // 跳过前三个元素，从第四个开始输出</span><br><span class="line">  System.out.println(&quot;-----跳过前-----&quot;);</span><br><span class="line">  list.forEach(user -&gt; System.out.println(user));</span><br><span class="line">  System.out.println(&quot;-----跳过后-----&quot;);</span><br><span class="line">  // java 8 前</span><br><span class="line">  System.out.println(&quot;java 8 前&quot;);</span><br><span class="line">  for (int i = 3; i &lt; list.size(); i++) &#123;</span><br><span class="line">    System.out.println(list.get(i));</span><br><span class="line">  &#125;</span><br><span class="line">  // java 8 stream</span><br><span class="line">  System.out.println(&quot;java 8 stream&quot;);</span><br><span class="line">  list.stream().skip(3).forEach(user -&gt; System.out.println(user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>console-&gt;</p>
<p>—–跳过前—–<br>User(name&#x3D;张三, age&#x3D;11)<br>User(name&#x3D;王五, age&#x3D;20)<br>User(name&#x3D;王五, age&#x3D;91)<br>User(name&#x3D;张三, age&#x3D;8)<br>User(name&#x3D;李四, age&#x3D;44)<br>User(name&#x3D;李四, age&#x3D;44)<br>User(name&#x3D;李四, age&#x3D;44)<br>—–跳过后—–<br>java 8 前<br>User(name&#x3D;张三, age&#x3D;8)<br>User(name&#x3D;李四, age&#x3D;44)<br>User(name&#x3D;李四, age&#x3D;44)<br>User(name&#x3D;李四, age&#x3D;44)<br>java 8 stream<br>User(name&#x3D;张三, age&#x3D;8)<br>User(name&#x3D;李四, age&#x3D;44)<br>User(name&#x3D;李四, age&#x3D;44)<br>User(name&#x3D;李四, age&#x3D;44)</p>
<hr>
<h2 id="6、-distinct（）："><a href="#6、-distinct（）：" class="headerlink" title="6、.distinct（）："></a>6、.distinct（）：</h2><ul>
<li>String</li>
</ul>
<p>使用 toList 接收处理完成的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">  list.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">  list.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">  list.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">  list.add(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">  list.add(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">  list.add(<span class="string">&quot;6&quot;</span>);</span><br><span class="line">  List&lt;String&gt; collect = list.stream().distinct().collect(Collectors.toList());</span><br><span class="line">  System.out.println(list);  <span class="comment">// [1, 1, 2, 4, 4, 6]</span></span><br><span class="line">  System.out.println(collect); <span class="comment">// [1, 2, 4, 6]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><ul>
<li>对象</li>
</ul>
<blockquote>
<p><strong>注意：必须重写对应泛型的hashCode（）和equals（）方法</strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * distinct 去重.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDistinct</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// 因为Arrays.asList() 返回的是Arrays的内部类ArrayList，操作remove，add会报错</span></span><br><span class="line">  List&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>(list);</span><br><span class="line">  <span class="comment">// 为list去除重复数据</span></span><br><span class="line">  System.out.println(<span class="string">&quot;-----去重前-----&quot;</span>);</span><br><span class="line">  list.forEach(user -&gt; System.out.println(user));</span><br><span class="line">  System.out.println(<span class="string">&quot;-----去重后-----&quot;</span>);</span><br><span class="line">  <span class="comment">// java 8 前</span></span><br><span class="line">  System.out.println(<span class="string">&quot;java 8 前&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; users.size() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> users.size() - <span class="number">1</span>; j &gt; i; j--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (users.get(j).getAge() == users.get(i).getAge() &amp;&amp; users.get(j).getName()</span><br><span class="line">          .equals(users.get(i).getName())) &#123;</span><br><span class="line">        users.remove(i);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// java 8 stream</span></span><br><span class="line">  System.out.println(<span class="string">&quot;java 8 stream&quot;</span>);</span><br><span class="line">  users.stream().distinct().forEach(user -&gt; System.out.println(user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制台&gt;</p>
<p>—–去重前—–<br>User(name&#x3D;张三, age&#x3D;11)<br>User(name&#x3D;王五, age&#x3D;20)<br>User(name&#x3D;王五, age&#x3D;91)<br>User(name&#x3D;张三, age&#x3D;8)<br>User(name&#x3D;李四, age&#x3D;44)<br>User(name&#x3D;李四, age&#x3D;44)<br>User(name&#x3D;李四, age&#x3D;44)<br>—–去重后—–<br>java 8 前<br>User(name&#x3D;张三, age&#x3D;11)<br>User(name&#x3D;王五, age&#x3D;20)<br>User(name&#x3D;王五, age&#x3D;91)<br>User(name&#x3D;张三, age&#x3D;8)<br>User(name&#x3D;李四, age&#x3D;44)<br>java 8 stream<br>User(name&#x3D;张三, age&#x3D;11)<br>User(name&#x3D;王五, age&#x3D;20)<br>User(name&#x3D;王五, age&#x3D;91)<br>User(name&#x3D;张三, age&#x3D;8)<br>User(name&#x3D;李四, age&#x3D;44)</p>
<hr>
<p>根据上述方法，完成去重+按照年龄大于40以后从小到大+只取前二</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 去重+按照年龄大于40以后从小到大+只取前二</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void demo() &#123;</span><br><span class="line">  list.stream().distinct().filter(user -&gt; user.getAge() &gt; 40).sorted(</span><br><span class="line">      Comparator.comparing(User::getAge)).limit(2).forEach(user -&gt; System.out</span><br><span class="line">      .println(user));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>console-&gt;</p>
<hr>
<h2 id="7、max，min，sum，avg，count"><a href="#7、max，min，sum，avg，count" class="headerlink" title="7、max，min，sum，avg，count"></a>7、max，min，sum，avg，count</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试计算.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testNum</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">IntSummaryStatistics</span> <span class="variable">num</span> <span class="operator">=</span> list.stream().mapToInt(u -&gt; u.getAge())</span><br><span class="line">      .summaryStatistics();</span><br><span class="line">  System.out.println(<span class="string">&quot;总共人数：&quot;</span> + num.getCount());</span><br><span class="line">  System.out.println(<span class="string">&quot;平均年龄：&quot;</span> + num.getAverage());</span><br><span class="line">  System.out.println(<span class="string">&quot;最大年龄：&quot;</span> + num.getMax());</span><br><span class="line">  System.out.println(<span class="string">&quot;最小年龄：&quot;</span> + num.getMin());</span><br><span class="line">  System.out.println(<span class="string">&quot;年龄之和：&quot;</span> + num.getSum());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>console-&gt;</p>
<p>总共人数：7<br>平均年龄：37.42857142857143<br>最大年龄：91<br>最小年龄：8<br>年龄之和：262</p>
<hr>
<h2 id="8、-collect"><a href="#8、-collect" class="headerlink" title="8、.collect(**)"></a>8、.collect(**)</h2><h3 id="Collectors-joining"><a href="#Collectors-joining" class="headerlink" title="Collectors.joining()"></a>Collectors.joining()</h3><p>使用collect()做字符串join</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 使用Collectors.joining()拼接字符串</span></span><br><span class="line">    Stream&lt;String&gt; stream = Stream.of(<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>);</span><br><span class="line"><span class="comment">//    String s = stream.collect(Collectors.joining()); // 张三李四王五赵六</span></span><br><span class="line"><span class="comment">//    String s = stream.collect(Collectors.joining(&quot;-&quot;)); // 张三-李四-王五-赵六</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> stream.collect(Collectors.joining(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;(&quot;</span>, <span class="string">&quot;)&quot;</span>)); <span class="comment">// (张三-李四-王五-赵六)</span></span><br><span class="line">    System.out.println(s);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>控制台</p>
<p>(张三-李四-王五-赵六)</p>
<h3 id="Collectors-toMap"><a href="#Collectors-toMap" class="headerlink" title="Collectors.toMap"></a>Collectors.toMap</h3><h4 id="-2"><a href="#-2" class="headerlink" title=""></a></h4><p> <code>【强制】</code>在使用<code>java.util.stream.Collectors</code> 类的 <code>toMap()</code>方法转为 Map 集合时，一定要使<br> 用含有参数类型为<code>BinaryOperator</code>，参数名为<code>mergeFunction</code> 的方法，否则当出现相同<code>key</code><br> 值时会抛出 <code>IllegalStateException</code> 异常。<br> <strong>说明</strong>：参数 <code>mergeFunction</code> 的作用是当出现 <code>key</code> 重复时，自定义对<code>value</code> 的处理策略。<br> <strong>正例</strong>：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">List</span>&lt;Pair&lt;<span class="built_in">String</span>, Double&gt;&gt; pairArrayList = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">3</span>);</span><br><span class="line">pairArrayList.add(<span class="keyword">new</span> Pair&lt;&gt;(<span class="string">&quot;version&quot;</span>, <span class="number">12.10</span>));</span><br><span class="line">pairArrayList.add(<span class="keyword">new</span> Pair&lt;&gt;(<span class="string">&quot;version&quot;</span>, <span class="number">12.19</span>));</span><br><span class="line">pairArrayList.add(<span class="keyword">new</span> Pair&lt;&gt;(<span class="string">&quot;version&quot;</span>, <span class="number">6.28</span>));</span><br><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>, Double&gt; map = pairArrayList.stream().collect(</span><br><span class="line"><span class="comment">// 生成的 map 集合中只有一个键值对：&#123;version=6.28&#125;</span></span><br><span class="line">Collectors.toMap(Pair::getKey, Pair::getValue, (v1, v2) -&gt; v2));</span><br></pre></td></tr></table></figure>





<p><strong>反例</strong>：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span>[] departments = new <span class="type">String</span>[] &#123;<span class="string">&quot;iERP&quot;</span>, <span class="string">&quot;iERP&quot;</span>, <span class="string">&quot;EIBU&quot;</span>&#125;;</span><br><span class="line"><span class="comment">// 抛出 IllegalStateException 异常</span></span><br><span class="line">Map&lt;Integer, <span class="type">String</span>&gt; map = Arrays.<span class="title function_ invoke__">stream</span>(departments)</span><br><span class="line">.<span class="title function_ invoke__">collect</span>(Collectors.<span class="title function_ invoke__">toMap</span>(<span class="type">String</span>::hashCode, <span class="type">str</span> <span class="punctuation">-&gt;</span> <span class="type">str</span>));</span><br></pre></td></tr></table></figure>



<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">userList.<span class="title function_ invoke__">stream</span>().<span class="title function_ invoke__">collect</span>(Collectors.<span class="title function_ invoke__">toMap</span>(User::getId, User::getName, (n1, n2) <span class="punctuation">-&gt;</span> n1 + n2));</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>第四个参数<code>mapSupplier</code>用于返回一个任意类型的Map实例，比如我们希望返回的<code>Map</code>是根据 <code>Key</code> 排序的，可以使用如下写法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; userList = Lists.<span class="title function_ invoke__">newArrayList</span>(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">User</span>().<span class="title function_ invoke__">setId</span>(<span class="string">&quot;B&quot;</span>).<span class="title function_ invoke__">setName</span>(<span class="string">&quot;张三&quot;</span>),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">User</span>().<span class="title function_ invoke__">setId</span>(<span class="string">&quot;A&quot;</span>).<span class="title function_ invoke__">setName</span>(<span class="string">&quot;李四&quot;</span>),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">User</span>().<span class="title function_ invoke__">setId</span>(<span class="string">&quot;C&quot;</span>).<span class="title function_ invoke__">setName</span>(<span class="string">&quot;王五&quot;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">userList.<span class="title function_ invoke__">stream</span>().<span class="title function_ invoke__">collect</span>(Collectors.<span class="title function_ invoke__">toMap</span>(<span class="title class_">User</span>::<span class="variable constant_">getId</span>, <span class="title class_">User</span>::<span class="variable constant_">getName</span>, (n1, n2) -&gt; n1, <span class="title class_">TreeMap</span>::<span class="variable constant_">new</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果：</span></span><br><span class="line">A-&gt; 李四 </span><br><span class="line">B-&gt; 张三 </span><br><span class="line">C-&gt; 王五 </span><br></pre></td></tr></table></figure>

<p>或者转化为<code>ConcurrentMap</code>:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">userList<span class="selector-class">.stream</span>()<span class="selector-class">.collect</span>(</span><br><span class="line">    Collectors<span class="selector-class">.toMap</span>(User::getId, User::getName, (n1, n2) -&gt; n1, ConcurrentHashMap::new)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><p>在使用<code>java.util.stream.Collectors</code> 类的 <code>toMap()</code>方法转为 <code>Map</code>集合时，一定要注<br> 意当<code>value</code>为 <code>null</code>时会抛 <code>NPE</code> 异常。<br> 在 <code>java.util.HashMap</code>的 <code>merge</code> 方法里会进行如下的判断：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">value</span> == <span class="literal">null</span> || remappingFunction == <span class="literal">null</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br></pre></td></tr></table></figure>



<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="9、flatMap-："><a href="#9、flatMap-：" class="headerlink" title="9、flatMap()："></a>9、flatMap()：</h3><p>对每个元素执行mapper指定的操作，并用所有mapper返回的Stream中的元素组成一个新的Stream作为最终返回结果，通俗易懂就是将原来的stream中的所有元素都展开组成一个新的stream</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * flatMap .</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFlatMap</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="comment">//创建一个 装有两个泛型为integer的集合</span></span><br><span class="line">   Stream&lt;List&lt;Integer&gt;&gt; stream = Stream.of(Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), Arrays.asList(<span class="number">4</span>, <span class="number">5</span>));</span><br><span class="line">   <span class="comment">// 将两个合为一个</span></span><br><span class="line">   Stream&lt;Integer&gt; integerStream = stream.flatMap(</span><br><span class="line">       (Function&lt;List&lt;Integer&gt;, Stream&lt;Integer&gt;&gt;) integers -&gt; integers.stream());</span><br><span class="line">   <span class="comment">// 为新的集合</span></span><br><span class="line">   List&lt;Integer&gt; collect = integerStream.collect(toList());</span><br><span class="line">   System.out.println(<span class="string">&quot;新stream大小:&quot;</span>+collect.size());</span><br><span class="line">   System.out.println(<span class="string">&quot;-----合并后-----&quot;</span>);</span><br><span class="line">   collect.forEach(o -&gt; System.out.println(o));</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>console-&gt;</p>
<hr>
<h3 id="10、第一个元素-findFirst"><a href="#10、第一个元素-findFirst" class="headerlink" title="10、第一个元素(findFirst)"></a>10、第一个元素(findFirst)</h3><p>使用该方法获取第一个元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COPY/**</span><br><span class="line"> * findFirst 获取第一个元素.</span><br><span class="line"> */</span><br><span class="line">@Test</span><br><span class="line">public void testFindFirst()&#123;</span><br><span class="line">  User user = list.stream().findFirst().get();</span><br><span class="line">  System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>console-&gt;</p>
<p><img src="https://yinggangna.github.io/2021/04/23/1.8%E6%96%B0%E7%89%B9%E6%80%A7/Stream%E6%B5%81%E7%9A%84%E4%BD%BF%E7%94%A8/image-20210420184809569.png" alt="image-20210420184809569"></p>
<hr>
<h3 id="11、reduce-："><a href="#11、reduce-：" class="headerlink" title="11、reduce() ："></a>11、reduce() ：</h3><p>多面手</p>
<p><em>reduce</em> 操作可以实现从一组元素中生成一个值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sum()`、、、等都是*reduce*操作，将他们单独设为函数只是因为常用`max()``min()``count()</span><br></pre></td></tr></table></figure>

<p>例如：找到年龄最大的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">()</span> &#123;</span><br><span class="line">  Optional&lt;User&gt; reduce = list.stream().reduce((s1, s2) -&gt; s1.getAge() &gt; s2.getAge() ? s1 : s2);</span><br><span class="line">  <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> reduce.get();</span><br><span class="line">  System.out.println(user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">  Optional&lt;User&gt; max = list.stream().max(Comparator.comparing(User::getAge));</span><br><span class="line">  <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> max.get();</span><br><span class="line">  System.out.println(user);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://yinggangna.github.io/2021/04/23/1.8%E6%96%B0%E7%89%B9%E6%80%A7/Stream%E6%B5%81%E7%9A%84%E4%BD%BF%E7%94%A8/image-20210420184816705.png" alt="image-20210420184816705"></p>
<p>例如：求所有人的年龄和</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">reduce</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// 求年龄之和</span></span><br><span class="line">  <span class="type">Integer</span> <span class="variable">reduce</span> <span class="operator">=</span> list.stream().reduce(<span class="number">0</span>, <span class="comment">// 该参数为初始值</span></span><br><span class="line">      (integer, user) -&gt; integer + user.getAge(), <span class="comment">// 该参数为累加器，新元素如何累加</span></span><br><span class="line">      (integer, integer2) -&gt; integer + integer2);<span class="comment">// 多个部分如何合并</span></span><br><span class="line">  System.out.println(reduce);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>console</p>
<p><img src="https://yinggangna.github.io/2021/04/23/1.8%E6%96%B0%E7%89%B9%E6%80%A7/Stream%E6%B5%81%E7%9A%84%E4%BD%BF%E7%94%A8/image-20210420184823841.png" alt="image-20210420184823841"></p>
<hr>
<h3 id="13、Collectors-joining"><a href="#13、Collectors-joining" class="headerlink" title="13、Collectors.joining()"></a>13、Collectors.joining()</h3><p>集合转字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">testJoining</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">//直接相连</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">authors</span> <span class="operator">=</span> list.stream().map(User::getName).collect(Collectors.joining());</span><br><span class="line">      System.out.println(<span class="string">&quot;获取作者集合字符串： &quot;</span> + authors);<span class="comment">//张三李四王五张三李四王五张三李四王五张三张三张三</span></span><br><span class="line">      <span class="comment">//增加连接符 - distinct去除重复元素</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">authorsJoin</span> <span class="operator">=</span> list.stream().map(User::getName).distinct().collect(Collectors.joining(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">      System.out.println(<span class="string">&quot;获取作者集合字符串-有连接符： &quot;</span> + authorsJoin);<span class="comment">//张三,李四,王五</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">collect</span> <span class="operator">=</span> list.stream().map(User::getName).distinct().collect(Collectors.joining(<span class="string">&quot;,&quot;</span>, <span class="string">&quot;[&quot;</span>, <span class="string">&quot;]&quot;</span>));</span><br><span class="line">      System.out.println(<span class="string">&quot;获取作者集合字符串-有连接符-有开始结束符号： &quot;</span> + collect);<span class="comment">//[张三,李四,王五]</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 获取对象集合指定的字段或数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMapping</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">      List&lt;String&gt; authorList = list.stream().map(User::getName).collect(toList());</span><br><span class="line">      System.out.println(<span class="string">&quot;获取指定字段的集合： &quot;</span> + authorList);<span class="comment">//[张三, 李四, 王五, 张三, 李四, 王五, 张三, 李四, 王五, 张三, 张三, 张三]</span></span><br><span class="line"></span><br><span class="line">      List&lt;String&gt; authorDistinct = list.stream().map(User::getName).distinct().collect(toList());</span><br><span class="line">      System.out.println(<span class="string">&quot;获取指定字段的集合： &quot;</span> + authorDistinct);<span class="comment">//[张三, 李四, 王五]</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="14、groupingBy（）"><a href="#14、groupingBy（）" class="headerlink" title="14、groupingBy（）"></a>14、groupingBy（）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分组</span></span><br><span class="line"><span class="comment"> * 此处需要注意，返回的Collector收集器是不支持并发的</span></span><br><span class="line"><span class="comment"> * 当需要进行排序的时候可使用TreeMap进行排序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGroupBy</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//根据人员分组</span></span><br><span class="line">        <span class="comment">//&lt;name 对象集合&gt;</span></span><br><span class="line">    Map&lt;String, List&lt;User&gt;&gt; collect = list.stream().collect(Collectors.groupingBy(User::getName));</span><br><span class="line">    System.out.println(collect);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//根据人员分组计数</span></span><br><span class="line">        <span class="comment">//&lt;name 对象数量&gt;</span></span><br><span class="line">    Map&lt;String, Long&gt; collect1 = list.stream().collect(Collectors.groupingBy(User::getName, Collectors.counting()));</span><br><span class="line">    System.out.println(collect1);</span><br><span class="line">    <span class="comment">//获取人员的平均值 -默认是hashMap是无序的</span></span><br><span class="line">    Map&lt;String, Double&gt; sorted = list.stream().collect(Collectors.groupingBy(User::getName, Collectors.averagingDouble(item -&gt; item.getAge())));</span><br><span class="line">    System.out.println(<span class="string">&quot;获取每组年龄的平均值： &quot;</span> + sorted);</span><br><span class="line">    <span class="comment">//倒序排列-key的倒序-自定义一个比较器</span></span><br><span class="line">    Map&lt;String, Double&gt; sortedTreeMapComparator = list.stream().collect(Collectors.groupingBy(User::getName, () -&gt; <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(Comparator.reverseOrder()), Collectors.averagingDouble((item -&gt; item.getAge()))));</span><br><span class="line">    System.out.println(<span class="string">&quot;获取人员的平均值-倒序： &quot;</span> + sortedTreeMapComparator);</span><br><span class="line">    <span class="comment">//倒序排列-key的倒序-treeMp指定是降序map，调用descendingMap</span></span><br><span class="line">    Map&lt;String, Double&gt; sortedTreeMap = list.stream().collect(Collectors.groupingBy(User::getName, () -&gt; <span class="keyword">new</span> <span class="title class_">TreeMap</span>().descendingMap(), Collectors.averagingDouble((item -&gt; item.getAge()))));</span><br><span class="line">    System.out.println(<span class="string">&quot;获取人员的平均值-倒序： &quot;</span> + sortedTreeMap);<span class="comment">/**/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure>

<p>线程安全的</p>
<p> ↓</p>
<p> ↓</p>
<p> ↓</p>
<h3 id="15、groupingByConcurrent"><a href="#15、groupingByConcurrent" class="headerlink" title="15、groupingByConcurrent"></a>15、groupingByConcurrent</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分组能够保证线程安全</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGroupByConcurrent</span><span class="params">()</span> &#123;</span><br><span class="line">    ConcurrentMap&lt;String, List&lt;User&gt;&gt; collect = list.stream().collect(Collectors.groupingByConcurrent(User::getName));</span><br><span class="line">    System.out.println(<span class="string">&quot;根据人员名称进行分组： &quot;</span> + collect);</span><br><span class="line">    ConcurrentMap&lt;String, Long&gt; collect1 = list.stream().collect(Collectors.groupingByConcurrent(User::getName, Collectors.counting()));</span><br><span class="line">    System.out.println(<span class="string">&quot;根据人员进行分组并计算数量： &quot;</span> + collect1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="1-map一个新的对象集合"><a href="#1-map一个新的对象集合" class="headerlink" title="1.map一个新的对象集合"></a>1.map一个新的对象集合</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">List&lt;CartDTO&gt; cartDTOList = orderDetailList.stream()</span><br><span class="line">                .map(e -&gt; <span class="keyword">new</span> <span class="title class_">CartDTO</span>(e.getProductId(), e.getProductQuantity()))</span><br><span class="line">                .collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<h3 id="2-集合交集"><a href="#2-集合交集" class="headerlink" title="2.集合交集"></a>2.集合交集</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">交集 (list1 + list2)</span><br><span class="line"></span><br><span class="line">List&lt;T&gt; intersect = list1.stream()</span><br><span class="line">                         .filter(list2::contains)</span><br><span class="line">                         .collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<h3 id="3-集合差集"><a href="#3-集合差集" class="headerlink" title="3.集合差集"></a>3.集合差集</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//(list1 - list2)</span></span><br><span class="line">List&lt;String&gt; reduce1 = list1.stream().filter(item -&gt; !list2.contains(item)).collect(toList());</span><br><span class="line"></span><br><span class="line"><span class="comment">//(list2 - list1)</span></span><br><span class="line">List&lt;String&gt; reduce2 = list2.stream().filter(item -&gt; !list1.contains(item)).collect(toList());</span><br></pre></td></tr></table></figure>

<h3 id="4-集合并集"><a href="#4-集合并集" class="headerlink" title="4.集合并集"></a>4.集合并集</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">COPY<span class="comment">//使用并行流</span></span><br><span class="line">List&lt;String&gt; listAll = list1.parallelStream().collect(toList());</span><br><span class="line">List&lt;String&gt; listAll2 = list2.parallelStream().collect(toList());</span><br><span class="line">listAll.addAll(listAll2);</span><br></pre></td></tr></table></figure>

<h3 id="5-去重并集"><a href="#5-去重并集" class="headerlink" title="5.去重并集"></a>5.去重并集</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">COPYList&lt;String&gt; listAllDistinct = listAll.stream()</span><br><span class="line">.distinct().collect(toList());</span><br></pre></td></tr></table></figure>

<h3 id="6-从List中过滤出一个元素"><a href="#6-从List中过滤出一个元素" class="headerlink" title="6.从List中过滤出一个元素"></a>6.从List中过滤出一个元素</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">match</span> <span class="operator">=</span> users.stream()</span><br><span class="line">.filter((user) -&gt; user.getId() == <span class="number">1</span>).findAny().get();</span><br></pre></td></tr></table></figure>

<h3 id="7-map转集合"><a href="#7-map转集合" class="headerlink" title="7.map转集合"></a>7.map转集合</h3><p>Set&lt;**Map.Entry**&lt;Integer, Student&gt;&gt; entries &#x3D; map1.entrySet();<br>        for (Map.Entry&lt;Integer, Student&gt; entry : entries) {<br>            Integer key &#x3D; entry.<strong>getKey()</strong>;<br>            Student value &#x3D; entry.<strong>getValue()</strong>;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">List&lt;Person&gt; list = map.entrySet().stream().sorted(Comparator.comparing(e -&gt; e.getKey()))</span><br><span class="line">		.map(e -&gt; <span class="keyword">new</span> <span class="title class_">Person</span>(e.getKey(), e.getValue())).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">List&lt;Person&gt; list = map.entrySet().stream().sorted(Comparator.comparing(Map.Entry::getValue)).map(e -&gt; <span class="keyword">new</span> <span class="title class_">Person</span>(e.getKey(), e.getValue())).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">List&lt;Person&gt; list = map.entrySet().stream().sorted(Map.Entry.comparingByKey()).map(e -&gt; <span class="keyword">new</span> <span class="title class_">Person</span>(e.getKey(), e.getValue())).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>













<h3 id="8-Stream-of-字符串转集合"><a href="#8-Stream-of-字符串转集合" class="headerlink" title="8.Stream.of 字符串转集合"></a>8.Stream.of 字符串转集合</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">List&lt;Integer&gt; collectList = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">        .collect(Collectors.toList());</span><br><span class="line">System.out.println(<span class="string">&quot;collectList: &quot;</span> + collectList);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>&#x2F;&#x2F; 打印结果 collectList: [1, 2, 3, 4]</p>
<h3 id="9-转map集合-并map循环打印"><a href="#9-转map集合-并map循环打印" class="headerlink" title="9.转map集合 并map循环打印"></a>9.转map集合 并map循环打印</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    List&lt;Student&gt; studentlist = Arrays.asList(</span><br><span class="line">            <span class="comment">// name，age</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1</span>,<span class="string">&quot;张三&quot;</span>, <span class="number">11</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">2</span>,<span class="string">&quot;王五&quot;</span>, <span class="number">20</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">3</span>,<span class="string">&quot;王五&quot;</span>, <span class="number">91</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">4</span>,<span class="string">&quot;张三&quot;</span>, <span class="number">8</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">5</span>,<span class="string">&quot;李四&quot;</span>, <span class="number">44</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">6</span>,<span class="string">&quot;李四&quot;</span>, <span class="number">44</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">7</span>,<span class="string">&quot;李四&quot;</span>, <span class="number">44653</span>++++++</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">map</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//map value 为对象 student</span></span><br><span class="line">        Map&lt;Integer, Student&gt; map1 = studentlist.stream().collect(Collectors.toMap(Student::getId, student -&gt; student));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历打印结果</span></span><br><span class="line">        map1.forEach((key, value) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;key: &quot;</span> + key + <span class="string">&quot;    value: &quot;</span> + value);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//map value 为对象中的属性</span></span><br><span class="line">        Map&lt;Integer, String&gt; map2 = studentlist.stream().collect(Collectors.toMap(Student::getId, Student::getName));</span><br><span class="line">        map2.forEach((key, value) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;key: &quot;</span> + key + <span class="string">&quot;    value: &quot;</span> + value);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>key: 1    value: Student(id&#x3D;1, name&#x3D;张三, age&#x3D;11)<br>key: 2    value: Student(id&#x3D;2, name&#x3D;王五, age&#x3D;20)<br>key: 3    value: Student(id&#x3D;3, name&#x3D;王五, age&#x3D;91)<br>key: 4    value: Student(id&#x3D;4, name&#x3D;张三, age&#x3D;8)<br>key: 5    value: Student(id&#x3D;5, name&#x3D;李四, age&#x3D;44)<br>key: 6    value: Student(id&#x3D;6, name&#x3D;李四, age&#x3D;44)<br>key: 7    value: Student(id&#x3D;7, name&#x3D;李四, age&#x3D;44)</p>
<p>key: 1    value: 张三<br>key: 2    value: 王五<br>key: 3    value: 王五<br>key: 4    value: 张三<br>key: 5    value: 李四<br>key: 6    value: 李四<br>key: 7    value: 李四</p>
<h3 id="10-列表集合转-地图"><a href="#10-列表集合转-地图" class="headerlink" title="10.列表集合转 地图"></a>10.列表集合转 地图</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*使用Collectors.toMap形式*/</span><br><span class="line">Map result = peopleList.stream().collect(Collectors.toMap(p -&gt; p.name, p -&gt; p.age, (k1, k2) -&gt; k1));</span><br><span class="line">//其中Collectors.toMap方法的第三个参数为键值重复处理策略，如果不传入第三个参数，当有相同的键时，会抛出一个IlleageStateException。</span><br><span class="line"></span><br><span class="line">//或者</span><br><span class="line">Map&lt;Integer, String&gt; result1 = list.stream().collect(Collectors.toMap(Hosting::getId, Hosting::getName));</span><br><span class="line">//List&lt;People&gt; -&gt; Map&lt;String,Object&gt;</span><br><span class="line">List&lt;People&gt; peopleList = new ArrayList&lt;&gt;();</span><br><span class="line">peopleList.add(new People(&quot;test1&quot;, &quot;111&quot;));</span><br><span class="line">peopleList.add(new People(&quot;test2&quot;, &quot;222&quot;));</span><br><span class="line">Map result = peopleList.stream().collect(HashMap::new,(map,p)-&gt;map.put(p.name,p.age),Map::putAll);</span><br></pre></td></tr></table></figure>

<h3 id="11-List转-Map"><a href="#11-List转-Map" class="headerlink" title="11.List转 Map&lt;Integer, Apple&gt;"></a>11.List转 Map&lt;Integer, Apple&gt;</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * List&lt;Apple&gt; -&gt; Map&lt;Integer,Apple&gt;</span><br><span class="line"> * 需要注意的是：</span><br><span class="line"> * toMap 如果集合对象有重复的key，会报错Duplicate key ....</span><br><span class="line"> *  apple1,apple12的id都为1。</span><br><span class="line"> *  可以用 (k1,k2)-&gt;k1 来设置，如果有重复的key,则保留key1,舍弃key2</span><br><span class="line"> </span><br><span class="line"> Collectors.toMap(Apple::getId, a -&gt; a,(k1, k2) -&gt; k1)</span><br><span class="line"> Apple::getId   key</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> */</span><br><span class="line">Map&lt;Integer, Apple&gt; appleMap = appleList.stream().collect(Collectors.toMap(Apple::getId, a -&gt; a,(k1, k2) -&gt; k1));</span><br></pre></td></tr></table></figure>

<h3 id="12-list转-List"><a href="#12-list转-List" class="headerlink" title="12.list转 List&lt;Map&lt;String,Object&gt;&gt;"></a>12.list转 List&lt;Map&lt;String,Object&gt;&gt;</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">List&lt;Map&lt;String,Object&gt;&gt; personToMap = peopleList.stream().map((p) -&gt; &#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">    map.put(&quot;name&quot;, p.name);</span><br><span class="line">    map.put(&quot;age&quot;, p.age);</span><br><span class="line">    return map;</span><br><span class="line">&#125;).collect(Collectors.toList());</span><br><span class="line">//或者</span><br><span class="line">List&lt;Map&lt;String,Object&gt;&gt; personToMap = peopleList.stream().collect(ArrayList::new, (list, p) -&gt; &#123;</span><br><span class="line">   Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">    map.put(&quot;name&quot;, p.name);</span><br><span class="line">    map.put(&quot;age&quot;, p.age);</span><br><span class="line">    list.add(map);</span><br><span class="line">&#125;, List::addAll);</span><br></pre></td></tr></table></figure>

<p>字典查询和数据转换 toMap时，如果value为null,会报空指针异常<br>解决办法一：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COPYMap&lt;String, List&lt;Dict&gt;&gt; resultMaps = Arrays.stream(dictTypes)</span><br><span class="line">.collect(Collectors.toMap(i -&gt; i, i -&gt; Optional.ofNullable(dictMap.get(i)).orElse(new ArrayList&lt;&gt;()), (k1, k2) -&gt; k2));</span><br></pre></td></tr></table></figure>

<p>解决办法二：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COPYMap&lt;String, List&lt;Dict&gt;&gt; resultMaps = Arrays.stream(dictTypes)</span><br><span class="line">.filter(i -&gt; dictMap.get(i) != null).collect(Collectors.toMap(i -&gt; i, dictMap::get, (k1, k2) -&gt; k2));</span><br></pre></td></tr></table></figure>

<p>解决办法三：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COPYMap&lt;String, String&gt; memberMap = list.stream().collect(HashMap::new, (m,v)-&gt;</span><br><span class="line">    m.put(v.getId(), v.getImgPath()),HashMap::putAll);</span><br><span class="line">System.out.println(memberMap);</span><br></pre></td></tr></table></figure>

<p>解决办法四：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COPYMap&lt;String, String&gt; memberMap = new HashMap&lt;&gt;();</span><br><span class="line">list.forEach((answer) -&gt; memberMap.put(answer.getId(), answer.getImgPath()));</span><br><span class="line">System.out.println(memberMap);</span><br><span class="line"></span><br><span class="line">Map&lt;String, String&gt; memberMap = new HashMap&lt;&gt;();</span><br><span class="line">for (Member member : list) &#123;</span><br><span class="line">    memberMap.put(member.getId(), member.getImgPath());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>假设有一个User实体类，有方法getId(),getName(),getAge()等方法，现在想要将User类型的流收集到一个Map中，示例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COPYStream&lt;User&gt; userStream = Stream.of(new User(0, &quot;张三&quot;, 18), new User(1, &quot;张四&quot;, 19), new User(2, &quot;张五&quot;, 19), new User(3, &quot;老张&quot;, 50));</span><br><span class="line"></span><br><span class="line">Map&lt;Integer, User&gt; userMap = userSteam.collect(Collectors.toMap(User::getId, item -&gt; item));</span><br><span class="line">//&#123;0=Userr(id=0, name=张三, age=18), 1=Userr(id=1, name=张四, age=19), 2=Userr(id=2, name=张五, age=19), 3=Userr(id=3, name=老张, age=50)&#125;</span><br></pre></td></tr></table></figure>

<p>假设要得到按年龄分组的Map&lt;Integer,List&gt;,可以按这样写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COPYMap&lt;Integer, List&lt;User&gt;&gt; ageMap = userStream.collect(Collectors.toMap(User::getAge, Collections::singletonList, (a, b) -&gt; &#123;</span><br><span class="line">            List&lt;User&gt; resultList = new ArrayList&lt;&gt;(a);</span><br><span class="line">            resultList.addAll(b);</span><br><span class="line">            return resultList;</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">Map&lt;Integer, String&gt; map = persons</span><br><span class="line">    .stream()</span><br><span class="line">    .collect(Collectors.toMap(</span><br><span class="line">        p -&gt; p.age,</span><br><span class="line">        p -&gt; p.nam</span><br><span class="line">        .0e,</span><br><span class="line">        (name1, name2) -&gt; name1 + &quot;;&quot; + name2));</span><br><span class="line"></span><br><span class="line">System.out.println(map);</span><br><span class="line">// &#123;18=Max, 23=Peter;Pamela, 12=David&#125;</span><br></pre></td></tr></table></figure>

<h3 id="13-Map-转-另一个Map"><a href="#13-Map-转-另一个Map" class="headerlink" title="13.Map 转 另一个Map"></a>13.Map 转 另一个Map</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COPY//示例1 Map&lt;String, List&lt;String&gt;&gt; 转 Map&lt;String,User&gt;</span><br><span class="line">Map&lt;String,List&lt;String&gt;&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">map.put(&quot;java&quot;, Arrays.asList(&quot;1.7&quot;, &quot;1.8&quot;));</span><br><span class="line">map.entrySet().stream();</span><br><span class="line"></span><br><span class="line">@Getter</span><br><span class="line">@Setter</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">public static class User&#123;</span><br><span class="line">    private List&lt;String&gt; versions;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Map&lt;String, User&gt; collect = map.entrySet().stream()</span><br><span class="line">                .collect(Collectors.toMap(</span><br><span class="line">                        item -&gt; item.getKey(),</span><br><span class="line">                        item -&gt; new User(item.getValue())));</span><br><span class="line"></span><br><span class="line">//示例2 Map&lt;String,Integer&gt;  转 Map&lt;String,Double&gt;</span><br><span class="line">Map&lt;String, Integer&gt; pointsByName = new HashMap&lt;&gt;();</span><br><span class="line">Map&lt;String, Integer&gt; maxPointsByName = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">Map&lt;String, Double&gt; gradesByName = pointsByName.entrySet().stream()</span><br><span class="line">        .map(entry -&gt; new AbstractMap.SimpleImmutableEntry&lt;&gt;(</span><br><span class="line">                entry.getKey(), ((double) entry.getValue() /</span><br><span class="line">                        maxPointsByName.get(entry.getKey())) * 100d))</span><br><span class="line">        .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));</span><br></pre></td></tr></table></figure>

<h3 id="14-List-String-转String"><a href="#14-List-String-转String" class="headerlink" title="14.List&lt; String&gt; 转String"></a>14.List&lt; String&gt; 转String</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COPY//java8 String.join 方式</span><br><span class="line">List&lt;String&gt; webs = Arrays.asList(&quot;voidcc.com&quot;, &quot;voidmvn.com&quot;, &quot;voidtool.com&quot;);</span><br><span class="line">//webs 必须是List&lt;String&gt;</span><br><span class="line">String allwebs = String.join(&quot;,&quot;, webs);</span><br><span class="line">System.out.println(allwebs);</span><br><span class="line"></span><br><span class="line">//stream</span><br><span class="line">List&lt;String&gt; webs = Arrays.asList(&quot;voidcc.com&quot;, &quot;voidmvn.com&quot;, &quot;voidtool.com&quot;);</span><br><span class="line">String allwebs = webs.stream().collect(Collectors.joining(&quot;,&quot;));</span><br><span class="line">System.out.println(allwebs);</span><br></pre></td></tr></table></figure>

<h3 id="15-Collectors-toSet"><a href="#15-Collectors-toSet" class="headerlink" title="15.Collectors toSet"></a>15.Collectors toSet</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COPYSet&lt;String&gt; result = Stream.of(&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;, &quot;aa&quot;).collect(HashSet::new, HashSet::add, HashSet::addAll);</span><br><span class="line">//Collectors类中已经预定义好了toList，toSet，toMap，toCollection等方便使用的方法，所以以上代码还可以简化如下：</span><br><span class="line">Set&lt;String&gt; result2 = Stream.of(&quot;aa&quot;, &quot;bb&quot;, &quot;cc&quot;, &quot;aa&quot;).collect(Collectors.toSet());</span><br><span class="line"></span><br><span class="line">Set&lt;Integer&gt; collectSet = Stream.of(1, 2, 3, 4).collect(Collectors.toSet());</span><br><span class="line">System.out.println(&quot;collectSet: &quot; + collectSet);</span><br><span class="line">// 打印结果 collectSet: [1, 2, 3, 4]</span><br><span class="line"></span><br><span class="line">Stack stack1 = stream.collect(Collectors.toCollection(Stack::new));</span><br><span class="line">// collect toString</span><br><span class="line">String str = stream.collect(Collectors.joining()).toString();</span><br></pre></td></tr></table></figure>

<h3 id="16-排序"><a href="#16-排序" class="headerlink" title="16.排序"></a>16.排序</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//按照自然顺序进行排序 如果要自定义排序sorted 传入自定义的 Comparator</span><br><span class="line">list.stream()</span><br><span class="line">    .sorted()</span><br><span class="line">    .filter((s) -&gt; s.startsWith(&quot;a&quot;))</span><br><span class="line">    .forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">//对象排序比较 请重写对象的equals()和hashCode()方法</span><br><span class="line">list.sorted((a, b) -&gt; b.compareTo(a))</span><br><span class="line"></span><br><span class="line">Collections.sort(names, (a, b) -&gt; b.compareTo(a));</span><br></pre></td></tr></table></figure>

<h3 id="17-比较"><a href="#17-比较" class="headerlink" title="17.比较"></a>17.比较</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COPYComparator&lt;Person&gt; comparator = (p1, p2) -&gt; p1.firstName.compareTo(p2.firstName);</span><br><span class="line"></span><br><span class="line">Person p1 = new Person(&quot;John&quot;, &quot;Doe&quot;);</span><br><span class="line">Person p2 = new Person(&quot;Alice&quot;, &quot;Wonderland&quot;);</span><br><span class="line"></span><br><span class="line">comparator.compare(p1, p2);             // &gt; 0</span><br><span class="line">comparator.reversed().compare(p1, p2);  // &lt; 0</span><br></pre></td></tr></table></figure>

<h3 id="18-Collectors-groupingBy-分组"><a href="#18-Collectors-groupingBy-分组" class="headerlink" title="18.Collectors groupingBy 分组"></a>18.Collectors groupingBy 分组</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COPYMap&lt;Integer, List&lt;User&gt;&gt; ageMap2 = userStream</span><br><span class="line">.collect(Collectors.groupingBy(User::getAge));</span><br></pre></td></tr></table></figure>

<p>对集合按照多个属性分组<br>将多个字段拼接成一个新字段，然后再使用groupBy分组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COPYMap&lt;String, List&lt;EntryDeliveryDetailywk&gt;&gt; detailmap = details.stream()</span><br><span class="line">.collect(Collectors.groupingBy(this::fetchGroupKey));</span><br><span class="line"></span><br><span class="line">private String fetchGroupKey(EntryDeliveryDetailywk detail)&#123;</span><br><span class="line">        return detail.getSkuId().toString()</span><br><span class="line">        + detail.getItemsName()</span><br><span class="line">        + detail.getWarehouseId().toString()</span><br><span class="line">        + detail.getSupplierId().toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>groupingBy 分组后操作<br>&#x2F;&#x2F;Collectors中还提供了一些对分组后的元素进行downStream处理的方法：<br>&#x2F;&#x2F;counting方法返回所收集元素的总数；<br>&#x2F;&#x2F;summing方法会对元素求和；<br>&#x2F;&#x2F;maxBy和minBy会接受一个比较器，求最大值，最小值；<br>&#x2F;&#x2F;mapping函数会应用到downstream结果上，并需要和其他函数配合使用；</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COPYMap&lt;Integer, Long&gt; sexCount = userStream.collect(Collectors.groupingBy(User::getSex,Collectors.counting()));</span><br><span class="line"></span><br><span class="line">Map&lt;Integer, Integer&gt; ageCount = userStream.collect(Collectors.groupingBy(User::getSex,Collectors.summingInt(User::getAge)));</span><br><span class="line"></span><br><span class="line">Map&lt;Integer, Optional&lt;User&gt;&gt; ageMax =  userStream.collect(Collectors.groupingBy(User::getSex,Collectors.maxBy(Comparator.comparing(User::getAge))));</span><br><span class="line"></span><br><span class="line">Map&lt;Integer, List&lt;String&gt;&gt; nameMap =  userStream.collect(Collectors.groupingBy(User::getSex,Collectors.mapping(User::getName,Collectors.toList())));</span><br></pre></td></tr></table></figure>

<p>groupingBy 根据<strong>年龄</strong>来分组：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COPYMap&lt;Integer, List&gt; peopleByAge = peoples.stream()</span><br><span class="line">.filter(p -&gt; p.age &gt; 12).collect(Collectors.groupingBy(p -&gt; p.age, Collectors.toList()));</span><br><span class="line">12</span><br></pre></td></tr></table></figure>

<p>groupingBy 根据<strong>年龄</strong>分组，年龄对应的键值<strong>List存储</strong>的为Person的姓名:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COPYMap&lt;Integer, List&gt; peopleByAge = people.stream()</span><br><span class="line">.collect(Collectors.groupingBy(p -&gt; p.age, Collectors.mapping((Person p) -&gt; p.name, Collectors.toList())));</span><br><span class="line">//mapping即为对各组进行投影操作，和Stream的map方法基本一致。</span><br></pre></td></tr></table></figure>

<p>groupingBy 根据<strong>姓名</strong>分组，获取每个姓名下人的年龄总和:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COPYMap sumAgeByName = peoples.stream().collect(Collectors.groupingBy(p -&gt; p.name, Collectors.reducing(0, (Person p) -&gt; p.age, Integer::sum)));</span><br><span class="line">/* 或者使用summingInt方法 */</span><br><span class="line">sumAgeByName = peoples.stream().collect(Collectors.groupingBy(p -&gt; p.name, Collectors.summingInt((Person p) -&gt; p.age)));</span><br></pre></td></tr></table></figure>

<p>groupingBy Boolean分组:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COPYMap&lt;Boolean, List&lt;Integer&gt;&gt; collectGroup = Stream.of(1, 2, 3, 4)</span><br><span class="line">            .collect(Collectors.groupingBy(it -&gt; it &gt; 3));</span><br><span class="line">System.out.println(&quot;collectGroup : &quot; + collectGroup);</span><br><span class="line">// 打印结果</span><br><span class="line">// collectGroup : &#123;false=[1, 2, 3], true=[4]&#125;</span><br></pre></td></tr></table></figure>

<p>groupingBy 按年龄分组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Map&lt;Integer, List&lt;Person&gt;&gt; personsByAge = persons.stream().collect(Collectors.groupingBy(p -&gt; p.age));</span><br><span class="line">personsByAge.forEach((age, p) -&gt; System.out.format(&quot;age %s: %s\n&quot;, age, p));</span><br><span class="line">// age 18: [Max]</span><br><span class="line">// age 23: [Peter, Pamela]</span><br><span class="line">// age 12: [David]</span><br></pre></td></tr></table></figure>

<p>Map.merge（） 类似于分组之后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Map&lt;String, Integer&gt; studentScoreMap2 = new HashMap&lt;&gt;();</span><br><span class="line">       studentScoreList.forEach(studentScore -&gt; studentScoreMap2.merge(</span><br><span class="line">         studentScore.getStuName(),</span><br><span class="line">         studentScore.getScore(),</span><br><span class="line">         Integer::sum));</span><br></pre></td></tr></table></figure>

<p>Collectors partitioningBy<br>Collectors中还提供了partitioningBy方法，接受一个Predicate函数，该函数返回boolean值，用于将内容分为两组。假设User实体中包含性别信息getSex（），可以按如下写法将userStream按性别分组：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Map&lt;Boolean, List&lt;User&gt;&gt; sexMap = userStream</span><br><span class="line">.collect(Collectors.partitioningBy(item -&gt; item.getSex() &gt; 0));</span><br></pre></td></tr></table></figure>

<p>可以看到Java8的分组功能相当强大，当然你还可以完成更复杂的功能。另外Collectors中还存在一个类似groupingBy的方法：partitioningBy，它们的区别是partitionBy为键值为Boolean类型的groupingBy，这种情况下它比groupingBy更有效率。</p>
<p>partitioningBy 将数字的Stream分解成奇数集合和偶数集合。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Map&lt;Boolean, List&lt;Integer&gt;&gt; collectParti = Stream.of(1, 2, 3, 4)</span><br><span class="line">            .collect(Collectors.partitioningBy(it -&gt; it % 2 == 0));</span><br><span class="line">System.out.println(&quot;collectParti : &quot; + collectParti);</span><br><span class="line">// 打印结果</span><br><span class="line">// collectParti : &#123;false=[1, 3], true=[2, 4]&#125;</span><br></pre></td></tr></table></figure>

<p>Collectors join<br>Collectors.join 收集Stream中的值，该方法可以方便地将Stream得到一个字符串。joining函数接受三个参数，分别表示允（用以分隔元素）、前缀和后缀：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String names = peoples.stream().map(p-&gt;p.name).collect(Collectors.joining(&quot;,&quot;))</span><br><span class="line"></span><br><span class="line">String strJoin = Stream.of(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;)</span><br><span class="line">        .collect(Collectors.joining(&quot;,&quot;, &quot;[&quot;, &quot;]&quot;));</span><br><span class="line">System.out.println(&quot;strJoin: &quot; + strJoin);</span><br><span class="line">// 打印结果</span><br><span class="line">// strJoin: [1,2,3,4]</span><br><span class="line"></span><br><span class="line">//字符串连接</span><br><span class="line">String phrase = persons</span><br><span class="line">    .stream()</span><br><span class="line">    .filter(p -&gt; p.age &gt;= 18)</span><br><span class="line">    .map(p -&gt; p.name)</span><br><span class="line">    .collect(Collectors.joining(&quot; and &quot;, &quot;In Germany &quot;, &quot; are of legal age.&quot;));</span><br><span class="line">System.out.println(phrase);</span><br><span class="line">// In Germany Max and Peter and Pamela are of legal age.</span><br></pre></td></tr></table></figure>

<p>组合 收集器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Map&lt;Boolean, Long&gt; partiCount = Stream.of(1, 2, 3, 4)</span><br><span class="line">        .collect(Collectors.partitioningBy(it -&gt; it.intValue() % 2 == 0,</span><br><span class="line">                Collectors.counting()));</span><br><span class="line">System.out.println(&quot;partiCount: &quot; + partiCount);</span><br><span class="line">// 打印结果</span><br><span class="line">// partiCount: &#123;false=2, true=2&#125;</span><br></pre></td></tr></table></figure>

<p>Collectors分别提供了求平均值、总数couting、最小值minBy、最大值maxBy、求和suming等操作。但是假如你希望将流中结果聚合为一个总和、平均值、最大值、最小值，那么Collectors.summarizing（Int&#x2F;Long&#x2F;Double）就是为你准备的，它可以一次行获取前面的所有结果，其返回值为（Int&#x2F;Long&#x2F;Double）SummaryStatistics。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DoubleSummaryStatistics dss = people.collect(Collectors.summarizingDouble((Person p)-&gt;p.age));</span><br><span class="line">double average=dss.getAverage();</span><br><span class="line">double max=dss.getMax();</span><br><span class="line">double min=dss.getMin();</span><br><span class="line">double sum=dss.getSum();</span><br><span class="line">double count=dss.getCount();</span><br><span class="line"></span><br><span class="line">IntSummaryStatistics ageSummary = persons</span><br><span class="line">        .stream()</span><br><span class="line">        .collect(Collectors.summarizingInt(p -&gt; p.age));</span><br><span class="line"></span><br><span class="line">System.out.println(ageSummary);</span><br><span class="line">// IntSummaryStatistics&#123;count=4, sum=76, min=12, average=19.000000, max=23&#125;</span><br></pre></td></tr></table></figure>

<p>使用collect可以将Stream转换成值。maxBy和minBy允许用户按照某个特定的顺序生成一个值。</p>
<p>averagingDouble：求平均值，Stream的元素类型为double<br>averagingInt：求平均值，Stream的元素类型为<br>int averagingLong：求平均值，Stream的元素类型<br>为long counting：Stream的<br>元素个数 maxBy：在指定条件下的<br>，Stream的最大元素 minBy：在指定条件下的<br>，Stream的最小元素<br>reduceing： reduce操作 sumizingDouble：统计Stream的数据（double）状态，其中包括count，min，max，sum和平均。</p>
<p>summarizingInt：统计Stream的数据（int）状态，其中包括count，min，max，sum和平均。</p>
<p>summarizingLong：统计Stream的数据（long）状态，其中包括count，min，max，sum和平均。</p>
<p>summingDouble：求和，Stream的元素类型为double<br>summingInt：求和，Stream的元素类型为<br>int summingLong：求和，Stream的元素类型为long</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Optional&lt;Integer&gt; collectMaxBy = Stream.of(1, 2, 3, 4)</span><br><span class="line">            .collect(Collectors.maxBy(Comparator.comparingInt(o -&gt; o)));</span><br><span class="line">System.out.println(&quot;collectMaxBy:&quot; + collectMaxBy.get());</span><br><span class="line">// 打印结果</span><br><span class="line">// collectMaxBy:4</span><br></pre></td></tr></table></figure>

<p>Collectors a<br>averageInt 计算集合的平均年龄</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Double averageAge = persons</span><br><span class="line">    .stream()</span><br><span class="line">    .collect(Collectors.averagingInt(p -&gt; p.age));</span><br><span class="line"></span><br><span class="line">System.out.println(averageAge);     // 19.0</span><br></pre></td></tr></table></figure>

<p>自定义收集器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Collector&lt;Person, StringJoiner, String&gt; personNameCollector =</span><br><span class="line">    Collector.of(</span><br><span class="line">        () -&gt; new StringJoiner(&quot; | &quot;),          // supplier</span><br><span class="line">        (j, p) -&gt; j.add(p.name.toUpperCase()),  // accumulator</span><br><span class="line">        (j1, j2) -&gt; j1.merge(j2),               // combiner</span><br><span class="line">        StringJoiner::toString);                // finisher</span><br><span class="line"></span><br><span class="line">String names = persons</span><br><span class="line">    .stream()</span><br><span class="line">    .collect(personNameCollector);</span><br><span class="line"></span><br><span class="line">System.out.println(names);  // MAX | PETER | PAMELA | DAVID</span><br></pre></td></tr></table></figure>

<h3 id="19-两个集合对象-根据对象属性相同相加得到新的对象"><a href="#19-两个集合对象-根据对象属性相同相加得到新的对象" class="headerlink" title="19.两个集合对象 根据对象属性相同相加得到新的对象"></a>19.两个集合对象 根据对象属性相同相加得到新的对象</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testsumList()&#123;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;Student&gt; sumlist = new ArrayList&lt;&gt;();</span><br><span class="line">    ArrayList&lt;Student&gt; students = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    students.parallelStream().collect(Collectors.groupingBy(o-&gt;o.getA(),Collectors.toList())).forEach(</span><br><span class="line">            (id,t)-&gt;&#123;</span><br><span class="line">                t.stream().reduce(</span><br><span class="line">                        (a,b)-&gt;new Student(a.getA(),a.getB()+b.getB(),a.getC()+b.getC())</span><br><span class="line">                ).ifPresent(sumlist::add);</span><br><span class="line">            &#125;</span><br><span class="line">    );</span><br><span class="line">    System.out.println(sumlist);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Stream</category>
      </categories>
      <tags>
        <tag>JDK1.8新特性</tag>
      </tags>
  </entry>
  <entry>
    <title>Feign</title>
    <url>/2020/11/05/Java/Feign/feign/</url>
    <content><![CDATA[<h2 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h2><blockquote>
<p>Feign 是一个声明式的 REST 客户端，它用了基于接口的注解方式</p>
</blockquote>
<ol>
<li>引入 open-feign 依赖</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--feign--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ol start="2">
<li>编写Feign调用接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wingone.consumer.feign;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wingone.consumer.config.FeignLogConfig;</span><br><span class="line"><span class="keyword">import</span> com.wingone.consumer.domain.Goods;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.FeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * feign声明式接口。发起远程调用的。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> String url = &quot;http://FEIGN-PROVIDER/goods/findOne/&quot;+id;</span></span><br><span class="line"><span class="comment"> Goods goods = restTemplate.getForObject(url, Goods.class);</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1. 定义接口</span></span><br><span class="line"><span class="comment"> * 2. 接口上添加注解 <span class="doctag">@FeignClient</span>,设置value属性为 服务提供者的 应用名称</span></span><br><span class="line"><span class="comment"> * 3. 编写调用接口，接口的声明规则 和 提供方接口保持一致。</span></span><br><span class="line"><span class="comment"> * 4. 注入该接口对象，调用接口方法完成远程调用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FeignClient(value = &quot;FEIGN-PROVIDER&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GoodsFeignClient</span> &#123;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/goods/findOne/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Goods <span class="title function_">findGoodsById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="type">int</span> id)</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>OrderController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wingone.consumer.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wingone.consumer.domain.Goods;</span><br><span class="line"><span class="keyword">import</span> com.wingone.consumer.feign.GoodsFeignClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> GoodsFeignClient goodsFeignClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/goods/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Goods <span class="title function_">findGoodsById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="type">int</span> id)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        String url = &quot;http://FEIGN-PROVIDER/goods/findOne/&quot;+id;</span></span><br><span class="line"><span class="comment">        // 3. 调用方法</span></span><br><span class="line"><span class="comment">        Goods goods = restTemplate.getForObject(url, Goods.class);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        return goods;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Goods</span> <span class="variable">goods</span> <span class="operator">=</span> goodsFeignClient.findGoodsById(id);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> goods;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注入的goodsFeignClient报红，不影响使用</p>
<ol start="3">
<li>在启动类 添加 <strong>@EnableFeignClients</strong> 注解，开启Feign功能</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wingone.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span> <span class="comment">// 激活DiscoveryClient</span></span><br><span class="line"><span class="comment">//@EnableEurekaClient  或者nacos</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@EnableFeignClients</span> <span class="comment">//开启Feign的功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(ConsumerApp.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="Feign超时配置"><a href="#Feign超时配置" class="headerlink" title="Feign超时配置"></a>Feign超时配置</h2><p>• Feign 底层依赖于 Ribbon 实现负载均衡和远程调用。<br>• Ribbon默认1秒超时。<br>• 超时配置：</p>
<p>消费端的  application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置Ribbon的超时时间</span></span><br><span class="line"><span class="attr">ribbon:</span></span><br><span class="line">  <span class="attr">ConnectTimeout:</span> <span class="number">1000</span> <span class="comment"># 连接超时时间 默认1s  默认单位毫秒</span></span><br><span class="line">  <span class="attr">ReadTimeout:</span> <span class="number">3000</span> <span class="comment"># 逻辑处理的超时时间 默认1s 默认单位毫秒</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Eureka的自我保护机制</title>
    <url>/2021/05/24/Java/Eureka%E8%87%AA%E6%88%91%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/Eureka%E8%87%AA%E6%88%91%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="Eureka的自我保护机制"><a href="#Eureka的自我保护机制" class="headerlink" title="Eureka的自我保护机制"></a>Eureka的自我保护机制</h1><h3 id="自我保护背景"><a href="#自我保护背景" class="headerlink" title="自我保护背景"></a>自我保护背景</h3><p>首先对Eureka注册中心需要了解的是Eureka各个节点都是平等的，没有ZK中角色的概念， 即使N-1个节点挂掉也不会影响其他节点的正常运行。</p>
<p>默认情况下，</p>
<h3 id="自我保护机制"><a href="#自我保护机制" class="headerlink" title="自我保护机制"></a>自我保护机制</h3><p>官方对于自我保护机制的定义：</p>
<blockquote>
<p>自我保护模式正是一种针对网络异常波动的安全保护措施，使用自我保护模式能使Eureka集群更加的健壮、稳定的运行。</p>
</blockquote>
<p>自我保护机制的工作机制是：<strong>如果在15分钟内超过85%的客户端节点都没有正常的心跳，那么Eureka就认为客户端与注册中心出现了网络故障，Eureka Server自动进入自我保护机制</strong>，此时会出现以下几种情况：</p>
<ol>
<li>Eureka Server不再从注册列表中移除因为长时间没收到心跳而应该过期的服务。</li>
<li>Eureka Server仍然能够接受新服务的注册和查询请求，但是不会被同步到其它节点上，保证当前节点依然可用。</li>
<li>当网络稳定时，当前Eureka Server新的注册信息会被同步到其它节点中。</li>
</ol>
<p>因此Eureka Server可以很好的应对因网络故障导致部分节点失联的情况，而不会像ZK那样如果有一半不可用的情况会导致整个集群不可用而变成瘫痪。</p>
<h3 id="自我保护开关"><a href="#自我保护开关" class="headerlink" title="自我保护开关"></a>自我保护开关</h3><p>Eureka自我保护机制，通过配置 <code>eureka.server.enable-self-preservation</code> 来<code>true</code>打开&#x2F;<code>false</code>禁用自我保护机制，默认打开状态，建议生产环境打开此配置。</p>
<h3 id="开发环境配置"><a href="#开发环境配置" class="headerlink" title="开发环境配置"></a>开发环境配置</h3><p>开发环境中如果要实现服务失效能自动移除，只需要修改以下配置。</p>
<h5 id="1、-注册中心关闭自我保护机制，修改检查失效服务的时间。"><a href="#1、-注册中心关闭自我保护机制，修改检查失效服务的时间。" class="headerlink" title="1、 注册中心关闭自我保护机制，修改检查失效服务的时间。"></a>1、 注册中心关闭自我保护机制，修改检查失效服务的时间。</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">eureka:</span><br><span class="line">  server:</span><br><span class="line">     enable-self-preservation: <span class="literal">false</span></span><br><span class="line">     eviction-interval-timer-in-ms: 3000</span><br></pre></td></tr></table></figure>

<h5 id="2、-微服务修改减短服务心跳的时间。"><a href="#2、-微服务修改减短服务心跳的时间。" class="headerlink" title="2、 微服务修改减短服务心跳的时间。"></a>2、 微服务修改减短服务心跳的时间。</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认90秒</span></span><br><span class="line">lease-expiration-duration-in-seconds:  10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认30秒</span></span><br><span class="line">lease-renewal-interval-in-seconds:  3</span><br></pre></td></tr></table></figure>

<p>以上配置建议在生产环境使用默认的时间配置。</p>
]]></content>
      <categories>
        <category>Eureka</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 版本管理</title>
    <url>/2021/05/12/Java/Git/git/</url>
    <content><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h2><h3 id="1-git下载"><a href="#1-git下载" class="headerlink" title="1.git下载"></a>1.git下载</h3><p><a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p>
<h3 id="2-Git-配置"><a href="#2-Git-配置" class="headerlink" title="2.Git 配置"></a>2.Git 配置</h3><p>配置全局用户名和密码，git提交代码时用来显示你身份和联系方式，并不是github用户名和邮箱</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;cardioid&quot;</span> <span class="comment">//改成自己的</span></span><br><span class="line">git config --global user.email <span class="string">&quot;1415479273@qq.com&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-生成SSH-key"><a href="#3-生成SSH-key" class="headerlink" title="3.生成SSH key"></a>3.生成SSH key</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;1415479273@qq.com&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>然后会叫你输入保存路径，直接按回车即可，保存在C盘用户目录下</p>
</li>
<li><p>然后会提示输入密码和确认密码，不用输入直接按两下回车即可</p>
</li>
</ul>
<p>文件默认是在C盘用户目录下，我的是<code>C:\Users\13452\.ssh</code></p>
<p>文件夹中应该会有两个文件 ：<code>id_rsa</code>和<code>id_rsa.pub</code></p>
<p><code>id_rsa.pub</code>就是我们要的key</p>
<p>SSH key就生成好了，接下来就是配置到github或者码云上</p>
<h2 id="IDEA集成Git"><a href="#IDEA集成Git" class="headerlink" title="IDEA集成Git"></a>IDEA集成Git</h2><h3 id="1IDEA中配置Git-应用"><a href="#1IDEA中配置Git-应用" class="headerlink" title="1IDEA中配置Git(应用)"></a>1IDEA中配置Git(应用)</h3><ol>
<li>File -&gt; Settings</li>
</ol>
<p><img src="/git/64_IDEA%E4%B8%AD%E9%85%8D%E7%BD%AEGit.png" alt="64_IDEA中配置Git"></p>
<ol start="2">
<li>Version Control -&gt; Git -&gt; 指定git.exe存放目录</li>
</ol>
<p><img src="/git/65_IDEA%E4%B8%AD%E9%85%8D%E7%BD%AEGit.png" alt="65_IDEA中配置Git"></p>
<ol start="3">
<li>点击Test测试</li>
</ol>
<p><img src="/git/66_IDEA%E4%B8%AD%E9%85%8D%E7%BD%AEGit.png" alt="66_IDEA中配置Git"></p>
<h3 id="2创建本地仓库-应用"><a href="#2创建本地仓库-应用" class="headerlink" title="2创建本地仓库(应用)"></a>2创建本地仓库(应用)</h3><ol>
<li><p>VCS-&gt;Import into Version Control-&gt;Create Git Repository</p>
<p><img src="/git/67_%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93.png" alt="67_创建本地仓库"></p>
</li>
<li><p>选择工程所在的目录,这样就创建好本地仓库了</p>
<p><img src="/git/68_%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93.png" alt="68_创建本地仓库"></p>
</li>
<li><p>点击git后边的对勾,将当前项目代码提交到本地仓库</p>
<p>注意: 项目中的配置文件不需要提交到本地仓库中,提交时,忽略掉即可</p>
<p><img src="/git/69_%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93.png" alt="69_创建本地仓库"></p>
</li>
</ol>
<h3 id="3版本切换-应用"><a href="#3版本切换-应用" class="headerlink" title="3版本切换(应用)"></a>3版本切换(应用)</h3><ul>
<li><p>方式一: 控制台Version Control-&gt;Log-&gt;Reset Current Branch…-&gt;Reset</p>
<p>这种切换的特点是会抛弃原来的提交记录</p>
<p><img src="/git/70_%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2.png" alt="70_版本切换"></p>
</li>
<li><p>方式二:控制台Version Control-&gt;Log-&gt;Revert Commit-&gt;Merge-&gt;处理代码-&gt;commit</p>
<p>这种切换的特点是会当成一个新的提交记录,之前的提交记录也都保留</p>
<p><img src="/git/71_%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2.png" alt="71_版本切换"></p>
<p><img src="/git/72_%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2.png" alt="72_版本切换"></p>
<p>​		<img src="/git/73_%E7%89%88%E6%9C%AC%E5%88%87%E6%8D%A2.png" alt="73_版本切换"></p>
</li>
</ul>
<h3 id="4分支管理-应用"><a href="#4分支管理-应用" class="headerlink" title="4分支管理(应用)"></a>4分支管理(应用)</h3><ul>
<li><p>创建分支</p>
<p>VCS-&gt;Git-&gt;Branches-&gt;New Branch-&gt;给分支起名字-&gt;ok</p>
<p><img src="/git/74_%E5%88%9B%E5%BB%BA%E5%88%86%E6%94%AF.png" alt="74_创建分支"></p>
</li>
<li><p>切换分支</p>
<p>idea右下角Git-&gt;选择要切换的分支-&gt;checkout</p>
<p><img src="/git/75_%E5%88%87%E6%8D%A2%E5%88%86%E6%94%AF.png" alt="75_切换分支"></p>
</li>
<li><p>合并分支</p>
<p>VCS-&gt;Git-&gt;Merge changes-&gt;选择要合并的分支-&gt;merge</p>
<p><img src="/git/76_%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF.png" alt="76_合并分支"></p>
<p>处理分支中的代码</p>
<p><img src="/git/77_%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF.png" alt="77_合并分支"></p>
<p><img src="/git/78_%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF.png" alt="78_合并分支"></p>
<p><img src="/git/79_%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF.png" alt="79_合并分支"></p>
</li>
</ul>
<h2 id="关于idea-git中soft-mixed-hard-keep的区别"><a href="#关于idea-git中soft-mixed-hard-keep的区别" class="headerlink" title="关于idea git中soft mixed hard keep的区别"></a>关于idea git中soft mixed hard keep的区别</h2><h4 id="1、hard"><a href="#1、hard" class="headerlink" title="1、hard"></a>1、hard</h4><p>①移动本地库HEAD指针</p>
<p>②重置暂存区</p>
<p>③重置工作区</p>
<p>意思就是，回滚后，本地代码就是你回退版本的代码<strong>（彻底回退，所有改动的内容都不见了，慎用！）</strong></p>
<h4 id="2、soft"><a href="#2、soft" class="headerlink" title="2、soft"></a>2、soft</h4><p>①移动本地库HEAD指针</p>
<p>意思就是，回滚后，仅仅是把本地库的指针移动了，暂存区和你本地的代码是没有做任何的改变。而你上次改动已提交committed到本地库的代码显示是绿色即未提交的状态<strong>（一般都用这个）</strong></p>
<h4 id="3、mixed"><a href="#3、mixed" class="headerlink" title="3、mixed"></a>3、mixed</h4><p>①移动本地库HEAD指针</p>
<p>②重置暂存区</p>
<p>意思就是，回滚后，不仅移动了本地库的指针，同时暂存区的东西也没了，意思就是你上次添加到暂存区的文件没了</p>
<h4 id="4-keep"><a href="#4-keep" class="headerlink" title="4.  keep"></a>4.  keep</h4><p>①移动本地库HEAD指针</p>
<p>②暂存区不变</p>
<p>③重置工作区</p>
<p>意思就是，回滚后，本地代码就是你回退版本的代码,而暂存区是没有做任何改变的</p>
<p>换句话说就是：本地代码是当前回退的版本代码<strong>（类似于hard操作），但是还没有提交的更改内容依旧还在（跟hard操作的区别）</strong></p>
<h2 id="解决-gitignore不生效的问题"><a href="#解决-gitignore不生效的问题" class="headerlink" title="解决.gitignore不生效的问题"></a>解决.gitignore不生效的问题</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git rm -r --cached .</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line">git commit -m &#x27;update .gitignore&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>JWT</title>
    <url>/2022/04/14/Java/JWT/JWT/</url>
    <content><![CDATA[<h2 id="项目使用框架介绍"><a href="#项目使用框架介绍" class="headerlink" title="项目使用框架介绍"></a>项目使用框架介绍</h2><h3 id="SpringSecurity"><a href="#SpringSecurity" class="headerlink" title="SpringSecurity"></a>SpringSecurity</h3><blockquote>
<p>SpringSecurity是一个强大的可高度定制的认证和授权框架，对于Spring应用来说它是一套Web安全标准。SpringSecurity注重于为Java应用提供认证和授权功能，像所有的Spring项目一样，它对自定义需求具有强大的扩展性。</p>
</blockquote>
<h3 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h3><blockquote>
<p>JWT是JSON WEB TOKEN的缩写，它是基于 RFC 7519 标准定义的一种可以安全传输的的JSON对象，由于使用了数字签名，所以是可信任和安全的。</p>
</blockquote>
<h4 id="JWT的组成"><a href="#JWT的组成" class="headerlink" title="JWT的组成"></a>JWT的组成</h4><ul>
<li><p>JWT token的格式：header.payload.signa ture &#x2F; che</p>
</li>
<li><p>header中用于存放签名的生成算法</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS512&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>payload中用于存放用户名、token的生成时间和过期时间</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span><span class="string">&quot;admin&quot;</span><span class="punctuation">,</span><span class="attr">&quot;created&quot;</span><span class="punctuation">:</span><span class="number">1489079981393</span><span class="punctuation">,</span><span class="attr">&quot;exp&quot;</span><span class="punctuation">:</span><span class="number">1489684781</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>signature为以header和payload生成的签名，一旦header和payload被篡改，验证将失败</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//secret为加密算法的密钥</span></span><br><span class="line"><span class="type">String</span> <span class="variable">signature</span> <span class="operator">=</span> HMACSHA512(base64UrlEncode(header) + <span class="string">&quot;.&quot;</span> +base64UrlEncode(payload),secret)</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="JWT实例"><a href="#JWT实例" class="headerlink" title="JWT实例"></a>JWT实例</h4><p>这是一个JWT的字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImNyZWF0ZWQiOjE1NTY3NzkxMjUzMDksImV4cCI6MTU1NzM4MzkyNX0.d-iki0193X0bBOETf2UN3r3PotNIEAV7mzIxxeI5IxFyzzkOZxS0PGfF_SK6wxCv2K8S0cZjMkv6b5bCqc0VBw</span><br></pre></td></tr></table></figure>

<p>可以在该网站上获得解析结果：<a href="https://jwt.io/">https://jwt.io/</a> <img src="/JWT/arch_screen_13.png" alt="img"></p>
<h4 id="JWT实现认证和授权的原理"><a href="#JWT实现认证和授权的原理" class="headerlink" title="JWT实现认证和授权的原理"></a>JWT实现认证和授权的原理</h4><ul>
<li>用户调用登录接口，登录成功后获取到JWT的token；</li>
<li>之后用户每次调用接口都在http的header中添加一个叫Authorization的头，值为JWT的token；</li>
<li>后台程序通过对Authorization头中信息的解码及数字签名校验来获取其中的用户信息，从而实现认证和授权。</li>
</ul>
<h3 id="Hutool"><a href="#Hutool" class="headerlink" title="Hutool"></a>Hutool</h3><blockquote>
<p>Hutool是一个丰富的Java开源工具包,它帮助我们简化每一行代码，减少每一个方法，mall项目采用了此工具包。</p>
</blockquote>
]]></content>
      <categories>
        <category>JWT</category>
      </categories>
      <tags>
        <tag>登录</tag>
      </tags>
  </entry>
  <entry>
    <title>整合SpringSecurity和JWT实现认证和授权</title>
    <url>/2022/04/15/Java/JWT/%E6%95%B4%E5%90%88SpringSecurity%E5%92%8CJWT%E5%AE%9E%E7%8E%B0%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83/</url>
    <content><![CDATA[<h1 id="整合SpringSecurity和JWT实现认证和授权"><a href="#整合SpringSecurity和JWT实现认证和授权" class="headerlink" title="整合SpringSecurity和JWT实现认证和授权"></a>整合SpringSecurity和JWT实现认证和授权</h1><blockquote>
<p>本文主要讲解mall通过整合SpringSecurity和JWT实现后台用户的登录和授权功能，同时改造Swagger-UI的配置使其可以自动记住登录令牌进行发送。</p>
</blockquote>
<h2 id="项目使用表说明"><a href="#项目使用表说明" class="headerlink" title="项目使用表说明"></a>项目使用表说明</h2><ul>
<li><code>ums_admin</code>：后台用户表</li>
<li><code>ums_role</code>：后台用户角色表</li>
<li><code>ums_permission</code>：后台用户权限表</li>
<li><code>ums_admin_role_relation</code>：后台用户和角色关系表，用户与角色是多对多关系</li>
<li><code>ums_role_permission_relation</code>：后台用户角色和权限关系表，角色与权限是多对多关系</li>
<li><code>ums_admin_permission_relation</code>：后台用户和权限关系表(除角色中定义的权限以外的加减权限)，加权限是指用户比角色多出的权限，减权限是指用户比角色少的权限</li>
</ul>
<h2 id="整合SpringSecurity及JWT"><a href="#整合SpringSecurity及JWT" class="headerlink" title="整合SpringSecurity及JWT"></a>整合SpringSecurity及JWT</h2><h3 id="在pom-xml中添加项目依赖pom"><a href="#在pom-xml中添加项目依赖pom" class="headerlink" title="在pom.xml中添加项目依赖pom"></a>在pom.xml中添加项目依赖pom</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringSecurity依赖配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Hutool Java工具包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--JWT(Json Web Token)登录支持--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="工具类JwtTokenUtil"><a href="#工具类JwtTokenUtil" class="headerlink" title="工具类JwtTokenUtil"></a>工具类JwtTokenUtil</h3><blockquote>
<p>用于生成和解析JWT token的工具类</p>
</blockquote>
<p>相关方法说明：</p>
<ul>
<li>generateToken(UserDetails userDetails) :用于根据登录用户信息生成token</li>
<li>getUserNameFromToken(String token)：从token中获取登录用户的信息</li>
<li>validateToken(String token, UserDetails userDetails)：判断token是否还有效</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.macro.mall.tiny.common.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JwtToken生成的工具类</span></span><br><span class="line"><span class="comment"> * Created by macro on 2018/4/26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtTokenUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(JwtTokenUtil.class);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CLAIM_KEY_USERNAME</span> <span class="operator">=</span> <span class="string">&quot;sub&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CLAIM_KEY_CREATED</span> <span class="operator">=</span> <span class="string">&quot;created&quot;</span>;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.secret&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String secret;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.expiration&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long expiration;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据负责生成JWT的token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">generateToken</span><span class="params">(Map&lt;String, Object&gt; claims)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .setClaims(claims)</span><br><span class="line">                .setExpiration(generateExpirationDate())</span><br><span class="line">                .signWith(SignatureAlgorithm.HS512, secret)</span><br><span class="line">                .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从token中获取JWT中的负载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Claims <span class="title function_">getClaimsFromToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            claims = Jwts.parser()</span><br><span class="line">                    .setSigningKey(secret)</span><br><span class="line">                    .parseClaimsJws(token)</span><br><span class="line">                    .getBody();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LOGGER.info(<span class="string">&quot;JWT格式验证失败:&#123;&#125;&quot;</span>,token);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> claims;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成token的过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date <span class="title function_">generateExpirationDate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + expiration * <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从token中获取登录用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserNameFromToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        String username;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> getClaimsFromToken(token);</span><br><span class="line">            username =  claims.getSubject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            username = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证token是否还有效</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token       客户端传入的token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userDetails 从数据库中查询出来的用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">validateToken</span><span class="params">(String token, UserDetails userDetails)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> getUserNameFromToken(token);</span><br><span class="line">        <span class="keyword">return</span> username.equals(userDetails.getUsername()) &amp;&amp; !isTokenExpired(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断token是否已经失效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isTokenExpired</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">expiredDate</span> <span class="operator">=</span> getExpiredDateFromToken(token);</span><br><span class="line">        <span class="keyword">return</span> expiredDate.before(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从token中获取过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date <span class="title function_">getExpiredDateFromToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> getClaimsFromToken(token);</span><br><span class="line">        <span class="keyword">return</span> claims.getExpiration();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户信息生成token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">generateToken</span><span class="params">(UserDetails userDetails)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; claims = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        claims.put(CLAIM_KEY_USERNAME, userDetails.getUsername());</span><br><span class="line">        claims.put(CLAIM_KEY_CREATED, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="keyword">return</span> generateToken(claims);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断token是否可以被刷新</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canRefresh</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !isTokenExpired(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 刷新token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">refreshToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> getClaimsFromToken(token);</span><br><span class="line">        claims.put(CLAIM_KEY_CREATED, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="keyword">return</span> generateToken(claims);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="配置类WebSecurityConfigurerAdapter"><a href="#配置类WebSecurityConfigurerAdapter" class="headerlink" title="配置类WebSecurityConfigurerAdapter"></a>配置类WebSecurityConfigurerAdapter</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.macro.mall.tiny.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.component.JwtAuthenticationTokenFilter;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.component.RestAuthenticationEntryPoint;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.component.RestfulAccessDeniedHandler;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.dto.AdminUserDetails;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.mbg.model.UmsAdmin;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.mbg.model.UmsPermission;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.service.UmsAdminService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.http.SessionCreationPolicy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringSecurity的配置</span></span><br><span class="line"><span class="comment"> * Created by macro on 2018/4/26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled=true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UmsAdminService adminService;</span><br><span class="line">    <span class="comment">//当用户没有访问权限时的处理器，用于返回JSON格式的处理结果；</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestfulAccessDeniedHandler restfulAccessDeniedHandler;</span><br><span class="line">    <span class="comment">//当未登录或token失效时，返回JSON格式的结果；</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestAuthenticationEntryPoint restAuthenticationEntryPoint;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//用于配置需要拦截的url路径、jwt过滤器及出异常后的处理器；</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity httpSecurity)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        httpSecurity.csrf()<span class="comment">// 由于使用的是JWT，我们这里不需要csrf</span></span><br><span class="line">                .disable()</span><br><span class="line">                .sessionManagement()<span class="comment">// 基于token，所以不需要session</span></span><br><span class="line">                .sessionCreationPolicy(SessionCreationPolicy.STATELESS)</span><br><span class="line">                .and()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(HttpMethod.GET, <span class="comment">// 允许对于网站静态资源的无授权访问</span></span><br><span class="line">                        <span class="string">&quot;/&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/*.html&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/favicon.ico&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/**/*.html&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/**/*.css&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/**/*.js&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/swagger-resources/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/v2/api-docs/**&quot;</span></span><br><span class="line">                )</span><br><span class="line">                .permitAll()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/admin/login&quot;</span>, <span class="string">&quot;/admin/register&quot;</span>)<span class="comment">// 对登录注册要允许匿名访问</span></span><br><span class="line">                .permitAll()</span><br><span class="line">                .antMatchers(HttpMethod.OPTIONS)<span class="comment">//跨域请求会先进行一次options请求</span></span><br><span class="line">                .permitAll()</span><br><span class="line"><span class="comment">//                .antMatchers(&quot;/**&quot;)//测试时全部运行访问</span></span><br><span class="line"><span class="comment">//                .permitAll()</span></span><br><span class="line">                .anyRequest()<span class="comment">// 除上面外的所有请求全部需要鉴权认证</span></span><br><span class="line">                .authenticated();</span><br><span class="line">        <span class="comment">// 禁用缓存</span></span><br><span class="line">        httpSecurity.headers().cacheControl();</span><br><span class="line">        <span class="comment">// 添加JWT filter</span></span><br><span class="line">        httpSecurity.addFilterBefore(jwtAuthenticationTokenFilter(), UsernamePasswordAuthenticationFilter.class);</span><br><span class="line">        <span class="comment">//添加自定义未授权和未登录结果返回</span></span><br><span class="line">        httpSecurity.exceptionHandling()</span><br><span class="line">                .accessDeniedHandler(restfulAccessDeniedHandler)</span><br><span class="line">                .authenticationEntryPoint(restAuthenticationEntryPoint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//用于配置UserDetailsService及PasswordEncoder；</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth.userDetailsService(userDetailsService())</span><br><span class="line">                .passwordEncoder(passwordEncoder());</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//SpringSecurity定义的用于对密码进行编码及比对的接口，目前使用的是BCryptPasswordEncoder；</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//SpringSecurity定义的核心接口，用于根据用户名获取用户信息，需要自行实现；</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> UserDetailsService <span class="title function_">userDetailsService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取登录用户信息</span></span><br><span class="line">        <span class="keyword">return</span> username -&gt; &#123;</span><br><span class="line">            <span class="type">UmsAdmin</span> <span class="variable">admin</span> <span class="operator">=</span> adminService.getAdminByUsername(username);</span><br><span class="line">            <span class="keyword">if</span> (admin != <span class="literal">null</span>) &#123;</span><br><span class="line">                List&lt;UmsPermission&gt; permissionList = adminService.getPermissionList(admin.getId());</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AdminUserDetails</span>(admin,permissionList);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UsernameNotFoundException</span>(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//在用户名和密码校验前添加的过滤器，如果有jwt的token，会自行根据token信息进行登录。</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JwtAuthenticationTokenFilter <span class="title function_">jwtAuthenticationTokenFilter</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JwtAuthenticationTokenFilter</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManagerBean</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.authenticationManagerBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="相关依赖及方法说明"><a href="#相关依赖及方法说明" class="headerlink" title="相关依赖及方法说明"></a>相关依赖及方法说明</h4><ul>
<li>configure(HttpSecurity httpSecurity)：用于配置需要拦截的url路径、jwt过滤器及出异常后的处理器；</li>
<li>configure(AuthenticationManagerBuilder auth)：用于配置UserDetailsService及PasswordEncoder；</li>
<li>RestfulAccessDeniedHandler：当用户没有访问权限时的处理器，用于返回JSON格式的处理结果；</li>
<li>RestAuthenticationEntryPoint：当未登录或token失效时，返回JSON格式的结果；</li>
<li>UserDetailsService:SpringSecurity定义的核心接口，用于根据用户名获取用户信息，需要自行实现；</li>
<li>UserDetails：SpringSecurity定义用于封装用户信息的类（主要是用户信息和权限），需要自行实现；</li>
<li>PasswordEncoder：SpringSecurity定义的用于对密码进行编码及比对的接口，目前使用的是BCryptPasswordEncoder；</li>
<li>JwtAuthenticationTokenFilter：在用户名和密码校验前添加的过滤器，如果有jwt的token，会自行根据token信息进行登录。</li>
</ul>
<h3 id="添加RestfulAccessDeniedHandler"><a href="#添加RestfulAccessDeniedHandler" class="headerlink" title="添加RestfulAccessDeniedHandler"></a>添加RestfulAccessDeniedHandler</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.macro.mall.tiny.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONUtil;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.common.api.CommonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.AccessDeniedException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.access.AccessDeniedHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当访问接口没有权限时，自定义的返回结果</span></span><br><span class="line"><span class="comment"> * Created by macro on 2018/4/26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestfulAccessDeniedHandler</span> <span class="keyword">implements</span> <span class="title class_">AccessDeniedHandler</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                       HttpServletResponse response,</span></span><br><span class="line"><span class="params">                       AccessDeniedException e)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        response.getWriter().println(JSONUtil.parse(CommonResult.forbidden(e.getMessage())));</span><br><span class="line">        response.getWriter().flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="添加RestAuthenticationEntryPoint"><a href="#添加RestAuthenticationEntryPoint" class="headerlink" title="添加RestAuthenticationEntryPoint"></a>添加RestAuthenticationEntryPoint</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.macro.mall.tiny.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONUtil;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.common.api.CommonResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.AuthenticationEntryPoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当未登录或者token失效访问接口时，自定义的返回结果</span></span><br><span class="line"><span class="comment"> * Created by macro on 2018/5/14.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestAuthenticationEntryPoint</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationEntryPoint</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        response.getWriter().println(JSONUtil.parse(CommonResult.unauthorized(authException.getMessage())));</span><br><span class="line">        response.getWriter().flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="添加AdminUserDetails"><a href="#添加AdminUserDetails" class="headerlink" title="添加AdminUserDetails"></a>添加AdminUserDetails</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.macro.mall.tiny.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.mbg.model.UmsAdmin;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.mbg.model.UmsPermission;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringSecurity需要的用户详情</span></span><br><span class="line"><span class="comment"> * Created by macro on 2018/4/26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminUserDetails</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> UmsAdmin umsAdmin;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> List&lt;UmsPermission&gt; permissionList;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AdminUserDetails</span><span class="params">(UmsAdmin umsAdmin, List&lt;UmsPermission&gt; permissionList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.umsAdmin = umsAdmin;</span><br><span class="line">        <span class="built_in">this</span>.permissionList = permissionList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="comment">//返回当前用户的权限</span></span><br><span class="line">        <span class="keyword">return</span> permissionList.stream()jh32w</span><br><span class="line">                .filter(permission -&gt; permission.getValue()!=<span class="literal">null</span>)</span><br><span class="line">                .map(permission -&gt;<span class="keyword">new</span> <span class="title class_">SimpleGrantedAuthority</span>(permission.getValue()))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> umsAdmin.getPassword();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> umsAdmin.getUsername();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> umsAdmin.getStatus().equals(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="添加JwtAuthenticationTokenFilter"><a href="#添加JwtAuthenticationTokenFilter" class="headerlink" title="添加JwtAuthenticationTokenFilter"></a>添加JwtAuthenticationTokenFilter</h3><blockquote>
<p>在用户名和密码校验前添加的过滤器，如果请求中有jwt的token且有效，会取出token中的用户名，然后调用SpringSecurity的API进行登录操作。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.macro.mall.tiny.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.common.utils.JwtTokenUtil;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.authentication.WebAuthenticationDetailsSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.OncePerRequestFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JWT登录授权过滤器</span></span><br><span class="line"><span class="comment"> * Created by macro on 2018/4/26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtAuthenticationTokenFilter</span> <span class="keyword">extends</span> <span class="title class_">OncePerRequestFilter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(JwtAuthenticationTokenFilter.class);</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtTokenUtil jwtTokenUtil;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.tokenHeader&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String tokenHeader;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.tokenHead&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String tokenHead;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request,</span></span><br><span class="line"><span class="params">                                    HttpServletResponse response,</span></span><br><span class="line"><span class="params">                                    FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">authHeader</span> <span class="operator">=</span> request.getHeader(<span class="built_in">this</span>.tokenHeader);</span><br><span class="line">        <span class="keyword">if</span> (authHeader != <span class="literal">null</span> &amp;&amp; authHeader.startsWith(<span class="built_in">this</span>.tokenHead)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">authToken</span> <span class="operator">=</span> authHeader.substring(<span class="built_in">this</span>.tokenHead.length());<span class="comment">// The part after &quot;Bearer &quot;</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> jwtTokenUtil.getUserNameFromToken(authToken);</span><br><span class="line">            LOGGER.info(<span class="string">&quot;checking username:&#123;&#125;&quot;</span>, username);</span><br><span class="line">            <span class="keyword">if</span> (username != <span class="literal">null</span> &amp;&amp; SecurityContextHolder.getContext().getAuthentication() == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">UserDetails</span> <span class="variable">userDetails</span> <span class="operator">=</span> <span class="built_in">this</span>.userDetailsService.loadUserByUsername(username);</span><br><span class="line">                <span class="keyword">if</span> (jwtTokenUtil.validateToken(authToken, userDetails)) &#123;</span><br><span class="line">                    <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authentication</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(userDetails, <span class="literal">null</span>, userDetails.getAuthorities());</span><br><span class="line">                    authentication.setDetails(<span class="keyword">new</span> <span class="title class_">WebAuthenticationDetailsSource</span>().buildDetails(request));</span><br><span class="line">                    LOGGER.info(<span class="string">&quot;authenticated user:&#123;&#125;&quot;</span>, username);</span><br><span class="line">                    SecurityContextHolder.getContext().setAuthentication(authentication);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="登录注册功能实现"><a href="#登录注册功能实现" class="headerlink" title="登录注册功能实现"></a>登录注册功能实现</h2><h3 id="添加UmsAdminController类"><a href="#添加UmsAdminController类" class="headerlink" title="添加UmsAdminController类"></a>添加UmsAdminController类</h3><blockquote>
<p>实现了后台用户登录、注册及获取权限的接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.macro.mall.tiny.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.common.api.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.dto.UmsAdminLoginParam;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.mbg.model.UmsAdmin;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.mbg.model.UmsPermission;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.service.UmsAdminService;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 后台用户管理</span></span><br><span class="line"><span class="comment"> * Created by macro on 2018/4/26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;UmsAdminController&quot;, description = &quot;后台用户管理&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UmsAdminController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UmsAdminService adminService;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.tokenHeader&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String tokenHeader;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.tokenHead&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String tokenHead;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;用户注册&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/register&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;UmsAdmin&gt; <span class="title function_">register</span><span class="params">(<span class="meta">@RequestBody</span> UmsAdmin umsAdminParam, BindingResult result)</span> &#123;</span><br><span class="line">        <span class="type">UmsAdmin</span> <span class="variable">umsAdmin</span> <span class="operator">=</span> adminService.register(umsAdminParam);</span><br><span class="line">        <span class="keyword">if</span> (umsAdmin == <span class="literal">null</span>) &#123;</span><br><span class="line">            CommonResult.failed();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> CommonResult.success(umsAdmin);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;登录以后返回token&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/login&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> UmsAdminLoginParam umsAdminLoginParam, BindingResult result)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> adminService.login(umsAdminLoginParam.getUsername(), umsAdminLoginParam.getPassword());</span><br><span class="line">        <span class="keyword">if</span> (token == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> CommonResult.validateFailed(<span class="string">&quot;用户名或密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, String&gt; tokenMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        tokenMap.put(<span class="string">&quot;token&quot;</span>, token);</span><br><span class="line">        tokenMap.put(<span class="string">&quot;tokenHead&quot;</span>, tokenHead);</span><br><span class="line">        <span class="keyword">return</span> CommonResult.success(tokenMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;获取用户所有权限（包括+-权限）&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/permission/&#123;adminId&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;List&lt;UmsPermission&gt;&gt; <span class="title function_">getPermissionList</span><span class="params">(<span class="meta">@PathVariable</span> Long adminId)</span> &#123;</span><br><span class="line">        List&lt;UmsPermission&gt; permissionList = adminService.getPermissionList(adminId);</span><br><span class="line">        <span class="keyword">return</span> CommonResult.success(permissionList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="添加UmsAdminService接口"><a href="#添加UmsAdminService接口" class="headerlink" title="添加UmsAdminService接口"></a>添加UmsAdminService接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.macro.mall.tiny.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.mbg.model.UmsAdmin;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.mbg.model.UmsPermission;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 后台管理员Service</span></span><br><span class="line"><span class="comment"> * Created by macro on 2018/4/26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UmsAdminService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户名获取后台管理员</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    UmsAdmin <span class="title function_">getAdminByUsername</span><span class="params">(String username)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    UmsAdmin <span class="title function_">register</span><span class="params">(UmsAdmin umsAdminParam)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录功能</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 生成的JWT的token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">login</span><span class="params">(String username, String password)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户所有权限（包括角色权限和+-权限）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;UmsPermission&gt; <span class="title function_">getPermissionList</span><span class="params">(Long adminId)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="添加UmsAdminServiceImpl类"><a href="#添加UmsAdminServiceImpl类" class="headerlink" title="添加UmsAdminServiceImpl类"></a>添加UmsAdminServiceImpl类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.macro.mall.tiny.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.common.utils.JwtTokenUtil;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.dao.UmsAdminRoleRelationDao;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.dto.UmsAdminLoginParam;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.mbg.mapper.UmsAdminMapper;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.mbg.model.UmsAdmin;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.mbg.model.UmsAdminExample;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.mbg.model.UmsPermission;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.service.UmsAdminService;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.AuthenticationManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.BadCredentialsException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetails;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.crypto.password.PasswordEncoder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UmsAdminService实现类</span></span><br><span class="line"><span class="comment"> * Created by macro on 2018/4/26.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UmsAdminServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UmsAdminService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(UmsAdminServiceImpl.class);</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtTokenUtil jwtTokenUtil;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.tokenHead&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String tokenHead;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UmsAdminMapper adminMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UmsAdminRoleRelationDao adminRoleRelationDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UmsAdmin <span class="title function_">getAdminByUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="type">UmsAdminExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UmsAdminExample</span>();</span><br><span class="line">        example.createCriteria().andUsernameEqualTo(username);</span><br><span class="line">        List&lt;UmsAdmin&gt; adminList = adminMapper.selectByExample(example);</span><br><span class="line">        <span class="keyword">if</span> (adminList != <span class="literal">null</span> &amp;&amp; adminList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> adminList.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UmsAdmin <span class="title function_">register</span><span class="params">(UmsAdmin umsAdminParam)</span> &#123;</span><br><span class="line">        <span class="type">UmsAdmin</span> <span class="variable">umsAdmin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UmsAdmin</span>();</span><br><span class="line">        BeanUtils.copyProperties(umsAdminParam, umsAdmin);</span><br><span class="line">        umsAdmin.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        umsAdmin.setStatus(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//查询是否有相同用户名的用户</span></span><br><span class="line">        <span class="type">UmsAdminExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UmsAdminExample</span>();</span><br><span class="line">        example.createCriteria().andUsernameEqualTo(umsAdmin.getUsername());</span><br><span class="line">        List&lt;UmsAdmin&gt; umsAdminList = adminMapper.selectByExample(example);</span><br><span class="line">        <span class="keyword">if</span> (umsAdminList.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将密码进行加密操作</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">encodePassword</span> <span class="operator">=</span> passwordEncoder.encode(umsAdmin.getPassword());</span><br><span class="line">        umsAdmin.setPassword(encodePassword);</span><br><span class="line">        adminMapper.insert(umsAdmin);</span><br><span class="line">        <span class="keyword">return</span> umsAdmin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(String username, String password)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">UserDetails</span> <span class="variable">userDetails</span> <span class="operator">=</span> userDetailsService.loadUserByUsername(username);</span><br><span class="line">            <span class="keyword">if</span> (!passwordEncoder.matches(password, userDetails.getPassword())) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BadCredentialsException</span>(<span class="string">&quot;密码不正确&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authentication</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(userDetails, <span class="literal">null</span>, userDetails.getAuthorities());</span><br><span class="line">            SecurityContextHolder.getContext().setAuthentication(authentication);</span><br><span class="line">            token = jwtTokenUtil.generateToken(userDetails);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">            LOGGER.warn(<span class="string">&quot;登录异常:&#123;&#125;&quot;</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;UmsPermission&gt; <span class="title function_">getPermissionList</span><span class="params">(Long adminId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> adminRoleRelationDao.getPermissionList(adminId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="修改Swagger的配置"><a href="#修改Swagger的配置" class="headerlink" title="修改Swagger的配置"></a>修改Swagger的配置</h3><blockquote>
<p>通过修改配置实现调用接口自带Authorization头，这样就可以访问需要登录的接口了。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.macro.mall.tiny.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiKey;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.AuthorizationScope;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.SecurityReference;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.service.contexts.SecurityContext;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Swagger2API文档的配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Swagger2Config</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">createRestApi</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//为当前包下controller生成API文档</span></span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.macro.mall.tiny.controller&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build()</span><br><span class="line">                <span class="comment">//添加登录认证</span></span><br><span class="line">                .securitySchemes(securitySchemes())</span><br><span class="line">                .securityContexts(securityContexts());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;SwaggerUI演示&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;mall-tiny&quot;</span>)</span><br><span class="line">                .contact(<span class="string">&quot;macro&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;ApiKey&gt; <span class="title function_">securitySchemes</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//设置请求头信息</span></span><br><span class="line">        List&lt;ApiKey&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">ApiKey</span> <span class="variable">apiKey</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApiKey</span>(<span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;Authorization&quot;</span>, <span class="string">&quot;header&quot;</span>);</span><br><span class="line">        result.add(apiKey);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;SecurityContext&gt; <span class="title function_">securityContexts</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//设置需要登录认证的路径</span></span><br><span class="line">        List&lt;SecurityContext&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        result.add(getContextByPath(<span class="string">&quot;/brand/.*&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SecurityContext <span class="title function_">getContextByPath</span><span class="params">(String pathRegex)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SecurityContext.builder()</span><br><span class="line">                .securityReferences(defaultAuth())</span><br><span class="line">                .forPaths(PathSelectors.regex(pathRegex))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;SecurityReference&gt; <span class="title function_">defaultAuth</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;SecurityReference&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">AuthorizationScope</span> <span class="variable">authorizationScope</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthorizationScope</span>(<span class="string">&quot;global&quot;</span>, <span class="string">&quot;accessEverything&quot;</span>);</span><br><span class="line">        AuthorizationScope[] authorizationScopes = <span class="keyword">new</span> <span class="title class_">AuthorizationScope</span>[<span class="number">1</span>];</span><br><span class="line">        authorizationScopes[<span class="number">0</span>] = authorizationScope;</span><br><span class="line">        result.add(<span class="keyword">new</span> <span class="title class_">SecurityReference</span>(<span class="string">&quot;Authorization&quot;</span>, authorizationScopes));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="给PmsBrandController接口中的方法添加访问权限"><a href="#给PmsBrandController接口中的方法添加访问权限" class="headerlink" title="给PmsBrandController接口中的方法添加访问权限"></a>给PmsBrandController接口中的方法添加访问权限</h3><ul>
<li>给查询接口添加<code>pms:brand:read</code>权限</li>
<li>给修改接口添加<code>pms:brand:update</code>权限</li>
<li>给删除接口添加<code>pms:brand:delete</code>权限</li>
<li>给添加接口添加<code>pms:brand:create</code>权限</li>
</ul>
<p>例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;pms:brand:read&#x27;)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResult&lt;List&lt;PmsBrand&gt;&gt; <span class="title function_">getBrandList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> CommonResult.success(brandService.listAllBrand());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="认证与授权流程演示"><a href="#认证与授权流程演示" class="headerlink" title="认证与授权流程演示"></a>认证与授权流程演示</h2><p>Swagger api地址：<a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></p>
<p><img src="/%E6%95%B4%E5%90%88SpringSecurity%E5%92%8CJWT%E5%AE%9E%E7%8E%B0%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83/arch_screen_14.png" alt="img"></p>
<h3 id="未登录前访问接口"><a href="#未登录前访问接口" class="headerlink" title="未登录前访问接口"></a>未登录前访问接口</h3><p><img src="/%E6%95%B4%E5%90%88SpringSecurity%E5%92%8CJWT%E5%AE%9E%E7%8E%B0%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83/arch_screen_15.png" alt="img"></p>
<p><img src="/%E6%95%B4%E5%90%88SpringSecurity%E5%92%8CJWT%E5%AE%9E%E7%8E%B0%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83/arch_screen_16.png" alt="img"></p>
<h3 id="登录后访问接口"><a href="#登录后访问接口" class="headerlink" title="登录后访问接口"></a>登录后访问接口</h3><ul>
<li>进行登录操作：登录帐号test 123456</li>
</ul>
<p><img src="/%E6%95%B4%E5%90%88SpringSecurity%E5%92%8CJWT%E5%AE%9E%E7%8E%B0%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83/arch_screen_17.png" alt="img"></p>
<p><img src="/%E6%95%B4%E5%90%88SpringSecurity%E5%92%8CJWT%E5%AE%9E%E7%8E%B0%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83/arch_screen_18.png" alt="img"></p>
<ul>
<li>点击Authorize按钮，在弹框中输入登录接口中获取到的token信息</li>
</ul>
<p><img src="/%E6%95%B4%E5%90%88SpringSecurity%E5%92%8CJWT%E5%AE%9E%E7%8E%B0%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83/arch_screen_19.png" alt="img"></p>
<p><img src="/%E6%95%B4%E5%90%88SpringSecurity%E5%92%8CJWT%E5%AE%9E%E7%8E%B0%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83/arch_screen_20.png" alt="img"></p>
<ul>
<li>登录后访问获取权限列表接口，发现已经可以正常访问</li>
</ul>
<p><img src="/%E6%95%B4%E5%90%88SpringSecurity%E5%92%8CJWT%E5%AE%9E%E7%8E%B0%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83/arch_screen_15.png" alt="img"></p>
<p><img src="/%E6%95%B4%E5%90%88SpringSecurity%E5%92%8CJWT%E5%AE%9E%E7%8E%B0%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83/arch_screen_21.png" alt="img"></p>
<h3 id="访问需要权限的接口"><a href="#访问需要权限的接口" class="headerlink" title="访问需要权限的接口"></a>访问需要权限的接口</h3><blockquote>
<p>由于test帐号并没有设置任何权限，所以他无法访问具有<code>pms:brand:read</code>权限的获取品牌列表接口。</p>
</blockquote>
<p><img src="/%E6%95%B4%E5%90%88SpringSecurity%E5%92%8CJWT%E5%AE%9E%E7%8E%B0%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83/arch_screen_22.png" alt="img"></p>
<p><img src="/%E6%95%B4%E5%90%88SpringSecurity%E5%92%8CJWT%E5%AE%9E%E7%8E%B0%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83/arch_screen_23.png" alt="img"></p>
<h3 id="改用其他有权限的帐号登录"><a href="#改用其他有权限的帐号登录" class="headerlink" title="改用其他有权限的帐号登录"></a>改用其他有权限的帐号登录</h3><blockquote>
<p>改用admin 123456登录后访问，点击Authorize按钮打开弹框,点击logout登出后再重新输入新token。</p>
</blockquote>
<p><code>注意</code>：如果admin帐号密码不对的话，公众号后台回复<code>体验</code>来获取。</p>
<p><img src="/%E6%95%B4%E5%90%88SpringSecurity%E5%92%8CJWT%E5%AE%9E%E7%8E%B0%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83/arch_screen_22.png" alt="img"></p>
<p><img src="/%E6%95%B4%E5%90%88SpringSecurity%E5%92%8CJWT%E5%AE%9E%E7%8E%B0%E8%AE%A4%E8%AF%81%E5%92%8C%E6%8E%88%E6%9D%83/arch_screen_24.png" alt="img"></p>
]]></content>
      <categories>
        <category>SpringSecurity</category>
      </categories>
      <tags>
        <tag>SpringSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSession</title>
    <url>/2021/11/13/Java/Spring%20Session/Spring%20Session/</url>
    <content><![CDATA[<h1 id="springboot、redis和session整合"><a href="#springboot、redis和session整合" class="headerlink" title="springboot、redis和session整合"></a>springboot、redis和session整合</h1><p>官网：<a href="https://docs.spring.io/spring-session/docs/2.5.0/reference/html5/#samples">https://docs.spring.io/spring-session/docs/2.5.0/reference/html5/#samples</a></p>
<h4 id="1、导入依赖"><a href="#1、导入依赖" class="headerlink" title="1、导入依赖"></a>1、导入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis依赖--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 整合 spring session 实现 session 共享--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2、编写application-yml配置文件"><a href="#2、编写application-yml配置文件" class="headerlink" title="2、编写application.yml配置文件"></a>2、编写application.yml配置文件</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.10</span><span class="number">.123</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 配置session</span></span><br><span class="line">  <span class="attr">session:</span></span><br><span class="line">    <span class="comment">#存储在redis中</span></span><br><span class="line">    <span class="attr">store-type:</span> <span class="string">redis</span></span><br><span class="line">    <span class="comment"># 过期时间30分钟，可不要</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="string">30m</span></span><br></pre></td></tr></table></figure>

<h4 id="3、配置类SessionConfig-java"><a href="#3、配置类SessionConfig-java" class="headerlink" title="3、配置类SessionConfig.java"></a>3、配置类SessionConfig.java</h4><p>可以不用配置，根据实际情况配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.session.web.http.CookieSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.session.web.http.DefaultCookieSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CookieSerializer <span class="title function_">cookieSerializer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DefaultCookieSerializer</span> <span class="variable">cookieSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultCookieSerializer</span>();</span><br><span class="line">        <span class="comment">//设置cookie作用域</span></span><br><span class="line">        cookieSerializer.setDomainName(<span class="string">&quot;mall.com&quot;</span>);</span><br><span class="line">        <span class="comment">//可设置cookie的名字,默认SESSION</span></span><br><span class="line">        cookieSerializer.setCookieName(<span class="string">&quot;SESSION&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> cookieSerializer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisSerializer&lt;Object&gt; <span class="title function_">springSessionDefaultRedisSerializer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//使用JSON的序列化方式来序列化对象到Redis中</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="4、主启动类增加注解：-EnableRedisHttpSession"><a href="#4、主启动类增加注解：-EnableRedisHttpSession" class="headerlink" title="4、主启动类增加注解：@EnableRedisHttpSession"></a>4、主启动类增加注解：@EnableRedisHttpSession</h4><h4 id="5、使用"><a href="#5、使用" class="headerlink" title="5、使用"></a>5、使用</h4><p><strong>在不同服务中：存入数据和取数据，都需以上四个步骤</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loginPage</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">	<span class="comment">//设置存入的数据，data可以是实体对象</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOGIN_USER</span> <span class="operator">=</span> <span class="string">&quot;loginUser&quot;</span>;</span><br><span class="line">	session.setAttribute(LOGIN_USER,data);</span><br><span class="line">	<span class="comment">//从session中取出数据</span></span><br><span class="line">	session.getAttribute(LOGIN_USER);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//直接从前端获取session数据</span></span><br><span class="line">$&#123;session.loginUser&#125;</span><br></pre></td></tr></table></figure>

<h1 id="SpringSession-核心原理"><a href="#SpringSession-核心原理" class="headerlink" title="SpringSession 核心原理"></a>SpringSession 核心原理</h1><p>@EnableRedisHttpSession 导入 RedisHttpSessionConfiguration 配置</p>
<p>1、给容器中添加了一个组件 RedisOperationsSessionRepository：Redis操作session，session的增删改查封装类；</p>
<p>2、继承 SpringHttpSessionConfiguration 初始化了一个 SessionRepositoryFilter：session 存储过滤器；每个请求过来都必须经过 Filter 组件；创建的时候，自动从容器中获取到了 SessionRepository；</p>
<p> SessionRepositoryFilter：</p>
<ul>
<li>将原生的 HttpServletRequest Response 包装成 SessionRepositoryRequestWrapper ResponseWrapper；包装后的对象应用到了后面整个执行链；</li>
<li>以后获取 request.getSession(); 都会调用 wrappedRequesr.getSession(); 从SessionRepository获取；</li>
</ul>
<p>3、装饰者模式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    request.setAttribute(SESSION_REPOSITORY_ATTR, <span class="built_in">this</span>.sessionRepository);</span><br><span class="line">    SessionRepositoryFilter&lt;S&gt;.<span class="type">SessionRepositoryRequestWrapper</span> <span class="variable">wrappedRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SessionRepositoryFilter</span>.SessionRepositoryRequestWrapper(request, response);</span><br><span class="line">    SessionRepositoryFilter.<span class="type">SessionRepositoryResponseWrapper</span> <span class="variable">wrappedResponse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SessionRepositoryFilter</span>.SessionRepositoryResponseWrapper(wrappedRequest, response);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        filterChain.doFilter(wrappedRequest, wrappedResponse);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        wrappedRequest.commitSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SpringSession</category>
      </categories>
      <tags>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>MybatisPlus整合</title>
    <url>/2020/09/07/Java/MbatisPlus/mybatisplus/</url>
    <content><![CDATA[<h2 id="MybatisPlus整合"><a href="#MybatisPlus整合" class="headerlink" title="MybatisPlus整合"></a>MybatisPlus整合</h2><p>参考网站 ：<a href="https://baomidou.com/">https://baomidou.com/</a></p>
<h3 id="1-配置环境"><a href="#1-配置环境" class="headerlink" title="1 配置环境"></a>1 配置环境</h3><h4 id="1-1、导入依赖"><a href="#1-1、导入依赖" class="headerlink" title="1.1、导入依赖"></a>1.1、导入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-2、配置数据源"><a href="#2-2、配置数据源" class="headerlink" title="2.2、配置数据源"></a>2.2、配置数据源</h4><p>配置数据源</p>
<ol>
<li><h5 id="导入数据库驱动"><a href="#导入数据库驱动" class="headerlink" title="导入数据库驱动"></a>导入数据库驱动</h5><p><a href="https://mvnrepository.com/artifact/mysql/mysql-connector-java">https://mvnrepository.com/artifact/mysql/mysql-connector-java</a></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入mysql驱动--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="在application-yml配置数据源相关信息"><a href="#在application-yml配置数据源相关信息" class="headerlink" title="在application.yml配置数据源相关信息"></a>在application.yml配置数据源相关信息</h5><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://gulimall-mysql:3306/gulimall_pms?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xxx</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/**/*.xml</span></span><br><span class="line"><span class="comment">#  主键自增</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#      逻辑删除</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">flag</span> <span class="comment"># 全局逻辑删除的实体字段名(since 3.3.0,配置后可以忽略不配置步骤2)</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="comment"># 逻辑已删除值(默认为 1)</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> <span class="comment"># 逻辑未删除值(默认为 0)</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>配置MyBatis-Plus包扫描：</p>
<ol>
<li><p>使用@MapperScanner</p>
</li>
<li><p>告诉MyBatis-Plus,Sql映射文件位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;wang.yg.product.dao&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GulimallProductApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(GulimallProductApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>具体过程参考官网： <a href="https://baomidou.com/guide/install.html#release">https://baomidou.com/guide/install.html#release</a></p>
<h3 id="2-分页配置"><a href="#2-分页配置" class="headerlink" title="2 分页配置"></a>2 分页配置</h3><p> &#x2F;&#x2F; 最新版</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> wang.yg.gulimall.product.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Spring boot方式</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;wang.yg.product.dao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最新版</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">// 声明配置类</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">// 开启注解</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.atguigu.gulimall.product.dao&quot;)</span> <span class="comment">// 指定扫描包</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 引入分页插件 拦截器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PaginationInterceptor <span class="title function_">paginationInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">PaginationInterceptor</span> <span class="variable">paginationInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PaginationInterceptor</span>();</span><br><span class="line">        <span class="comment">// 设置请求的页面大于最大页后操作， true调回到首页，false 继续请求  默认false</span></span><br><span class="line">         paginationInterceptor.setOverflow(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 设置最大单页限制数量，默认 500 条，-1 不受限制</span></span><br><span class="line">         paginationInterceptor.setLimit(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">// 开启 count 的 join 优化,只针对部分 left join</span></span><br><span class="line">        paginationInterceptor.setCountSqlParser(<span class="keyword">new</span> <span class="title class_">JsqlParserCountOptimize</span>(<span class="literal">true</span>));</span><br><span class="line">        <span class="keyword">return</span> paginationInterceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-逻辑删除"><a href="#3-逻辑删除" class="headerlink" title="3 逻辑删除"></a>3 逻辑删除</h3><p>说明:</p>
<p>只对自动注入的sql起效:</p>
<ul>
<li>插入: 不作限制</li>
<li>查找: 追加where条件过滤掉已删除数据,且使用 wrapper.entity 生成的where条件会忽略该字段</li>
<li>更新: 追加where条件防止更新到已删除数据,且使用 wrapper.entity 生成的where条件会忽略该字段</li>
<li>删除: 转变为 更新</li>
</ul>
<p>例如:</p>
<ul>
<li>删除: <code>update user set deleted=1 where id = 1 and deleted=0</code></li>
<li>查找: <code>select id,name,deleted from user where deleted=0</code></li>
</ul>
<h4 id="步骤1：配置-application-yml"><a href="#步骤1：配置-application-yml" class="headerlink" title="步骤1：配置 application.yml"></a>步骤1：配置 application.yml</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:/mapper/**/*.xml</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span> <span class="comment"># 数据库主键自增</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span> <span class="comment"># 逻辑已删除值(默认为 1)</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span> <span class="comment"># 逻辑未删除值(默认为 0)</span></span><br></pre></td></tr></table></figure>

<h4 id="步骤2-实体类字段上加上-TableLogic注解"><a href="#步骤2-实体类字段上加上-TableLogic注解" class="headerlink" title="步骤2: 实体类字段上加上@TableLogic注解"></a>步骤2: 实体类字段上加上<code>@TableLogic</code>注解</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否显示[0-不显示，1显示]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableLogic(value = &quot;1&quot;,delval = &quot;0&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Integer showStatus;</span><br></pre></td></tr></table></figure>

<h3 id="4-实体类"><a href="#4-实体类" class="headerlink" title="4.实体类"></a>4.实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   *  重要 mybatis对应的数据库的属性字段的命名不可以用‘大写’</span></span><br><span class="line"><span class="comment">   *  数据库的字段命名方式为使用下划线连接，对应的实体类应该是驼峰命名方式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@TableName(&quot;tb_user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/*查询不能被查出*/</span></span><br><span class="line">    <span class="meta">@TableField(select = false)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">/*名词不匹配的时候*/</span></span><br><span class="line">    <span class="meta">@TableField(value = &quot;email&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    数据库中不存在这个字段</span></span><br><span class="line"><span class="comment">    @TableField(exist = false)</span></span><br><span class="line"><span class="comment">    private String address;*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-mapper层"><a href="#5-mapper层" class="headerlink" title="5.mapper层"></a>5.mapper层</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> wang.yinggang.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> wang.yinggang.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="6-使用"><a href="#6-使用" class="headerlink" title="6.使用"></a>6.使用</h3><h4 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">eq(R column, <span class="title class_">Object</span> val); <span class="regexp">//</span> 等价于 =，例: eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;老王&quot;</span>) ---&gt; name = <span class="string">&#x27;老王&#x27;</span></span><br><span class="line">ne(R column, <span class="title class_">Object</span> val); <span class="regexp">//</span> 等价于 &lt;&gt;，例: ne(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;老王&quot;</span>) ---&gt; name &lt;&gt; <span class="string">&#x27;老王&#x27;</span></span><br><span class="line">gt(R column, <span class="title class_">Object</span> val); <span class="regexp">//</span> 等价于 &gt;，例: gt(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;老王&quot;</span>) ---&gt; name &gt; <span class="string">&#x27;老王&#x27;</span></span><br><span class="line">ge(R column, <span class="title class_">Object</span> val); <span class="regexp">//</span> 等价于 &gt;=，例: ge(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;老王&quot;</span>) ---&gt; name &gt;= <span class="string">&#x27;老王&#x27;</span></span><br><span class="line">lt(R column, <span class="title class_">Object</span> val); <span class="regexp">//</span> 等价于 &lt;，例: lt(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;老王&quot;</span>) ---&gt; name &lt; <span class="string">&#x27;老王&#x27;</span></span><br><span class="line">le(R column, <span class="title class_">Object</span> val); <span class="regexp">//</span> 等价于 &lt;=，例: le(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;老王&quot;</span>) ---&gt; name &lt;= <span class="string">&#x27;老王&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h4><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">between(R column, <span class="built_in">Object</span> val1, <span class="built_in">Object</span> val2); <span class="comment">// 等价于 between a and b, 例： between(&quot;age&quot;, 18, 30) ---&gt; age between 18 and 30</span></span><br><span class="line">notBetween(R column, <span class="built_in">Object</span> val1, <span class="built_in">Object</span> val2); <span class="comment">// 等价于 not between a and b, 例： notBetween(&quot;age&quot;, 18, 30) ---&gt; age not between 18 and 30</span></span><br><span class="line"><span class="keyword">in</span>(R column, <span class="built_in">Object</span>... values); <span class="comment">// 等价于 字段 IN (v0, v1, ...),例: in(&quot;age&quot;,&#123;1,2,3&#125;) ---&gt; age in (1,2,3)</span></span><br><span class="line">notIn(R column, <span class="built_in">Object</span>... values); <span class="comment">// 等价于 字段 NOT IN (v0, v1, ...), 例: notIn(&quot;age&quot;,&#123;1,2,3&#125;) ---&gt; age not in (1,2,3)</span></span><br><span class="line">inSql(R column, <span class="built_in">Object</span>... values); <span class="comment">// 等价于 字段 IN (sql 语句), 例: inSql(&quot;id&quot;, &quot;select id from table where id &lt; 3&quot;) ---&gt; id in (select id from table where id &lt; 3)</span></span><br><span class="line">notInSql(R column, <span class="built_in">Object</span>... values); <span class="comment">// 等价于 字段 NOT IN (sql 语句)</span></span><br></pre></td></tr></table></figure>

<h4 id="like"><a href="#like" class="headerlink" title="like"></a>like</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">like(R column, <span class="title class_">Object</span> val); <span class="regexp">//</span> 等价于 <span class="variable constant_">LIKE</span> <span class="string">&#x27;%值%&#x27;</span>，例: like(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;王&quot;</span>) ---&gt; name like <span class="string">&#x27;%王%&#x27;</span></span><br><span class="line">notLike(R column, <span class="title class_">Object</span> val); <span class="regexp">//</span> 等价于 <span class="variable constant_">NOT</span> <span class="variable constant_">LIKE</span> <span class="string">&#x27;%值%&#x27;</span>，例: notLike(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;王&quot;</span>) ---&gt; name <span class="keyword">not</span> like <span class="string">&#x27;%王%&#x27;</span></span><br><span class="line">likeLeft(R column, <span class="title class_">Object</span> val); <span class="regexp">//</span> 等价于 <span class="variable constant_">LIKE</span> <span class="string">&#x27;%值&#x27;</span>，例: likeLeft(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;王&quot;</span>) ---&gt; name like <span class="string">&#x27;%王&#x27;</span></span><br><span class="line">likeRight(R column, <span class="title class_">Object</span> val); <span class="regexp">//</span> 等价于 <span class="variable constant_">LIKE</span> <span class="string">&#x27;值%&#x27;</span>，例: likeRight(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;王&quot;</span>) ---&gt; name like <span class="string">&#x27;王%&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="空值比较"><a href="#空值比较" class="headerlink" title="空值比较"></a>空值比较</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">isNull(R column); <span class="regexp">//</span> 等价于 <span class="variable constant_">IS</span> <span class="variable constant_">NULL</span>，例: isNull(<span class="string">&quot;name&quot;</span>) ---&gt; name is null</span><br><span class="line">isNotNull(R column); <span class="regexp">//</span> 等价于 <span class="variable constant_">IS</span> <span class="variable constant_">NOT</span> <span class="variable constant_">NULL</span>，例: isNotNull(<span class="string">&quot;name&quot;</span>) ---&gt; name is <span class="keyword">not</span> null</span><br></pre></td></tr></table></figure>

<h4 id="【分组、排序：（group、having、order）】"><a href="#【分组、排序：（group、having、order）】" class="headerlink" title="【分组、排序：（group、having、order）】"></a>【分组、排序：（group、having、order）】</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">groupBy(R... columns); <span class="regexp">//</span> 等价于 <span class="variable constant_">GROUP</span> <span class="variable constant_">BY</span> 字段, ...， 例: groupBy(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>) ---&gt; group by id,name</span><br><span class="line">orderByAsc(R... columns); <span class="regexp">//</span> 等价于 <span class="variable constant_">ORDER</span> <span class="variable constant_">BY</span> 字段, ... <span class="variable constant_">ASC</span>， 例: orderByAsc(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>) ---&gt; order by id <span class="variable constant_">ASC</span>,name <span class="variable constant_">ASC</span></span><br><span class="line">orderByDesc(R... columns); <span class="regexp">//</span> 等价于 <span class="variable constant_">ORDER</span> <span class="variable constant_">BY</span> 字段, ... <span class="variable constant_">DESC</span>， 例: orderByDesc(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>) ---&gt; order by id <span class="variable constant_">DESC</span>,name <span class="variable constant_">DESC</span></span><br><span class="line">having(<span class="title class_">String</span> sqlHaving, <span class="title class_">Object</span>... params); <span class="regexp">//</span> 等价于 <span class="variable constant_">HAVING</span> ( sql语句 )， 例: having(<span class="string">&quot;sum(age) &gt; &#123;0&#125;&quot;</span>, <span class="number">11</span>) ---&gt; having sum(age) &gt; <span class="number">11</span></span><br></pre></td></tr></table></figure>

<h4 id="【拼接、嵌套-sql：（or、and、nested、apply）】"><a href="#【拼接、嵌套-sql：（or、and、nested、apply）】" class="headerlink" title="【拼接、嵌套 sql：（or、and、nested、apply）】"></a>【拼接、嵌套 sql：（or、and、nested、apply）】</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">or</span>(); <span class="regexp">//</span> 等价于 a <span class="keyword">or</span> b， 例：eq(<span class="string">&quot;id&quot;</span>,<span class="number">1</span>).<span class="keyword">or</span>().eq(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;老王&quot;</span>) ---&gt; id = <span class="number">1</span> <span class="keyword">or</span> name = <span class="string">&#x27;老王&#x27;</span></span><br><span class="line"><span class="keyword">or</span>(<span class="title class_">Consumer</span>&lt;<span class="title class_">Param</span>&gt; consumer); <span class="regexp">//</span> 等价于 <span class="keyword">or</span>(a <span class="keyword">or</span>/<span class="keyword">and</span> b)，<span class="keyword">or</span> 嵌套。例: <span class="keyword">or</span>(i -&gt; i.eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;李白&quot;</span>).ne(<span class="string">&quot;status&quot;</span>, <span class="string">&quot;活着&quot;</span>)) ---&gt; <span class="keyword">or</span> (name = <span class="string">&#x27;李白&#x27;</span> <span class="keyword">and</span> status &lt;&gt; <span class="string">&#x27;活着&#x27;</span>)</span><br><span class="line"><span class="keyword">and</span>(<span class="title class_">Consumer</span>&lt;<span class="title class_">Param</span>&gt; consumer); <span class="regexp">//</span> 等价于 <span class="keyword">and</span>(a <span class="keyword">or</span>/<span class="keyword">and</span> b)，<span class="keyword">and</span> 嵌套。例: <span class="keyword">and</span>(i -&gt; i.eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;李白&quot;</span>).ne(<span class="string">&quot;status&quot;</span>, <span class="string">&quot;活着&quot;</span>)) ---&gt; <span class="keyword">and</span> (name = <span class="string">&#x27;李白&#x27;</span> <span class="keyword">and</span> status &lt;&gt; <span class="string">&#x27;活着&#x27;</span>)</span><br><span class="line">nested(<span class="title class_">Consumer</span>&lt;<span class="title class_">Param</span>&gt; consumer); <span class="regexp">//</span> 等价于 (a <span class="keyword">or</span>/<span class="keyword">and</span> b)，普通嵌套。例: nested(i -&gt; i.eq(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;李白&quot;</span>).ne(<span class="string">&quot;status&quot;</span>, <span class="string">&quot;活着&quot;</span>)) ---&gt; (name = <span class="string">&#x27;李白&#x27;</span> <span class="keyword">and</span> status &lt;&gt; <span class="string">&#x27;活着&#x27;</span>)</span><br><span class="line">apply(<span class="title class_">String</span> applySql, <span class="title class_">Object</span>... params); <span class="regexp">//</span> 拼接sql（若不使用 params 参数，可能存在 sql 注入），例: apply(<span class="string">&quot;date_format(dateColumn,&#x27;%Y-%m-%d&#x27;) = &#123;0&#125;&quot;</span>, <span class="string">&quot;2008-08-08&quot;</span>) ---&gt; date_format(dateColumn,<span class="string">&#x27;%Y-%m-%d&#x27;</span>) = <span class="string">&#x27;2008-08-08&#x27;</span><span class="string">&quot;)</span></span><br><span class="line"><span class="string">last(String lastSql); // 无视优化规则直接拼接到 sql 的最后，可能存若在 sql 注入。</span></span><br><span class="line"><span class="string">exists(String existsSql); // 拼接 exists 语句。例: exists(&quot;</span>select id from table where age = <span class="number">1</span><span class="string">&quot;) ---&gt; exists (select id from table where age = 1)</span></span><br></pre></td></tr></table></figure>

<h4 id="QueryWrapper"><a href="#QueryWrapper" class="headerlink" title="QueryWrapper"></a>QueryWrapper</h4><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">select(<span class="title class_">String</span>... sqlSelect); <span class="regexp">//</span> 用于定义需要返回的字段。例： select(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>) ---&gt; select id, name, age</span><br><span class="line">select(<span class="title class_">Predicate</span>&lt;<span class="title class_">TableFieldInfo</span>&gt; predicate); <span class="regexp">//</span> <span class="title class_">Lambda</span> 表达式，过滤需要的字段。</span><br><span class="line"><span class="built_in">lambda</span>(); <span class="regexp">//</span> 返回一个 <span class="title class_">LambdaQueryWrapper</span></span><br></pre></td></tr></table></figure>

<h4 id="UpdateWrapper"><a href="#UpdateWrapper" class="headerlink" title="UpdateWrapper"></a>UpdateWrapper</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span>(String column, Object val); // 用于设置 <span class="built_in">set</span> 字段值。例: <span class="built_in">set</span>(<span class="string">&quot;name&quot;</span>, null) ---&gt; <span class="built_in">set</span> name = null</span><br><span class="line">setSql(String sql); // 用于设置 <span class="built_in">set</span> 字段值。例: setSql(<span class="string">&quot;name = &#x27;老李头&#x27;&quot;</span>) ---&gt; <span class="built_in">set</span> name = <span class="string">&#x27;老李头&#x27;</span></span><br></pre></td></tr></table></figure>









<h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><ul>
<li><h5 id="查询全部"><a href="#查询全部" class="headerlink" title="查询全部"></a>查询全部</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">userMapper.selectList(null)；</span><br></pre></td></tr></table></figure>




</li>
<li><h5 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">wrapper.like(<span class="string">&quot;email&quot;</span>,<span class="string">&quot;@&quot;</span>);</span><br><span class="line">List&lt;User&gt; userList = userMapper.selectList(wrapper);</span><br></pre></td></tr></table></figure>




</li>
<li><h5 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//current 当前页 size 每页查询条数</span></span><br><span class="line"> Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">	 QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line"> 	 wrapper.like(<span class="string">&quot;email&quot;</span>,<span class="string">&quot;@&quot;</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//分页查询</span></span><br><span class="line"> IPage&lt;User&gt; ipage = userMapper.selectPage(page, wrapper);</span><br><span class="line">  </span><br><span class="line">       System.out.println(<span class="string">&quot;获取分页信息&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;总条数&quot;</span>+ipage.getTotal());</span><br><span class="line">       System.out.println(<span class="string">&quot;当前页码&quot;</span>+ipage.getCurrent());</span><br><span class="line">       System.out.println(<span class="string">&quot;总页码&quot;</span>+ipage.getPages());</span><br><span class="line">       System.out.println(<span class="string">&quot;每页显示的条数&quot;</span>+ipage.getSize());</span><br><span class="line">  </span><br><span class="line">       <span class="comment">//结果</span></span><br><span class="line">       List&lt;User&gt; records = ipage.getRecords();</span><br><span class="line">       <span class="keyword">for</span> (User record : records) &#123;</span><br><span class="line">           System.out.println(record);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="通过id查询"><a href="#通过id查询" class="headerlink" title="通过id查询"></a>通过id查询</h5></li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><h5 id="通过id批量查询"><a href="#通过id批量查询" class="headerlink" title="通过id批量查询"></a>通过id批量查询</h5></li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; users = userMapper.selectBatchIds(Arrays.asList(<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li><h5 id="查询数据条数"><a href="#查询数据条数" class="headerlink" title="查询数据条数"></a>查询数据条数</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">wrapper.gt(<span class="string">&quot;age&quot;</span>,<span class="number">20</span>);<span class="comment">//年龄大于20岁</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> userMapper.selectCount(wrapper);</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h4><ul>
<li><h5 id="新增一条数据"><a href="#新增一条数据" class="headerlink" title="新增一条数据"></a>新增一条数据</h5></li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="literal">null</span>,<span class="string">&quot;lisi&quot;</span>,<span class="number">14</span>,<span class="string">&quot;12345@qq.com&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.insert(user); <span class="comment">//不等于0插入数据成功</span></span><br></pre></td></tr></table></figure>
<h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><ul>
<li><h5 id="根据ID更新"><a href="#根据ID更新" class="headerlink" title="根据ID更新"></a>根据ID更新</h5></li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>,<span class="string">&quot;lisi&quot;</span>,<span class="number">14</span>,<span class="string">&quot;12345@qq.com&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.updateById(user);</span><br></pre></td></tr></table></figure>
<ul>
<li>根据条件进行更新QueryWrapper</li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*更新的内容为将age 设置为20*/</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setAge(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">/*查询根据name为lisi的数据进行更新*/</span></span><br><span class="line">        wrapper.eq(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.update(user, wrapper);</span><br></pre></td></tr></table></figure>
<ul>
<li><h5 id="根据条件进行更新UpdateWrapper"><a href="#根据条件进行更新UpdateWrapper" class="headerlink" title="根据条件进行更新UpdateWrapper"></a>根据条件进行更新UpdateWrapper</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">UpdateWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">UpdateWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        wrapper.set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>).set(<span class="string">&quot;age&quot;</span>,<span class="number">13</span>)<span class="comment">//更新的字段</span></span><br><span class="line">        .eq(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;lisi&quot;</span>);<span class="comment">//更新的条件</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.update(<span class="literal">null</span>, wrapper);</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><ul>
<li><h5 id="删除一条数据"><a href="#删除一条数据" class="headerlink" title="删除一条数据"></a>删除一条数据</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.deleteById(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="根据条件删除一条数据deleteByMap"><a href="#根据条件删除一条数据deleteByMap" class="headerlink" title="根据条件删除一条数据deleteByMap"></a>根据条件删除一条数据deleteByMap</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*删除条件*/</span></span><br><span class="line">        HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;age&quot;</span>,<span class="number">13</span>);</span><br><span class="line">		<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.deleteByMap(map);</span><br></pre></td></tr></table></figure>




</li>
<li><h5 id="根据条件删除一条数据"><a href="#根据条件删除一条数据" class="headerlink" title="根据条件删除一条数据"></a>根据条件删除一条数据</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*删除条件*/</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">       user.setAge(<span class="number">20</span>);</span><br><span class="line">      QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;(user);</span><br><span class="line">       <span class="comment">/*根据包装/条件 删除*/</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.delete(wrapper);</span><br></pre></td></tr></table></figure>


</li>
<li><h5 id="根据条件删除一条数据-1"><a href="#根据条件删除一条数据-1" class="headerlink" title="根据条件删除一条数据"></a>根据条件删除一条数据</h5></li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">       wrapper.eq(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;lisi&quot;</span>)</span><br><span class="line">               .eq(<span class="string">&quot;age&quot;</span>,<span class="number">13</span>);</span><br><span class="line">       <span class="comment">/*根据包装/条件 删除*/</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.delete(wrapper);</span><br></pre></td></tr></table></figure>

<ul>
<li><h5 id="通过条件批量删除数据"><a href="#通过条件批量删除数据" class="headerlink" title="通过条件批量删除数据"></a>通过条件批量删除数据</h5></li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> userMapper.deleteBatchIds(Arrays.asList(<span class="number">3</span>,<span class="number">4</span>));</span><br></pre></td></tr></table></figure>

<ul>
<li>通过id查询</li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>通过id查询</li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>通过id查询</li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>通过id查询</li>
</ul>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">5</span>);</span><br></pre></td></tr></table></figure>









<h3 id="7-复杂查询"><a href="#7-复杂查询" class="headerlink" title="7.复杂查询"></a>7.复杂查询</h3><h4 id="PageUtils-封装分页返回"><a href="#PageUtils-封装分页返回" class="headerlink" title="PageUtils 封装分页返回"></a>PageUtils 封装分页返回</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.yg.common.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.metadata.IPage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageUtils</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 总记录数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> totalCount;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 每页记录数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> pageSize;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 总页数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> totalPage;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 当前页数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> currPage;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 列表数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> List&lt;?&gt; list;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 分页</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> list        列表数据</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> totalCount  总记录数</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> pageSize    每页记录数</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> currPage    当前页数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">PageUtils</span><span class="params">(List&lt;?&gt; list, <span class="type">int</span> totalCount, <span class="type">int</span> pageSize, <span class="type">int</span> currPage)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.list = list;</span><br><span class="line">      <span class="built_in">this</span>.totalCount = totalCount;</span><br><span class="line">      <span class="built_in">this</span>.pageSize = pageSize;</span><br><span class="line">      <span class="built_in">this</span>.currPage = currPage;</span><br><span class="line">      <span class="built_in">this</span>.totalPage = (<span class="type">int</span>)Math.ceil((<span class="type">double</span>)totalCount/pageSize);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 分页</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">PageUtils</span><span class="params">(IPage&lt;?&gt; page)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.list = page.getRecords();</span><br><span class="line">      <span class="built_in">this</span>.totalCount = (<span class="type">int</span>)page.getTotal();</span><br><span class="line">      <span class="built_in">this</span>.pageSize = (<span class="type">int</span>)page.getSize();</span><br><span class="line">      <span class="built_in">this</span>.currPage = (<span class="type">int</span>)page.getCurrent();</span><br><span class="line">      <span class="built_in">this</span>.totalPage = (<span class="type">int</span>)page.getPages();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h4 id="查询三级分类"><a href="#查询三级分类" class="headerlink" title="查询三级分类"></a>查询三级分类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回查询所有分类以及子子分类，以树形结构组装起来    </span></span><br><span class="line">List&lt;CategoryEntity&gt; <span class="title function_">listWithTree</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<p>实现类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> List&lt;CategoryEntity&gt; <span class="title function_">listWithTree</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">// 1、查出所有分类 设置为null查询全部</span></span><br><span class="line">      List&lt;CategoryEntity&gt; entities = baseMapper.selectList(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 2、组装成父子的树形结构</span></span><br><span class="line">      List&lt;CategoryEntity&gt; levelList = entities.stream().filter(categoryEntity -&gt; &#123;</span><br><span class="line">          <span class="comment">// parentCid ==0 为父目录默认0</span></span><br><span class="line">          <span class="keyword">return</span> categoryEntity.getParentCid() == <span class="number">0</span>;</span><br><span class="line">      &#125;).map(menu -&gt; &#123;</span><br><span class="line">          <span class="comment">// 设置二三级分类 递归</span></span><br><span class="line">          menu.setChildren(getChildrens(menu,entities));</span><br><span class="line">          <span class="keyword">return</span> menu;</span><br><span class="line">      &#125;).sorted((menu1, menu2) -&gt; &#123;</span><br><span class="line">          <span class="comment">//  排序 Sort字段排序</span></span><br><span class="line">          <span class="keyword">return</span> (menu1.getSort() == <span class="literal">null</span> ? <span class="number">0</span> : menu1.getSort()) - (menu2.getSort() == <span class="literal">null</span> ? <span class="number">0</span> : menu2.getSort());</span><br><span class="line">      &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> levelList;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   *  递归查询子分类</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> root 当前category对象</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> all  全部分类数据</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> List&lt;CategoryEntity&gt; <span class="title function_">getChildrens</span><span class="params">(CategoryEntity root, List&lt;CategoryEntity&gt; all)</span> &#123;</span><br><span class="line"></span><br><span class="line">      List&lt;CategoryEntity&gt; collect = all.stream().filter(categoryEntity -&gt; &#123;</span><br><span class="line">          <span class="comment">// 遍历所有的category对象的父类id = 等于root的分类id 说明是他的子类</span></span><br><span class="line">          <span class="keyword">return</span> categoryEntity.getParentCid() == root.getCatId();</span><br><span class="line">      &#125;).map(menu -&gt; &#123;</span><br><span class="line">          <span class="comment">// 1、递归遍历菜单</span></span><br><span class="line">          menu.setChildren(getChildrens(menu, all));</span><br><span class="line">          <span class="keyword">return</span> menu;</span><br><span class="line">      &#125;).sorted((menu1, menu2) -&gt; &#123;</span><br><span class="line">          <span class="comment">// 2、菜单排序</span></span><br><span class="line">          <span class="keyword">return</span> (menu1.getSort() == <span class="literal">null</span> ? <span class="number">0</span> : menu1.getSort()) - (menu2.getSort() == <span class="literal">null</span> ? <span class="number">0</span> : menu2.getSort());</span><br><span class="line">      &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> collect;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<h4 id="分类修改-回显级联选择器"><a href="#分类修改-回显级联选择器" class="headerlink" title="分类修改 &amp; 回显级联选择器"></a>分类修改 &amp; 回显级联选择器</h4><p>通过一个路径找他的原始路径</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Long[] findCatelogPath(Long catelogId) &#123;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;Long&gt; paths = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    ArrayList&lt;Long&gt; pathParents = findParentPath(catelogId, paths);</span><br><span class="line">    Collections.reverse(pathParents);</span><br><span class="line">    <span class="keyword">return</span> (Long[]) pathParents.toArray(<span class="keyword">new</span> <span class="title class_">Long</span>[pathParents.size()]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ArrayList&lt;Long&gt; <span class="title function_">findParentPath</span><span class="params">(Long catelogId, ArrayList&lt;Long&gt; paths)</span> &#123;</span><br><span class="line">    paths.add(catelogId);</span><br><span class="line">    <span class="type">CategoryEntity</span> <span class="variable">byId</span> <span class="operator">=</span> <span class="built_in">this</span>.getById(catelogId);</span><br><span class="line">    <span class="keyword">if</span> (byId.getParentCid() != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">parentCid</span> <span class="operator">=</span> byId.getParentCid();</span><br><span class="line">        findParentPath(parentCid, paths);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> paths;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>一对多查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_checkitem</span><br><span class="line">   <span class="keyword">where</span> id</span><br><span class="line">  <span class="keyword">in</span> (<span class="keyword">select</span> checkitem_id <span class="keyword">from</span> t_checkgroup_checkitem <span class="keyword">where</span> checkgroup_id<span class="operator">=</span>#&#123;id&#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MybatisPlus</category>
      </categories>
      <tags>
        <tag>MybatisPlus</tag>
      </tags>
  </entry>
  <entry>
    <title>Gateway的使用笔记</title>
    <url>/2021/03/18/Java/SpringCloud/Gateway%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Gateway的使用"><a href="#Gateway的使用" class="headerlink" title="Gateway的使用"></a>Gateway的使用</h1><h2 id="1-什么是-API-网关（API-Gateway）"><a href="#1-什么是-API-网关（API-Gateway）" class="headerlink" title="1. 什么是 API 网关（API Gateway）"></a>1. 什么是 API 网关（API Gateway）</h2><img src="Gateway%E7%9A%84%E4%BD%BF%E7%94%A8/aHR0cDovL2Nvcy5yYWluMTAyNC5jb20vbWFya2Rvd24vaW1hZ2UtMjAxOTEwMDgxNjAzMjUwMjEucG5n" alt="img" style="zoom:50%;" />

<h3 id="API-网关的分类与功能"><a href="#API-网关的分类与功能" class="headerlink" title="API 网关的分类与功能"></a>API 网关的分类与功能</h3><img src="Gateway%E7%9A%84%E4%BD%BF%E7%94%A8/aHR0cDovL2Nvcy5yYWluMTAyNC5jb20vbWFya2Rvd24vaW1hZ2UtMjAxOTEwMDgxNjAzNTQ5NTcucG5n" alt="img" style="zoom: 50%;" />

<h2 id="2-Gateway是什么"><a href="#2-Gateway是什么" class="headerlink" title="2. Gateway是什么"></a>2. Gateway是什么</h2><blockquote>
<p>Spring Cloud Gateway是Spring官方基于Spring 5.0，Spring Boot 2.0和Project Reactor等技术开发的网关，Spring Cloud Gateway旨在为微服务架构提供一种简单而有效的统一的API路由管理方式。Spring Cloud Gateway作为Spring Cloud生态系中的网关，目标是替代ZUUL，其不仅提供统一的路由方式，并且基于Filter链的方式提供了网关基本的功能，例如：安全，监控&#x2F;埋点，和限流等。</p>
</blockquote>
<h2 id="3-为什么用Gateway"><a href="#3-为什么用Gateway" class="headerlink" title="3. 为什么用Gateway"></a>3. 为什么用Gateway</h2><p>Spring Cloud Gateway 可以看做是一个 Zuul 1.x 的升级版和代替品，比 Zuul 2 更早的使用 Netty 实现异步 IO，从而实现了一个简单、比 Zuul 1.x 更高效的、与 Spring Cloud 紧密配合的 API 网关。<br>Spring Cloud Gateway 里明确的区分了 Router 和 Filter，并且一个很大的特点是内置了非常多的开箱即用功能，并且都可以通过 SpringBoot 配置或者手工编码链式调用来使用。<br>比如内置了 10 种 Router，使得我们可以直接配置一下就可以随心所欲的根据 Header、或者 Path、或者 Host、或者 Query 来做路由。<br>比如区分了一般的 Filter 和全局 Filter，内置了 20 种 Filter 和 9 种全局 Filter，也都可以直接用。当然自定义 Filter 也非常方便。</p>
<h3 id="最重要的几个概念"><a href="#最重要的几个概念" class="headerlink" title="最重要的几个概念"></a>最重要的几个概念</h3><img src="Gateway%E7%9A%84%E4%BD%BF%E7%94%A8/aHR0cDovL2Nvcy5yYWluMTAyNC5jb20vbWFya2Rvd24vaW1hZ2UtMjAxOTEwMDgxNjA3MTM4MjIucG5n" alt="img" style="zoom:67%;" />

<p><img src="/Gateway%E7%9A%84%E4%BD%BF%E7%94%A8/aHR0cDovL2Nvcy5yYWluMTAyNC5jb20vbWFya2Rvd24vaW1hZ2UtMjAxOTEwMDgxNjA4MDkxNDYucG5n" alt="img"></p>
<img src="Gateway%E7%9A%84%E4%BD%BF%E7%94%A8/aHR0cDovL2Nvcy5yYWluMTAyNC5jb20vbWFya2Rvd24vaW1hZ2UtMjAxOTEwMDgxNjA4MjU3MzEucG5n" alt="img" style="zoom:80%;" />

<h2 id="4-Gateway怎么用"><a href="#4-Gateway怎么用" class="headerlink" title="4. Gateway怎么用"></a>4. Gateway怎么用</h2><p>说白了 Predicate 就是为了实现一组<strong>匹配规则</strong>，方便让请求过来找到对应的 Route 进行处理，接下来我们接下 Spring Cloud GateWay 内置几种 Predicate 的使用。</p>
<h3 id="通过时间匹配"><a href="#通过时间匹配" class="headerlink" title="通过时间匹配"></a>通过时间匹配</h3><p>Predicate 支持设置一个时间，在请求进行转发的时候，可以通过判断在这个时间之前或者之后进行转发。比如我们现在设置只有在 2019 年 1 月 1 日才会转发到我的网站，在这之前不进行转发，我就可以这样配置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">time_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://ityouknow.com</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">After=2018-01-20T06:06:06+08:00[Asia/Shanghai]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Spring 是通过 ZonedDateTime 来对时间进行的对比，ZonedDateTime 是 Java 8 中日期时间功能里，用于表示带时区的日期与时间信息的类，ZonedDateTime 支持通过时区来设置时间，中国的时区是：<code>Asia/Shanghai</code>。</p>
<p>After Route Predicate 是指在这个时间之后的请求都转发到目标地址。上面的示例是指，请求时间在 2018 年 1 月 20 日 6 点 6 分 6 秒之后的所有请求都转发到地址<code>http://ityouknow.com</code>。<code>+08:00</code>是指时间和 UTC 时间相差八个小时，时间地区为<code>Asia/Shanghai</code>。</p>
<p>添加完路由规则之后，访问地址<code>http://localhost:8080</code>会自动转发到<code>http://ityouknow.com</code>。</p>
<p>Before Route Predicate 刚好相反，在某个时间之前的请求的请求都进行转发。我们把上面路由规则中的 After 改为 Before，如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">after_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://ityouknow.com</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">Before=2018-01-20T06:06:06+08:00[Asia/Shanghai]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>就表示在这个时间之前可以进行路由，在这时间之后停止路由，修改完之后重启项目再次访问地址<code>http://localhost:8080</code>，页面会报 404 没有找到地址。</p>
<p>除过在时间之前或者之后外，Gateway 还支持限制路由请求在某一个时间段范围内，可以使用 Between Route Predicate 来实现。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">after_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://ityouknow.com</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">Between=2018-01-20T06:06:06+08:00[Asia/Shanghai],</span> <span class="number">2019-01-20T06:06:06+08:00</span>[<span class="string">Asia/Shanghai</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这样设置就意味着在这个时间段内可以匹配到此路由，超过这个时间段范围则不会进行匹配。通过时间匹配路由的功能很酷，可以用在限时抢购的一些场景中。</p>
<h3 id="通过-Cookie-匹配"><a href="#通过-Cookie-匹配" class="headerlink" title="通过 Cookie 匹配"></a>通过 Cookie 匹配</h3><p>Cookie Route Predicate 可以接收两个参数，一个是 Cookie name , 一个是正则表达式，路由规则会通过获取对应的 Cookie name 值和正则表达式去匹配，如果匹配上就会执行路由，如果没有匹配上则不执行。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">cookie_route</span></span><br><span class="line">         <span class="attr">uri:</span> <span class="string">http://ityouknow.com</span></span><br><span class="line">         <span class="attr">predicates:</span></span><br><span class="line">         <span class="bullet">-</span> <span class="string">Cookie=ityouknow,</span> <span class="string">kee.e</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用 curl 测试，命令行输入:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">curl</span> <span class="string">http://localhost:8080</span> <span class="string">--cookie</span> <span class="string">&quot;ityouknow=kee.e&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>则会返回页面代码，如果去掉<code>--cookie &quot;ityouknow=kee.e&quot;</code>，后台汇报 404 错误。</p>
<p>Header Route Predicate 和 Cookie Route Predicate 一样，也是接收 2 个参数，一个 header 中属性名称和一个正则表达式，这个属性值和正则表达式匹配则执行。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">header_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://ityouknow.com</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Header=X-Request-Id,</span> <span class="string">\d+</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用 curl 测试，命令行输入:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">curl</span> <span class="string">http://localhost:8080</span>  <span class="string">-H</span> <span class="string">&quot;X-Request-Id:666666&quot;</span> </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>则返回页面代码证明匹配成功。将参数<code>-H &quot;X-Request-Id:666666&quot;</code>改为<code>-H &quot;X-Request-Id:neo&quot;</code>再次执行时返回 404 证明没有匹配。</p>
<h3 id="通过-Host-匹配"><a href="#通过-Host-匹配" class="headerlink" title="通过 Host 匹配"></a>通过 Host 匹配</h3><p>Host Route Predicate 接收一组参数，一组匹配的域名列表，这个模板是一个 ant 分隔的模板，用<code>.</code>号作为分隔符。它通过参数中的主机地址作为匹配规则。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">host_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://ityouknow.com</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Host=**.ityouknow.com</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用 curl 测试，命令行输入:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">curl</span> <span class="string">http://localhost:8080</span>  <span class="string">-H</span> <span class="string">&quot;Host: www.ityouknow.com&quot;</span> </span><br><span class="line"><span class="string">curl</span> <span class="string">http://localhost:8080</span>  <span class="string">-H</span> <span class="string">&quot;Host: md.ityouknow.com&quot;</span> </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>经测试以上两种 host 均可匹配到 host_route 路由，去掉 host 参数则会报 404 错误。</p>
<h3 id="通过请求方式匹配"><a href="#通过请求方式匹配" class="headerlink" title="通过请求方式匹配"></a>通过请求方式匹配</h3><p>可以通过是 POST、GET、PUT、DELETE 等不同的请求方式来进行路由。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">method_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://ityouknow.com</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Method=GET</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用 curl 测试，命令行输入:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl 默认是以 GET 的方式去请求</span></span><br><span class="line"><span class="string">curl</span> <span class="string">http://localhost:8080</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试返回页面代码，证明匹配到路由，我们再以 POST 的方式请求测试。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># curl 默认是以 GET 的方式去请求</span></span><br><span class="line"><span class="string">curl</span> <span class="string">-X</span> <span class="string">POST</span> <span class="string">http://localhost:8080</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>返回 404 没有找到，证明没有匹配上路由</p>
<h3 id="通过请求路径匹配"><a href="#通过请求路径匹配" class="headerlink" title="通过请求路径匹配"></a>通过请求路径匹配</h3><p>Path Route Predicate 接收一个匹配路径的参数来判断是否走路由。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">host_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://ityouknow.com</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/foo/&#123;segment&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果请求路径符合要求，则此路由将匹配，例如：&#x2F;foo&#x2F;1 或者 &#x2F;foo&#x2F;bar。</p>
<p>使用 curl 测试，命令行输入:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">curl</span> <span class="string">http://localhost:8080/foo/1</span></span><br><span class="line"><span class="string">curl</span> <span class="string">http://localhost:8080/foo/xx</span></span><br><span class="line"><span class="string">curl</span> <span class="string">http://localhost:8080/boo/xx</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>经过测试第一和第二条命令可以正常获取到页面返回值，最后一个命令报 404，证明路由是通过指定路由来匹配。</p>
<h3 id="通过请求参数匹配"><a href="#通过请求参数匹配" class="headerlink" title="通过请求参数匹配"></a>通过请求参数匹配</h3><p>Query Route Predicate 支持传入两个参数，一个是属性名一个为属性值，属性值可以是正则表达式。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">query_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://ityouknow.com</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Query=smile</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这样配置，只要请求中包含 smile 属性的参数即可匹配路由。</p>
<p>使用 curl 测试，命令行输入:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">curl</span> <span class="string">localhost:8080?smile=x&amp;id=2</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>经过测试发现只要请求汇总带有 smile 参数即会匹配路由，不带 smile 参数则不会匹配。</p>
<p>还可以将 Query 的值以键值对的方式进行配置，这样在请求过来时会对属性值和正则进行匹配，匹配上才会走路由。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">query_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://ityouknow.com</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Query=keep,</span> <span class="string">pu.</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这样只要当请求中包含 keep 属性并且参数值是以 pu 开头的长度为三位的字符串才会进行匹配和路由。</p>
<p>使用 curl 测试，命令行输入:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">curl</span> <span class="string">localhost:8080?keep=pub</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试可以返回页面代码，将 keep 的属性值改为 pubx 再次访问就会报 404, 证明路由需要匹配正则表达式才会进行路由。</p>
<h3 id="通过请求-ip-地址进行匹配"><a href="#通过请求-ip-地址进行匹配" class="headerlink" title="通过请求 ip 地址进行匹配"></a>通过请求 ip 地址进行匹配</h3><p>Predicate 也支持通过设置某个 ip 区间号段的请求才会路由，RemoteAddr Route Predicate 接受 cidr 符号 (IPv4 或 IPv6) 字符串的列表(最小大小为 1)，例如 192.168.0.1&#x2F;16 (其中 192.168.0.1 是 IP 地址，16 是子网掩码)。</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">remoteaddr_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://ityouknow.com</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RemoteAddr=192.168.1.1/24</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以将此地址设置为本机的 ip 地址进行测试。</p>
<p>果请求的远程地址是 192.168.1.10，则此路由将匹配。</p>
<h3 id="组合使用"><a href="#组合使用" class="headerlink" title="组合使用"></a>组合使用</h3><p>上面为了演示各个 Predicate 的使用，我们是单个单个进行配置测试，其实可以将各种 Predicate 组合起来一起使用。</p>
<p>例如：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">host_foo_path_headers_to_httpbin</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">http://ityouknow.com</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Host=**.foo.org</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/headers</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Method=GET</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Header=X-Request-Id,</span> <span class="string">\d+</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Query=foo,</span> <span class="string">ba.</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Query=baz</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Cookie=chocolate,</span> <span class="string">ch.p</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">After=2018-01-20T06:06:06+08:00[Asia/Shanghai]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>各种 Predicates 同时存在于同一个路由时，请求必须同时满足所有的条件才被这个路由匹配。</p>
<blockquote>
<p>一个请求满足多个路由的谓词条件时，请求只会被首个成功匹配的路由转发</p>
</blockquote>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis使用笔记</title>
    <url>/2020/09/07/Java/MbatisPlus/mybatis/</url>
    <content><![CDATA[<p>mybatis增删改查</p>
<p>xml文件方式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> </span></span><br><span class="line"><span class="meta"><span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.yiibai.mybatis.dao.IUser&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">resultType</span>=<span class="string">&quot;com.yiibai.mybatis.models.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT *</span><br><span class="line">        FROM USER</span><br><span class="line">        WHERE id = #&#123;userId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        INSERT INTO USER(name,</span><br><span class="line">        dept, website,phone)</span><br><span class="line">        VALUES(#&#123;name&#125;, #&#123;dept&#125;, #&#123;website&#125;, #&#123;phone&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.yiibai.mybatis.models.User&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM USER</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        UPDATE USER</span><br><span class="line">        SET</span><br><span class="line">        name=</span><br><span class="line">        #&#123;name&#125;,</span><br><span class="line">        dept = #&#123;dept&#125;,</span><br><span class="line">        website = #&#123;website&#125;,</span><br><span class="line">        phone = #&#123;phone&#125;</span><br><span class="line">        WHERE</span><br><span class="line">        id =</span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        DELETE FROM USER WHERE id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">XML</span><br></pre></td></tr></table></figure>

<p>注解方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from account&quot;)</span></span><br><span class="line">   List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Select(&quot;select * from account where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">   Account <span class="title function_">findById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Insert(&quot;insert into account(name,money) values(#&#123;name&#125;,#&#123;money&#125;)&quot;)</span></span><br><span class="line">   <span class="type">int</span> <span class="title function_">save</span><span class="params">(Account account)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Delete(&quot;delete from account where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">   <span class="type">int</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Update(&quot;update account set name=#&#123;name&#125;,money=#&#123;money&#125; where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">   <span class="type">int</span> <span class="title function_">update</span><span class="params">(Account account)</span>;</span><br></pre></td></tr></table></figure>







<p>mybatis分页查询</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基于mybatis</span></span><br><span class="line">       PageHelper.startPage(currentPage,pageSize);</span><br></pre></td></tr></table></figure>









<p>查询if条件判断</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;wang.yinggang.pojo.CheckItem&quot;</span>&gt;</span></span><br><span class="line">        select * from t_checkitem</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;value != null and value.length &gt; 0&quot;</span>&gt;</span></span><br><span class="line">            where code = #&#123;value&#125; or name = #&#123;value&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Sentinel的使用笔记</title>
    <url>/2021/10/21/Java/SpringCloud%20Alibaba/Sentinel/</url>
    <content><![CDATA[<h3 id="SpringCloud-Alibaba-Sentinel"><a href="#SpringCloud-Alibaba-Sentinel" class="headerlink" title="SpringCloud Alibaba-Sentinel"></a>SpringCloud Alibaba-Sentinel</h3><h4 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h4><h5 id="1、服务降级限流"><a href="#1、服务降级限流" class="headerlink" title="1、服务降级限流"></a>1、服务降级限流</h5><p><strong>熔断：</strong></p>
<p>​	A 服务调用 B 服务的某个功能， B 服务卡机，导致功能时间超长可以<strong>直接将 B 断路</strong>了</p>
<p>（A 不在请求  B 接口）凡是调用 B 服务的<strong>直接返回降级数据</strong>，不必等待 B 的 超时执行，这样 B 的故障问题，就不会级联影响到 A。</p>
<p><strong>降级：</strong></p>
<p>​	整个网站处于流量<strong>高峰期服务器压力剧增</strong>，根据当前自身业务情况以及流量，对一些服务和页面进行有策略的降级&#x2F;停止服务，所有的调用<strong>直接返回降级数据</strong>以此缓解服务器资源的压力，以保证核心业务的正常运行，同时也保持了客户和大部分客户等到正确的响应</p>
<p><strong>限流：</strong></p>
<p>​	对打入的服务的请求流量进行控制，使服务能够承担不超过自己能力的流量压力</p>
<h5 id="2、Sentinel-简介"><a href="#2、Sentinel-简介" class="headerlink" title="2、Sentinel 简介"></a>2、Sentinel 简介</h5><p>官方文档：<a href="https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D">https://github.com/alibaba/Sentinel/wiki/%E4%BB%8B%E7%BB%8D</a></p>
<p>项目文档：<a href="https://github.com/alibaba/Sentinel">https://github.com/alibaba/Sentinel</a></p>
<p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。Sentinel 以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p>
<p><strong>Sentinel 分为两个部分:</strong></p>
<ul>
<li>核心库（Java 客户端）不依赖任何框架&#x2F;库，能够运行于所有 Java 运行时环境，同时对 Dubbo &#x2F; Spring Cloud 等框架也有较好的支持。</li>
<li>控制台（Dashboard）基于 Spring Boot 开发，打包后可以直接运行，不需要额外的 Tomcat 等应用容器。</li>
</ul>
<p><strong>Sentinel 基本概念:</strong></p>
<ul>
<li>资源<ul>
<li>资源是 Sentinel 的关键概念。它可以是 Java 应用程序中的任何内容，例如，由应用程序提供的服务，或由应用程序调用的其它应用提供的服务，甚至可以是一段代码。在接下来的文档中，我们都会用资源来描述代码块。</li>
<li><strong>只要通过 Sentinel API 定义的代码，就是资源，能够被 Sentinel 保护起来</strong>。大部分情况下，可以使用方法签名，URL，甚至服务名称作为资源名来标示资源。</li>
</ul>
</li>
<li>规则<ul>
<li>围绕资源的实时状态设定的规则，可以包括<strong>流量控制规则、熔断降级规则以及系统保护规则。所有规则可以动态实时调整。</strong></li>
</ul>
</li>
</ul>
<h4 id="2、Hystrix-与-Sentinel-比较"><a href="#2、Hystrix-与-Sentinel-比较" class="headerlink" title="2、Hystrix 与 Sentinel 比较"></a>2、Hystrix 与 Sentinel 比较</h4><p><img src="/Sentinel/image-20201125120634969.png" alt="image-20201125120634969"></p>
<h4 id="3、整合-Feign-和-Sentinel-测试熔断降级"><a href="#3、整合-Feign-和-Sentinel-测试熔断降级" class="headerlink" title="3、整合 Feign 和 Sentinel 测试熔断降级"></a>3、整合 Feign 和 Sentinel 测试熔断降级</h4><p>熔断降级官网解释：<a href="https://github.com/alibaba/Sentinel/wiki/%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7">https://github.com/alibaba/Sentinel/wiki/%E7%86%94%E6%96%AD%E9%99%8D%E7%BA%A7</a></p>
<p>Spring-  Cloud整合Sentinel和Feign：<a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/Sentinel">https://github.com/alibaba/spring-cloud-alibaba/wiki/Sentinel</a></p>
<p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入sentinel依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入openFeign --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>application.properties </p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">## sentinel与项目间的通信端口</span></span><br><span class="line"><span class="attr">spring.cloud.sentinel.transport.port</span>=<span class="string">8719</span></span><br><span class="line"><span class="comment">## sentinel端口设置</span></span><br><span class="line"><span class="attr">spring.cloud.sentinel.transport.dashboard</span>=<span class="string">localhost:8333</span></span><br><span class="line"><span class="comment">## 暴露信息</span></span><br><span class="line"><span class="attr">management.endpoints.web.exposure.exclude</span>=<span class="string">*</span></span><br><span class="line"><span class="comment">## 配置文件打开 Sentinel 对 Feign 的支持</span></span><br><span class="line"><span class="attr">feign.sentinel.enabled</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<p>开启后，在微服务中调用远程服务，Sentinel 就会记录微服务之间的调用，从而对远程调用进行设置熔断降级等。</p>
<p>请求设置</p>
<p><img src="/Sentinel/image-20201126154714221.png" alt="image-20201126154714221"></p>
<p>设置流控规则</p>
<p><img src="/Sentinel/image-20201126165501709.png" alt="image-20201126165501709"></p>
<p>Feign设置</p>
<p><img src="/Sentinel/image-20201126165336761.png" alt="image-20201126165336761"></p>
<p>结果</p>
<p><img src="/Sentinel/image-20201126164858768.png" alt="image-20201126164858768"></p>
<h4 id="4、整合-Sentinel-测试限流"><a href="#4、整合-Sentinel-测试限流" class="headerlink" title="4、整合 Sentinel 测试限流"></a>4、整合 Sentinel 测试限流</h4><p>官网Spring-Cloud 整合：<a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/Sentinel">https://github.com/alibaba/spring-cloud-alibaba/wiki/Sentinel</a></p>
<p>Pom.xml</p>
<blockquote>
<p>参考 3、整合 Feign 和 Sentinel 测试熔断降级</p>
</blockquote>
<p>控制台：</p>
<p><img src="/Sentinel/image-20201126161848389.png"></p>
<p>超过单继阈值，返回自定义请求结果</p>
<p>实现方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  		1、代码</span></span><br><span class="line"><span class="comment"> *      	try (Entry entry = SphU.entry(&quot;resourceName&quot;)) &#123;</span></span><br><span class="line"><span class="comment"> *      	&#125;(BlockedException e)&#123;&#125;</span></span><br><span class="line"><span class="comment"> *      2、基于注解</span></span><br><span class="line"><span class="comment"> *       	<span class="doctag">@SentinelResource</span>(value = &quot;getCurrentSeckillSkusSource&quot;,blockHandler = &quot;BlockHandler&quot;)</span></span><br><span class="line"><span class="comment"> *       	无论1/2方式一定要配置限流以后的默认返回</span></span><br><span class="line"><span class="comment"> *       	url可以设置统一返回</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure>

<p>具体实现方式参考官网给出文档：<a href="https://github.com/alibaba/Sentinel/wiki/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8">https://github.com/alibaba/Sentinel/wiki/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8</a></p>
<h4 id="5、Sentinel网关限流"><a href="#5、Sentinel网关限流" class="headerlink" title="5、Sentinel网关限流"></a>5、Sentinel网关限流</h4><p>官网文档：<a href="https://github.com/alibaba/Sentinel/wiki/%E7%BD%91%E5%85%B3%E9%99%90%E6%B5%81">https://github.com/alibaba/Sentinel/wiki/%E7%BD%91%E5%85%B3%E9%99%90%E6%B5%81</a></p>
<p>pom.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-sentinel-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>启动Sentinle1.7.1 后比原先的1.6.1多个一个功能</p>
<p><img src="/Sentinel/image-20201127102052864.png" alt="image-20201127102052864"></p>
<p>您可以在 <code>GatewayCallbackManager</code> 注册回调进行定制：</p>
<ul>
<li><code>setBlockHandler</code>：注册函数用于实现自定义的逻辑处理被限流的请求，对应接口为 <code>BlockRequestHandler</code>。默认实现为 <code>DefaultBlockRequestHandler</code>，当被限流时会返回类似于下面的错误信息：<code>Blocked by Sentinel: FlowException</code>。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SentinelGatewayConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SentinelGatewayConfig</span><span class="params">()</span> &#123;</span><br><span class="line">        GatewayCallbackManager.setBlockHandler(<span class="keyword">new</span> <span class="title class_">BlockRequestHandler</span>() &#123;</span><br><span class="line">            <span class="comment">// 网关限流了 就会回调</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title function_">handleRequest</span><span class="params">(ServerWebExchange serverWebExchange, Throwable throwable)</span> &#123;</span><br><span class="line">                <span class="type">R</span> <span class="variable">error</span> <span class="operator">=</span> R.error(BizCodeEnume.TO_MANY_REQUEST.getCode(), BizCodeEnume.TO_MANY_REQUEST.getMsg());</span><br><span class="line">                <span class="type">String</span> <span class="variable">errorJson</span> <span class="operator">=</span> JSON.toJSONString(error);</span><br><span class="line">                Mono&lt;ServerResponse&gt; body = ServerResponse.ok().body(Mono.just(errorJson), String.class);</span><br><span class="line">                <span class="keyword">return</span> body;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringCloud Alibaba Seata笔记</title>
    <url>/2021/08/16/Java/SpringCloud%20Alibaba/SpringCloud%20Alibaba/</url>
    <content><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。</p>
<p><a href="https://seata.io/zh-cn/index.html">https://seata.io/zh-cn/index.html</a></p>
<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p><strong>TC (Transaction Coordinator) - 事务协调者</strong></p>
<p>维护全局和分支事务的状态，驱动全局事务提交或回滚。</p>
<p><strong>TM (Transaction Manager) - 事务管理器</strong></p>
<p>定义全局事务的范围：开始全局事务、提交或回滚全局事务。</p>
<p><strong>RM (Resource Manager) - 资源管理器</strong></p>
<p>管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。</p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Nacos的使用笔记</title>
    <url>/2021/09/11/Java/SpringCloud%20Alibaba/nacos/</url>
    <content><![CDATA[<h3 id="Nacos-作为注册中心"><a href="#Nacos-作为注册中心" class="headerlink" title="Nacos [作为注册中心]"></a>Nacos [作为注册中心]</h3><p>Nacos 是阿里巴巴开源的一个更易于构建云原生应用的动态服务发现，配置管理和服务管理平台，他是使用 java 编写的，需要依赖 java 环境</p>
<p>Nacos 文档地址： <a href="https://nacos.io/zh-cn/docs/quick-start.html">https://nacos.io/zh-cn/docs/quick-start.html</a></p>
<h4 id="1、下载-nacos-server"><a href="#1、下载-nacos-server" class="headerlink" title="1、下载 nacos-server"></a>1、下载 nacos-server</h4><p><a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p>
<h4 id="2、启动-nacos-server"><a href="#2、启动-nacos-server" class="headerlink" title="2、启动 nacos-server"></a>2、启动 nacos-server</h4><ul>
<li>cmd 运行startup.cmd 文件</li>
<li>访问localhost:8848&#x2F;nacos&#x2F;</li>
<li>使用默认的 nacos&#x2F;nacos 登录</li>
<li></li>
</ul>
<h4 id="3、注册进入-nacos-中"><a href="#3、注册进入-nacos-中" class="headerlink" title="3、注册进入 nacos 中"></a>3、注册进入 nacos 中</h4><p>1、首先，修改 pom.xml 文件，引入  Nacos Discovery Starter</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2、在应用的 &#x2F;resource&#x2F;bootstrap.yml 中配置 Nacos Server地址</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">#    nacos</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">         <span class="comment">#    nacos注册中心</span></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br><span class="line">        <span class="comment">#        如果配置格式为yml需要指定文件类型</span></span><br><span class="line">        <span class="attr">file-extension:</span> <span class="string">yml</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">ae34901c-9215-4409-ae61-c6b8d6c8f9b0</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">mall-product</span></span><br></pre></td></tr></table></figure>

<p>3、使用@EnableDiscoveryClient 开启服务注册发现功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProviderApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		SpringApplication.run(ProviderApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4、启动应用、观察 nacos 服务列表是否已经注册上服务</p>
<p>注意每一个应用都应该有名字，这样才能往册上去。修改pplicaion.propertes文件</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.application.name</span>= <span class="string">service provider</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8000</span></span><br></pre></td></tr></table></figure>

<p>5、注册更多的服务上去，测试使用 feign 远程</p>
<h4 id="Nacos-使用三步"><a href="#Nacos-使用三步" class="headerlink" title="Nacos 使用三步"></a>Nacos 使用三步</h4><p>1、导包</p>
<p>2、写配置，指定 nacos 地址，指定应用的名字</p>
<p>3、开启服务注册发现功能 @EnableDiscoveryClient</p>
<p>Feign 使用三步</p>
<p>1、导包 openfeign</p>
<p>2、开启 @EnableFeignClients 功能</p>
<p>3、编写接口，进行远程调用</p>
<h3 id="Nacos-作为配置中心"><a href="#Nacos-作为配置中心" class="headerlink" title="Nacos [作为配置中心]"></a>Nacos [作为配置中心]</h3><h4 id="1、pom-xml-引入-Nacos-Config-Starter"><a href="#1、pom-xml-引入-Nacos-Config-Starter" class="headerlink" title="1、pom.xml 引入 Nacos Config Starter"></a>1、pom.xml 引入 Nacos Config Starter</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="comment">&lt;!--配置中心来做配置管理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2、在应用的-resource-下-bootstrap-properties"><a href="#2、在应用的-resource-下-bootstrap-properties" class="headerlink" title="2、在应用的 resource 下 bootstrap.properties"></a>2、在应用的 resource 下 bootstrap.properties</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line"><span class="comment">  #    nacos</span></span><br><span class="line">  <span class="attr">cloud</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">nacos</span>:<span class="string"></span></span><br><span class="line">      <span class="attr">discovery</span>:<span class="string"></span></span><br><span class="line">        <span class="attr">server-addr</span>: <span class="string">127.0.0.1:8848</span></span><br><span class="line">      <span class="attr">config</span>:<span class="string"></span></span><br><span class="line">        <span class="attr">server-addr</span>: <span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="comment">#        如果配置格式为yml需要指定文件类型</span></span><br><span class="line">        <span class="attr">file-extension</span>: <span class="string">yml</span></span><br><span class="line">        <span class="attr">namespace</span>: <span class="string">ae34901c-9215-4409-ae61-c6b8d6c8f9b0</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">application</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">mall-member</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">profiles</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">active</span>: <span class="string">pro</span></span><br></pre></td></tr></table></figure>

<h4 id="3、在-nacos-中添加配置"><a href="#3、在-nacos-中添加配置" class="headerlink" title="3、在 nacos 中添加配置"></a>3、在 nacos 中添加配置</h4><ul>
<li><p>命名规则</p>
<p>​	用户名.应用名.properties</p>
<p>​	mall-gateway.yml</p>
</li>
</ul>
<p>选择右上角添加配置</p>
<p><img src="/nacos/image-20220122002132321.png" alt="image-20220122002132321"></p>
<h4 id="4、在应用中使用-Value-和-RefreshScope"><a href="#4、在应用中使用-Value-和-RefreshScope" class="headerlink" title="4、在应用中使用@Value 和 @RefreshScope"></a>4、在应用中使用@Value 和 @RefreshScope</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RefreshScope</span> <span class="comment">// 刷新对应controller</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;coupon/coupon&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CouponController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CouponService couponService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;coupon.user.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;coupon.user.age&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> R.ok().put(<span class="string">&quot;name&quot;</span>,name).put(<span class="string">&quot;age&quot;</span>,age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><strong>配置集</strong></p>
<p><strong>一组相关或者不相关的配置项的集合称为配置集</strong>。在系统中，一个配置文件通常就是一个配置集，包含了系统各个方面的配置。例如，一个配置集可能包含了数据源、线程池、日志级别等配置项。</p>
<p><strong>配置集ID:</strong></p>
<p>Nacos 中的某个配置集的 ID，配置集 ID 是组织划分配置的维度之一，<strong>Data ID</strong> 通常用于组织划分系统的配置集，一个系统或者应用可以包含多个配置集，一个系统应用可以包含多个配置集，每个配置集都可以被一个有意义的名称标识，Data ID 通常采用类 Java 包 如 ( com.taobao.tc.refund.log.level ) 的命名规则保证全局唯一性，此命名规则非强制</p>
<p><strong>配置分组：</strong></p>
<p>Nacos 中的一组配置集，是组织配置的维度之一，通过一个有意义的字符串，(如 Buy 或 Trade ) 对配置集进行分组，从而区分 Data ID 相同的配置集，当您在 Nacos 上创建一个配置时，如果未填写配置分组的名称，则配置分组的名称默认采用，DEFAULT_GROUP 配置分组的常见场景，不同的应用或组件采用了相同的配置类型，如 database_url 配置和 MQ_topic 配置</p>
<p><strong>命名空间:</strong><br>用于进行租户粒度的配置隔离。不同的命名空间下，可以存在相同的 <strong>Group</strong> 或 <strong>DatalD</strong> 的配置。<strong>Namespace</strong>  的常用场景之一是不同环境的配置的区分隔离，例如开发测试环境和生产环境的资源(如配置、服务)隔离等。</p>
<p>开发 测试 生产 利用命名空间来做环境隔离</p>
<p><img src="/nacos/image-20220122002400840.png" alt="image-20220122002400840"></p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>elasticsearch的使用笔记</title>
    <url>/2021/12/17/Java/elasticsearch/elasticsearch/</url>
    <content><![CDATA[<h2 id="es的概念"><a href="#es的概念" class="headerlink" title="es的概念"></a>es的概念</h2><p>速度快、易扩展、弹性、灵活、操作简单、多语言客户端、X-Pack、hadoop&#x2F;spark强强联手、开箱即用。</p>
<ul>
<li><strong>分布式：</strong>横向扩展非常灵活</li>
<li><strong>全文检索：</strong>基于lucene的强大的全文检索能力；</li>
<li><strong>近实时搜索和分析：</strong>数据进入ES，可达到近实时搜索，还可进行聚合分析</li>
<li><strong>高可用：</strong>容错机制，自动发现新的或失败的节点，重组和重新平衡数据</li>
<li><strong>模式自由：</strong>ES的动态mapping机制可以自动检测数据的结构和类型，创建索引并使数据可搜索。</li>
<li><strong>RESTful API：</strong>JSON + HTTP</li>
</ul>
<h3 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h3><p>先将文档中包含的关键字全部提取出来<br>然后再将关键字与文档的对应关系保存起来<br>最后对关键字本身做索引排序。<br>这样在用户检索关键字时， 可以先查找关键字索引，在通过关键字与文档的对应关系查找到所在的文档。</p>
<p>如下面的两个文档：</p>
<p>文档1： I love elasticsearch<br>文档2： I love logstash<br>他们对应的倒排索引为： “√” 表示文档中包含这个关键字</p>
<p><img src="/./elasticsearch/1640660690269.png" alt="1640660690269"></p>
<h3 id="分片（shard）："><a href="#分片（shard）：" class="headerlink" title="分片（shard）："></a>分片（shard）：</h3><p>如果我们的索引数据量很大，超过硬件存放单个文件的限制，就会影响查询请求的速度，ES引入了分片技术。一个分片本身就是一个完成的搜索引擎，文档存储在分片中，而分片会被分配到集群中的各个节点中，随着集群的扩大和缩小，<strong>ES会自动的将分片在节点之间进行迁移</strong>，以保证集群能保持一种平衡。分片有以下特点：</p>
<ol>
<li><strong>ES的一个索引可以包含多个分片（shard）</strong>；</li>
<li><strong>每一个分片（shard）都是一个最小的工作单元，承载部分数据</strong>；</li>
<li>每个shard都是一个<strong>lucene实例</strong>，有完整的简历索引和处理请求的能力；</li>
<li>增减节点时，shard会自动在nodes中负载均衡；</li>
<li>一个文档只能完整的存放在一个shard上</li>
<li>一个索引中含有shard的数量，默认值为5，在索引创建后这个值是不能被更改的。</li>
<li>优点：水平分割和扩展我们存放的内容索引；分发和并行跨碎片操作提高性能&#x2F;吞吐量；</li>
<li>每一个shard关联的副本分片（replica shard）的数量，默认值为1，这个设置在任何时候都可以修改。</li>
</ol>
<h3 id="副本：replica"><a href="#副本：replica" class="headerlink" title="副本：replica"></a>副本：replica</h3><p>副本（replica shard）就是shard的冗余备份，它的主要作用：</p>
<ol>
<li>冗余备份，防止数据丢失；</li>
<li>shard异常时负责容错和负载均衡；</li>
</ol>
<h2 id="Elasticsearch安装"><a href="#Elasticsearch安装" class="headerlink" title="[Elasticsearch安装]"></a>[Elasticsearch安装]</h2><h2 id="安装中文分词器IKAnalyzer"><a href="#安装中文分词器IKAnalyzer" class="headerlink" title="[安装中文分词器IKAnalyzer]"></a>[安装中文分词器IKAnalyzer]</h2><ul>
<li>下载Elasticsearch<code>7.6.2</code>的docker镜像：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull elasticsearch:7.6.2</span><br></pre></td></tr></table></figure>

<ul>
<li>修改虚拟内存区域大小，否则会因为过小而无法启动:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sysctl -w vm.max_map_count=262144</span><br></pre></td></tr></table></figure>

<ul>
<li>使用如下命令启动Elasticsearch服务：</li>
</ul>
<p>-e ES_JAVA_OPTS&#x3D;”-Xms64m -Xmx512m”  大一点，有时候会因为内存小 比如批量导入数据时候出问题</p>
<p>如上表示启动的时候，最大内存512M，最小内存64M </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 9200:9200 -p 9300:9300 --name elasticsearch \</span><br><span class="line">-e &quot;discovery.type=single-node&quot; \</span><br><span class="line">-e &quot;cluster.name=elasticsearch&quot; \</span><br><span class="line">-e ES_JAVA_OPTS=&quot;-Xms64m -Xmx2g&quot; \</span><br><span class="line">-v /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">-v /mydata/elasticsearch/data:/usr/share/elasticsearch/data \</span><br><span class="line">-d elasticsearch:7.6.2</span><br></pre></td></tr></table></figure>

<ul>
<li>启动时会发现<code>/usr/share/elasticsearch/data</code>目录没有访问权限，只需要修改<code>/mydata/elasticsearch/data</code>目录的权限，再重新启动即可；</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 777 /mydata/elasticsearch/data/</span><br></pre></td></tr></table></figure>

<ul>
<li>安装中文分词器IKAnalyzer，并重新启动：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it elasticsearch /bin/bash</span><br><span class="line">#此命令需要在容器中运行 过程需呀输入y</span><br><span class="line">elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.6.2/elasticsearch-analysis-ik-7.6.2.zip</span><br><span class="line"></span><br><span class="line">docker restart elasticsearch</span><br></pre></td></tr></table></figure>

<ul>
<li>开启防火墙：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=9200/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<ul>
<li>访问会返回版本信息：<a href="http://192.168.3.101:9200/">http://192.168.3.101:9200</a></li>
</ul>
<p><img src="/elasticsearch/mall_linux_deploy_08-1640796877265.png" alt="img"></p>
<h4 id="es插件卸载"><a href="#es插件卸载" class="headerlink" title="es插件卸载"></a>es插件卸载</h4><p>查看安装了哪些插件</p>
<p>.&#x2F;bin&#x2F;<a href="https://so.csdn.net/so/search?q=elasticsearch">elasticsearch</a>-plugin list</p>
<p>a. 卸载x-pack插件<br>.&#x2F;bin&#x2F;elasticsearch-plugin remove x-pack</p>
<p>b. 删除配置文件（由于配置文件保护，需要手动删除）<br>cd &#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;config<br>rm -rf x-pack</p>
<p>4、安装ik插件<br>直接使用命令安装<br>.&#x2F;bin&#x2F;elasticsearch-plugin install <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.6.2/elasticsearch-analysis-ik-7.6.2.zip">https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.6.2/elasticsearch-analysis-ik-7.6.2.zip</a></p>
<h2 id="Kibana安装"><a href="#Kibana安装" class="headerlink" title="[Kibana安装]"></a>[Kibana安装]</h2><ul>
<li>下载Kibana<code>7.6.2</code>的docker镜像：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull kibana:7.6.2</span><br></pre></td></tr></table></figure>

<ul>
<li>使用如下命令启动Kibana服务：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run --name kibana -p 5601:5601 \</span><br><span class="line">--link elasticsearch:es \</span><br><span class="line">-e &quot;elasticsearch.hosts=http://es:9200&quot; \</span><br><span class="line">-d kibana:7.6.2</span><br></pre></td></tr></table></figure>

<ul>
<li>开启防火墙：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=5601/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<ul>
<li>访问地址进行测试：<a href="http://192.168.3.101:5601/">http://192.168.3.101:5601</a></li>
</ul>
<p><img src="/elasticsearch/mall_linux_deploy_09-1640797262306.png" alt="img"></p>
<h2 id="ES的CURD操作"><a href="#ES的CURD操作" class="headerlink" title="ES的CURD操作"></a>ES的CURD操作</h2><p>PUT 类似于SQL中的增</p>
<p>DELETE 类似于SQL中的删</p>
<p>POST 类似于SQL中的改</p>
<p>GET 类似于SQL中的查</p>
<h3 id="1-索引"><a href="#1-索引" class="headerlink" title="1.索引"></a>1.索引</h3><h4 id="1-1-新增索引"><a href="#1-1-新增索引" class="headerlink" title="1.1 新增索引"></a>1.1 新增索引</h4><p>PUT &#x2F;indexname 增加一个indexname 的index库 </p>
<p><a href="http://8.144.162.164:9200/student">http://8.144.162.164:9200/student</a> </p>
<h4 id="1-2-查询索引"><a href="#1-2-查询索引" class="headerlink" title="1.2 查询索引"></a>1.2 查询索引</h4><p>GET &#x2F;_cat&#x2F;indices  命令查询ES中所有的index索引库 </p>
<h4 id="1-3-删除索引"><a href="#1-3-删除索引" class="headerlink" title="1.3 删除索引"></a>1.3 删除索引</h4><p>DELETE &#x2F;aura_index 删除一个aura_index的index库 </p>
<h3 id="2-文档"><a href="#2-文档" class="headerlink" title="2.文档"></a>2.文档</h3><h4 id="2-1-新增文档"><a href="#2-1-新增文档" class="headerlink" title="2.1 新增文档"></a>2.1 新增文档</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">PUT /product/_doc/<span class="number">2</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot; dior chenyi&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shishang gaodang&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">7800</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;producer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dior producer&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;shishang&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;shechi&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>更新文档也用这个</p>
<h4 id="2-2-更新文档"><a href="#2-2-更新文档" class="headerlink" title="2.2 更新文档"></a>2.2 更新文档</h4><ol>
<li>PUT只会将json数据都进行替换, POST只会更新相同字段的值</li>
<li>PUT与DELETE都是幂等性操作, 即不论操作多少次, 结果都一样</li>
</ol>
<p>PUT修改是全局修改</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT/POST     /product/_doc/<span class="number">2</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李四&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>修改后</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;product&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> <span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> <span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;found&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;李四&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>这次我们使用POST的方式进行修改数据，POST是局部更新数据，别的数据不动。PUT是全局更新 </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /product/_doc/<span class="number">2</span>/_update</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李四&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /product/_update/<span class="number">2</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李四&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h4 id="2-3-查询文档"><a href="#2-3-查询文档" class="headerlink" title="2.3 查询文档"></a>2.3 查询文档</h4><p>查询单个</p>
<p>GET &#x2F;product&#x2F;_doc&#x2F;2</p>
<p>查询所有</p>
<p>GET &#x2F;product&#x2F;_search</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;product&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;desc&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;河北保定&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;price&quot;</span> <span class="punctuation">:</span> <span class="number">7800</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;producer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;提供方&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;tags&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;shishang&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;shechi&quot;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;product&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;desc&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;河北保定&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;price&quot;</span> <span class="punctuation">:</span> <span class="number">7800</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;producer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;提供方&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;tags&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;shishang&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;shechi&quot;</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>took：耗费了6毫秒</p>
<p>shards：分片的情况</p>
<p>hits：获取到的数据的情况</p>
<p>total：3 总的数据条数</p>
<p>max_score：1 所有数据里面打分最高的分数</p>
<p>_index:”ecommerce” index名称</p>
<p>_type:”product” type的名称</p>
<p>_id:”2” id号</p>
<p>_score:1 分数，这个分数越大越靠前出来，百度也是这样。除非是花钱。否则匹配度越高越靠前</p>
<h4 id="2-4-删除文档"><a href="#2-4-删除文档" class="headerlink" title="2.4 删除文档"></a>2.4 删除文档</h4><p>DELETE  &#x2F;product&#x2F;_doc&#x2F;2</p>
<h4 id="2-5-整理总结"><a href="#2-5-整理总结" class="headerlink" title="2.5  整理总结"></a>2.5  整理总结</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /product</span><br><span class="line"></span><br><span class="line">PUT /product/_doc/<span class="number">2</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;河北石家庄&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">7800</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;producer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;提供方&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;shishang&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;shechi&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GET /product/_doc/<span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PUT /product/_doc/<span class="number">2</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;河北保定&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">7800</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;producer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;提供方&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tags&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;shishang&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;shechi&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">POST /product/_doc/<span class="number">2</span>/_update</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李四&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DELETE  /product/_doc/<span class="number">2</span></span><br></pre></td></tr></table></figure>



<h3 id="3-DSL语言"><a href="#3-DSL语言" class="headerlink" title="3. DSL语言"></a>3. DSL语言</h3><p>RESTful风格 </p>
<ul>
<li><p>query  DSL </p>
<p>domain Specialed Lanaguage 在特定领域的语言</p>
</li>
</ul>
<p>我们要进行全表扫描使用DSL语言，查询所有的商品 </p>
<h4 id="1-query-查询条件"><a href="#1-query-查询条件" class="headerlink" title="1. query 查询条件"></a>1. query 查询条件</h4><h5 id="1-1-match-all查询所有"><a href="#1-1-match-all查询所有" class="headerlink" title="1.1   match_all查询所有"></a>1.1   match_all查询所有</h5><p><code>match_all</code> 可以查询到所有文档   </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">// match_all 指定所有</span></span><br></pre></td></tr></table></figure>



<h5 id="1-2-match分词-全文检索"><a href="#1-2-match分词-全文检索" class="headerlink" title="1.2  match分词+全文检索"></a>1.2  match分词+全文检索</h5><p><code>match</code> 基本类型(非字符串)，精准匹配</p>
<p>字符串text 分词查询</p>
<p>匹配address字段 为mill lane</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mill lane&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p>另一种写法</p>
<p>from 字段</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gu&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>





<h5 id="1-3-multi-match多字段匹配"><a href="#1-3-multi-match多字段匹配" class="headerlink" title="1.3 multi_match多字段匹配"></a>1.3 multi_match多字段匹配</h5><p>mill 关键字 匹配 两个字段 “address”, “city”</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;multi_match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mill&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;address&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;city&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="1-4-match-phrase整体单词匹配-包含短语"><a href="#1-4-match-phrase整体单词匹配-包含短语" class="headerlink" title="1.4 match_phrase整体单词匹配 包含短语"></a>1.4 match_phrase整体单词匹配 包含短语</h5><ol>
<li><p>match_phrase还是分词后去搜的</p>
</li>
<li><p>目标文档需要包含分词后的所有词</p>
</li>
<li><p>目标文档还要保持这些词的相对顺序和文档中的一致</p>
<p><img src="/elasticsearch/1640811134534.png" alt="1640811134534"></p>
</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>        </span><br><span class="line">   		 <span class="attr">&quot;match_phrase&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mill lane&quot;</span>   </span><br><span class="line">         <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span>   </span><br></pre></td></tr></table></figure>

<h5 id="1-5-term是代表完全匹配"><a href="#1-5-term是代表完全匹配" class="headerlink" title="1.5 term是代表完全匹配"></a>1.5 term是代表完全匹配</h5><p>和 match 一样，匹配某个属性的值，全文检索字段用 match，其他非text字段匹配用 term</p>
<p>用全部搜查询不到情况？</p>
<p>【总结】如果使用term查询，建索引的时候要注意。 <strong>要确保字段是no analyzed的</strong>。keyword</p>
<p><strong>说明text类型的字段会被分词，查询的时候如果用拆开查可以查询的到，但是要是直接全部查，就是查询不到。</strong> </p>
<p>搜“学习”搜不到，搜全文也搜不到，因为存的是“学”和“习” </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;汽车保养&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="1-6-bool复合查询"><a href="#1-6-bool复合查询" class="headerlink" title="1.6 bool复合查询"></a>1.6 bool复合查询</h5><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mill&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>





<h4 id="2-order排序"><a href="#2-order排序" class="headerlink" title="2. order排序"></a>2. order排序</h4><p>进行”age”字段进行排序</p>
<p>“order”: “desc”  :  排序为降序</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET zhifou/doc/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gu&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p> 3.分页</p>
<p>“from”: 5,<br>“size”: 5,</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;firstname&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;lastname&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<h4 id="3-source返回部分字段"><a href="#3-source返回部分字段" class="headerlink" title="3. _source返回部分字段"></a>3. _source返回部分字段</h4><p>“_source”: [<br>        “firstname”,<br>        “lastname”<br>    ]</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;firstname&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;lastname&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>





<ol start="4">
<li>filter【结果过滤】</li>
</ol>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="number">20000</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="number">30000</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>







<p>&#x2F;&#x2F; match</p>
<p>&#x2F;&#x2F;multi_match 多字段匹配</p>
<p>​    &#x2F;&#x2F; {</p>
<p>​    &#x2F;&#x2F; “match_phrase”: {</p>
<p>​    &#x2F;&#x2F;     “address”: “mill lane”</p>
<p>​    &#x2F;&#x2F; }</p>
<p>&#x2F;&#x2F;match_phrase 整体单词（不分词）进行检索</p>
<h2 id="Elasticsearch的java-api"><a href="#Elasticsearch的java-api" class="headerlink" title="[Elasticsearch的java api]"></a>[Elasticsearch的java api]</h2><p>1、9300：TCP</p>
<p>Spring-data-elasticsearch:transport-api.jar</p>
<p>SpringBoot版本不同，<code>transport-api.jar</code> 不同，不能适配 es 版本</p>
<p>7.x 已经不在适合使用，8 以后就要废弃</p>
<p><strong>2、9200：HTTP</strong></p>
<p>JestClient 非官方，更新慢</p>
<p>RestTemplate:默认发送 HTTP 请求，ES很多操作都需要自己封装、麻烦</p>
<p>HttpClient：同上</p>
<p>Elasticsearch - Rest - Client：官方RestClient，封装了 ES 操作，API层次分明</p>
<p>最终选择 Elasticsearch - Rest - Client （elasticsearch - rest - high - level - client）</p>
<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入es的 rest-high-level-client --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Config配置"><a href="#Config配置" class="headerlink" title="Config配置"></a>Config配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gcq</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Create</span> 2020-10-26</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 1、导入配置</span></span><br><span class="line"><span class="comment"> * 2、编写配置，给容器注入一个RestHighLevelClient</span></span><br><span class="line"><span class="comment"> * 3、参照API 官网进行开发</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GulimallElasticsearchConfig</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RequestOptions COMMON_OPTIONS;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        RequestOptions.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> RequestOptions.DEFAULT.toBuilder();</span><br><span class="line"><span class="comment">//        builder.addHeader(&quot;Authorization&quot;, &quot;Bearer &quot; + TOKEN);</span></span><br><span class="line"><span class="comment">//        builder.setHttpAsyncResponseConsumerFactory(</span></span><br><span class="line"><span class="comment">//                new HttpAsyncResponseConsumerFactory</span></span><br><span class="line"><span class="comment">//                        .HeapBufferedResponseConsumerFactory(30 * 1024 * 1024 * 1024));</span></span><br><span class="line">        COMMON_OPTIONS = builder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestHighLevelClient <span class="title function_">esRestClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">RestClientBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        builder = RestClient.builder(<span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;192.168.56.10&quot;</span>, <span class="number">9200</span>, <span class="string">&quot;http&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">RestHighLevelClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(builder);</span><br><span class="line"><span class="comment">//        RestHighLevelClient client = new RestHighLevelClient(</span></span><br><span class="line"><span class="comment">//                RestClient.builder(</span></span><br><span class="line"><span class="comment">//                        new HttpHost(&quot;localhost&quot;, 9200, &quot;http&quot;),</span></span><br><span class="line"><span class="comment">//                        new HttpHost(&quot;localhost&quot;, 9201, &quot;http&quot;)));</span></span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="测试是否注入成功"><a href="#测试是否注入成功" class="headerlink" title="测试是否注入成功"></a>测试是否注入成功</h3><blockquote>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(client);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试是否能 添加 或更新数据</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加或者更新</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">indexData</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">IndexRequest</span> <span class="variable">indexRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;users&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setAge(<span class="number">19</span>);</span><br><span class="line">    user.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">    user.setUserName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(user);</span><br><span class="line">    indexRequest.source(jsonString,XContentType.JSON);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行操作</span></span><br><span class="line">    <span class="type">IndexResponse</span> <span class="variable">index</span> <span class="operator">=</span> client.index(indexRequest, GulimallElasticsearchConfig.COMMON_OPTIONS);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 提取有用的响应数据</span></span><br><span class="line">    System.out.println(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="复杂查询"><a href="#复杂查询" class="headerlink" title="复杂查询"></a>复杂查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">searchTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1、创建检索请求</span></span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">searchRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>();</span><br><span class="line">        <span class="comment">// 指定索引</span></span><br><span class="line">        searchRequest.indices(<span class="string">&quot;bank&quot;</span>);</span><br><span class="line">        <span class="comment">// 指定 DSL，检索条件</span></span><br><span class="line">        <span class="type">SearchSourceBuilder</span> <span class="variable">sourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line"></span><br><span class="line">        sourceBuilder.query(QueryBuilders.matchQuery(<span class="string">&quot;address&quot;</span>, <span class="string">&quot;mill&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、2 按照年龄值分布进行聚合</span></span><br><span class="line">        <span class="type">TermsAggregationBuilder</span> <span class="variable">aggAvg</span> <span class="operator">=</span> AggregationBuilders.terms(<span class="string">&quot;ageAgg&quot;</span>).field(<span class="string">&quot;age&quot;</span>).size(<span class="number">10</span>);</span><br><span class="line">        sourceBuilder.aggregation(aggAvg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、3 计算平均薪资</span></span><br><span class="line">        <span class="type">AvgAggregationBuilder</span> <span class="variable">balanceAvg</span> <span class="operator">=</span> AggregationBuilders.avg(<span class="string">&quot;balanceAvg&quot;</span>).field(<span class="string">&quot;balance&quot;</span>);</span><br><span class="line">        sourceBuilder.aggregation(balanceAvg);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------\&quot;检索条件\&quot;: SearchSourceBuilder-------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(sourceBuilder.toString());</span><br><span class="line"></span><br><span class="line">        searchRequest.source(sourceBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、执行检索</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">searchResponse</span> <span class="operator">=</span> client.search(searchRequest, GulimallEsConfig.COMMON_OPTIONS);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------\&quot;分析结果\&quot;: searchResponse-------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、分析结果</span></span><br><span class="line">        System.out.println(searchResponse.toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、拿到命中得结果</span></span><br><span class="line">        <span class="type">SearchHits</span> <span class="variable">hits</span> <span class="operator">=</span> searchResponse.getHits();</span><br><span class="line">        <span class="comment">// 5、搜索请求的匹配</span></span><br><span class="line">        SearchHit[] searchHits = hits.getHits();</span><br><span class="line">        <span class="comment">// 6、进行遍历</span></span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : searchHits) &#123;</span><br><span class="line">            <span class="comment">// 7、拿到完整结果字符串</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sourceAsString</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line"><span class="comment">//            // 8、转换成实体类</span></span><br><span class="line"><span class="comment">//            Accout accout = JSON.parseObject(sourceAsString, Accout.class);</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;account:&quot; + accout );</span></span><br><span class="line">            <span class="comment">//System.out.println(sourceAsString);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 9、拿到聚合</span></span><br><span class="line">        <span class="type">Aggregations</span> <span class="variable">aggregations</span> <span class="operator">=</span> searchResponse.getAggregations();</span><br><span class="line"><span class="comment">//        for (Aggregation aggregation : aggregations) &#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">// 10、通过先前名字拿到对应聚合</span></span><br><span class="line">        <span class="type">Terms</span> <span class="variable">ageAgg1</span> <span class="operator">=</span> aggregations.get(<span class="string">&quot;ageAgg&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Terms.Bucket bucket : ageAgg1.getBuckets()) &#123;</span><br><span class="line">            <span class="comment">// 11、拿到结果</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">keyAsString</span> <span class="operator">=</span> bucket.getKeyAsString();</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄:&quot;</span> + keyAsString);</span><br><span class="line">            <span class="type">long</span> <span class="variable">docCount</span> <span class="operator">=</span> bucket.getDocCount();</span><br><span class="line">            System.out.println(<span class="string">&quot;个数：&quot;</span> + docCount);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Avg</span> <span class="variable">balanceAvg1</span> <span class="operator">=</span> aggregations.get(<span class="string">&quot;balanceAvg&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;平均薪资：&quot;</span> + balanceAvg1.getValue());</span><br><span class="line">        System.out.println(searchResponse.toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h4><p>—————————-“检索条件”: SearchSourceBuilder——————————-</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mill&quot;</span></span><br><span class="line">                <span class="comment">//,</span></span><br><span class="line">				<span class="comment">//&quot;operator&quot;: &quot;OR&quot;,</span></span><br><span class="line">				<span class="comment">//&quot;prefix_length&quot;: 0,</span></span><br><span class="line">				<span class="comment">//&quot;max_expansions&quot;: 50,</span></span><br><span class="line">				<span class="comment">//&quot;fuzzy_transpositions&quot;: true,</span></span><br><span class="line">				<span class="comment">//&quot;lenient&quot;: false,</span></span><br><span class="line">				<span class="comment">//&quot;zero_terms_query&quot;: &quot;NONE&quot;,</span></span><br><span class="line">				<span class="comment">//&quot;auto_generate_synonyms_phrase_query&quot;: true,</span></span><br><span class="line">				<span class="comment">//&quot;boost&quot;: 1.0</span></span><br><span class="line">			<span class="punctuation">&#125;</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;aggregations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;ageAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;age&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="comment">//,</span></span><br><span class="line">				<span class="comment">//&quot;min_doc_count&quot;: 1,</span></span><br><span class="line">				<span class="comment">//&quot;shard_min_doc_count&quot;: 0,</span></span><br><span class="line">				<span class="comment">//&quot;show_term_doc_count_error&quot;: false,</span></span><br><span class="line">				<span class="comment">//&quot;order&quot;: [&#123;</span></span><br><span class="line">				<span class="comment">//	&quot;count&quot;: &quot;desc&quot;</span></span><br><span class="line">				<span class="comment">//&#125;, &#123;</span></span><br><span class="line">					<span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span></span><br><span class="line">				<span class="comment">//&#125;]</span></span><br><span class="line">			<span class="punctuation">&#125;</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;balanceAvg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;avg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;balance&quot;</span></span><br><span class="line">			<span class="punctuation">&#125;</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>






<p>—————————-“分析结果”: searchResponse——————————-</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;took&quot;</span><span class="punctuation">:</span> <span class="number">42</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;timed_out&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;skipped&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;relation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;max_score&quot;</span><span class="punctuation">:</span> <span class="number">5.4032025</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;970&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;score&quot;</span><span class="punctuation">:</span> <span class="number">5.4032025</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;account_number&quot;</span><span class="punctuation">:</span> <span class="number">970</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="number">19648</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;firstname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Forbes&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;lastname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Wallace&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">28</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;990 Mill Road&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;employer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Pheast&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;forbeswallace@pheast.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Lopezo&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AK&quot;</span></span><br><span class="line">			<span class="punctuation">&#125;</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;136&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;score&quot;</span><span class="punctuation">:</span> <span class="number">5.4032025</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;account_number&quot;</span><span class="punctuation">:</span> <span class="number">136</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="number">45801</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;firstname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Winnie&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;lastname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Holland&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">38</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;198 Mill Lane&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;employer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Neteria&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;winnieholland@neteria.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Urie&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="string">&quot;IL&quot;</span></span><br><span class="line">			<span class="punctuation">&#125;</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;345&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;score&quot;</span><span class="punctuation">:</span> <span class="number">5.4032025</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;account_number&quot;</span><span class="punctuation">:</span> <span class="number">345</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="number">9812</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;firstname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Parker&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;lastname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Hines&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">38</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;715 Mill Avenue&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;employer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Baluba&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;parkerhines@baluba.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Blackgum&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="string">&quot;KY&quot;</span></span><br><span class="line">			<span class="punctuation">&#125;</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;472&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;score&quot;</span><span class="punctuation">:</span> <span class="number">5.4032025</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;account_number&quot;</span><span class="punctuation">:</span> <span class="number">472</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="number">25571</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;firstname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Lee&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;lastname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Long&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">32</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;288 Mill Street&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;employer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Comverges&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;leelong@comverges.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Movico&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MT&quot;</span></span><br><span class="line">			<span class="punctuation">&#125;</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;aggregations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;lterms#ageAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;doc_count_error_upper_bound&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;sum_other_doc_count&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;buckets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="number">38</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">			<span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="number">28</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">			<span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="number">32</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;doc_count&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">			<span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;avg#balanceAvg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">25208.0</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>年龄:38<br>个数：2<br>年龄:28<br>个数：1<br>年龄:32<br>个数：1<br>平均薪资：25208.0</p>
<h2 id="效率批量保存bulk"><a href="#效率批量保存bulk" class="headerlink" title="效率批量保存bulk"></a>效率批量保存bulk</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductSaveServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ProductSaveService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestHighLevelClient restHighLevelClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">productStatusUp</span><span class="params">(List&lt;SkuEsModel&gt; skuEsModels)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 保存到es</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1 给es中建立索引，product</span></span><br><span class="line">        <span class="type">BulkRequest</span> <span class="variable">bulkRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BulkRequest</span>();</span><br><span class="line">        <span class="comment">// 1 构造保存请求</span></span><br><span class="line">        <span class="keyword">for</span> (SkuEsModel model : skuEsModels) &#123;</span><br><span class="line">            <span class="type">IndexRequest</span> <span class="variable">indexRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(EsConstant.PRODUCT_INDEX);</span><br><span class="line">            </span><br><span class="line">            indexRequest.id(model.getSkuId().toString());</span><br><span class="line">            </span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> JSON.toJSONString(model);</span><br><span class="line">            </span><br><span class="line">            indexRequest.source(s, XContentType.JSON);</span><br><span class="line">            bulkRequest.add(indexRequest);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">BulkResponse</span> <span class="variable">bulk</span> <span class="operator">=</span> restHighLevelClient.bulk(bulkRequest, GulimallEsConfig.COMMON_OPTIONS);</span><br><span class="line">        <span class="comment">// TODO 如果批量错误</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> bulk.hasFailures();</span><br><span class="line">        List&lt;String&gt; collect = Arrays.stream(bulk.getItems()).map(item -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> item.getId();</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        log.info(<span class="string">&quot;商品上架完成,&#123;&#125;,返回数据,&#123;&#125;&quot;</span>,collect,bulk.toString());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>ELK  </p>
<p>Elasticsearch 用于检索数据</p>
<p>logstach：存储数据</p>
<p>Kiban:视图化查看数据</p>
<h1 id="其他不常用"><a href="#其他不常用" class="headerlink" title="其他不常用"></a>其他不常用</h1><h2 id="es的扁平化处理"><a href="#es的扁平化处理" class="headerlink" title="es的扁平化处理"></a>es的扁平化处理</h2><p><img src="/elasticsearch/1641213328426.png" alt="1641213328426"></p>
<p>数组里面都是对象的时候 使用嵌入式的属性</p>
<p>设置对象的类型为嵌入式</p>
<p><img src="/elasticsearch/1641213517188.png" alt="1641213517188"></p>
<h2 id="ES的IK分词器使用案例"><a href="#ES的IK分词器使用案例" class="headerlink" title="ES的IK分词器使用案例"></a>ES的IK分词器使用案例</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#创建索引并添加映射</span><br><span class="line">PUT /account</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  </span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">#获取索引映射</span><br><span class="line">GET account/_mapping</span><br><span class="line"></span><br><span class="line">#添加数据</span><br><span class="line">POST /account/_doc</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;数据库管理工程师&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;工程师&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;user&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">#进行分词</span><br><span class="line">GET _analyze/</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span><span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span><span class="string">&quot;数据库管理&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#查询</span><br><span class="line">POST /account/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;管理&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h2 id="特殊类型-数据范围"><a href="#特殊类型-数据范围" class="headerlink" title="特殊类型 数据范围"></a>特殊类型 <strong>数据范围</strong></h2><p>范围类型(range)是es中比较具有<strong>特色</strong>的数据类型。下面我们就先来看看官方对其的定义。</p>
<p><strong>定义</strong></p>
<p>数字范围类数据。主要类型及范围如下。</p>
<p><img src="/elasticsearch/20200307191836851-1640809100676.png" alt="在这里插入图片描述"></p>
<p><strong>数据范围类型的使用</strong></p>
<p><strong>映射定义</strong></p>
<p>假设我们有一张会议表。我们知道实际中党政机关会议都有一个出席率的问题，需要出席率在某个点或某个区间内才能算作是有效的。所以我们的映射结构来了。</p>
<p>示例如下。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT example</span><br><span class="line">PUT example/docs/_mapping</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;expectedAttendees&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer_range&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;date_range&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>数据新增</strong></p>
<p>假如这时我们需要添加一个10-20人参与，并且在2019-12-01到2019-12-02期间举行的会议。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT example/docs/<span class="number">112313213</span>?refresh</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;expectedAttendees&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="number">20</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-12-01 12:00:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-12-02 17:00:00&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>数据查询</strong></p>
<p>怎么查询呢？假如我们需要查询参会人数满足12人的会议记录。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET example/docs/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;expectedAttendees&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">12</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>结果如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span><span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;range_index&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;my_type&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;expected_attendees&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;gte&quot;</span> <span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span> <span class="attr">&quot;lte&quot;</span> <span class="punctuation">:</span> <span class="number">20</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;time&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;gte&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;2019-12-01 12:00:00&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;lte&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;2019-12-02 17:00:00&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>当然我们可以按照<em>日期进行筛选</em>。例如下面这个查询。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST example/docs/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;time&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-12-01&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2019-12-02&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;relation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;within&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><code>relation</code>字段上的范围查询支持一个关系参数，该参数可以是<code>WITHIN</code>，<code>CONTAINS</code>，<code>INTERSECTS</code>之一（默认）。</p>
<p>结果如下</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span><span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;range_index&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;my_type&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;expected_attendees&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;gte&quot;</span> <span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span> <span class="attr">&quot;lte&quot;</span> <span class="punctuation">:</span> <span class="number">20</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;time&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;gte&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;2019-12-01 12:00:00&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;lte&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;2019-12-02 17:00:00&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><em>基于ip的数据类型也有很有趣的用法，感兴趣的同学可以深入研究下，这里就不展开。</em></p>
]]></content>
      <categories>
        <category>elasticsearch</category>
      </categories>
      <tags>
        <tag>elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>ThreadLocal的使用</title>
    <url>/2021/04/21/Java/ThreadLocal%E7%9A%84%E4%BD%BF%E7%94%A8/ThreadLocal/</url>
    <content><![CDATA[<h2 id="ThreadLocal在工作中的使用"><a href="#ThreadLocal在工作中的使用" class="headerlink" title="ThreadLocal在工作中的使用"></a>ThreadLocal在工作中的使用</h2><h3 id="线程池工具类"><a href="#线程池工具类" class="headerlink" title="线程池工具类"></a>线程池工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程池工厂工具</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成固定大小的线程池</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> threadName 线程名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 线程池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">createFixedThreadPool</span><span class="params">(String threadName)</span> &#123;</span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">threadNumber</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">                <span class="comment">// 核心线程数</span></span><br><span class="line">                desiredThreadNum(),</span><br><span class="line">                <span class="comment">// 最大线程数</span></span><br><span class="line">                desiredThreadNum(),</span><br><span class="line">                <span class="comment">// 空闲线程存活时间</span></span><br><span class="line">                <span class="number">60L</span>,</span><br><span class="line">                <span class="comment">// 空闲线程存活时间单位</span></span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                <span class="comment">// 工作队列</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1024</span>),</span><br><span class="line">                <span class="comment">// 线程工厂</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ThreadFactory</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r, threadName + <span class="string">&quot;-&quot;</span> + threadNumber.getAndIncrement());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">// 拒绝策略</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">RejectedExecutionHandler</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor executor)</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!executor.isShutdown()) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="comment">//尝试阻塞式加入任务队列</span></span><br><span class="line">                                executor.getQueue().put(r);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                                <span class="comment">//保持线程的中断状态</span></span><br><span class="line">                                Thread.currentThread().interrupt();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 理想的线程数，使用 2倍cpu核心数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">desiredThreadNum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Runtime.getRuntime().availableProcessors() * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLocalTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">threadPoolExecutor</span> <span class="operator">=</span> ThreadPoolFactory.createFixedThreadPool(<span class="string">&quot;格式化时间&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ThreadPoolFactory.desiredThreadNum(); i++) &#123;</span><br><span class="line">            threadPoolExecutor.execute(</span><br><span class="line">                    ()-&gt; System.out.println(DateUtilNotSafe.parse(<span class="string">&quot;2019-06-01 16:34:30&quot;</span>))</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        threadPoolExecutor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="时间格式工具类"><a href="#时间格式工具类" class="headerlink" title="时间格式工具类"></a>时间格式工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateUtilNotSafe</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">parse</span><span class="params">(String dateStr)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date = sdf.parse(dateStr);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p><strong>报错</strong></p>
<p><img src="/ThreadLocal/image-20220214170920634.png" alt="image-20220214170920634"></p>
<h3 id="ThreadLocal解决"><a href="#ThreadLocal解决" class="headerlink" title="ThreadLocal解决"></a>ThreadLocal解决</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateUtilSafe</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;DateFormat&gt; THREAD_LOCAL = ThreadLocal.withInitial(</span><br><span class="line">            () -&gt; <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title function_">parse</span><span class="params">(String dateStr)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date = THREAD_LOCAL.get().parse(dateStr);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>分析：</strong></p>
<p>SimpleDateFormat(下面简称sdf)类内部有一个Calendar对象引用，它用来储存和这个sdf相关的日期信息，例如sdf.parse(dateStr), sdf.format(date) 诸如此类的方法参数传入的日期相关String、Date等等，都是交友Calendar引用来储存的，这样就会导致一个问题，如果你的sdf是个static的, 那么多个thread 之间就会共享这个sdf， 同时也是共享这个Calendar引用， 并且, 观察 sdf.parse() 方法，parse方法里没有保证原子性，所以存在线程安全问题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Date <span class="title function_">parse</span><span class="params">()</span> &#123;</span><br><span class="line">  calendar.clear(); <span class="comment">// 清理calendar</span></span><br><span class="line">  ... <span class="comment">// 执行一些操作, 设置 calendar 的日期什么的</span></span><br><span class="line">  calendar.getTime(); <span class="comment">// 获取calendar的时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>既然是因为多个线程共享SimpleDateFormat造成的，那么我们就让它不共享，每个线程存一份自己的SimpleDateFormat对象。自己玩自己的对象，就不会出现线程问题了。ThreadLocal作用就是让线程自己独立保存一份自己的变量副本。每个线程独立的使用自己的变量副本，不会影响其他线程内的变量副本。</p>
<h2 id="ThreadLocal简介"><a href="#ThreadLocal简介" class="headerlink" title="ThreadLocal简介"></a><strong>ThreadLocal简介</strong></h2><p>ThreadLocal不是多线程同步机制的一种，他是为多线程环境下为变量线程安全提供的一种解决思路，他是解决多线程下<strong>成员变量的安全问题</strong>，不是解决多线程下共享变量的安全问题。</p>
<p>线程同步机制是多个线程共享一个变量，而ThreadLocal是每个线程创建一个自己的单独变量副本，所以每个线程都可以独立的改变自己的变量副本。并且不会影响其他线程的变量副本。</p>
<h2 id="ThreadLocalMap"><a href="#ThreadLocalMap" class="headerlink" title="ThreadLocalMap"></a><strong>ThreadLocalMap</strong></h2><p>ThreadLocal内部有一个非常重要的内部类：ThreadLocalMap，该类才是真正实现线程隔离机制的关键，ThreadLocalMap内部结构类似于map，由键值对key和value组成一个Entry，key为ThreadLocal本身，value是对应的线程变量副本</p>
<p>注意：</p>
<p>1、ThreadLocal本身不存储值，他只是提供一个查找到值的key给你。</p>
<p>2、ThreadLocal包含在Thread中，不是Thread包含在ThreadLocal中。</p>
<p><strong>ThreadLocalMap 和HashMap的功能类似，但是实现上却有很大的不同：</strong></p>
<ol>
<li><p>HashMap 的数据结构是数组+链表+1.8红黑树。 ThreadLocalMap的数据结构仅仅是数组</p>
</li>
<li><p>HashMap 是通过链地址法解决hash 冲突的问题。ThreadLocalMap 是通过开放地址法来解决hash 冲突的问题</p>
<p><strong>链地址法</strong></p>
<p>这种方法的基本思想是将所有哈希地址为i的元素构成一个称为同义词链的单链表，并将单链表的头指针存在哈希表的第i个单元中，因而查找、插入和删除主要在同义词链中进行。</p>
<p><strong>开放地址法</strong></p>
<p>这种方法的基本思想是一旦发生了冲突，就去**寻找下一个空的散列地址(这非常重要，源码都是根据这个特性，必须理解这里才能往下走)**，只要散列表足够大，空的散列地址总能找到，并将记录存入。</p>
</li>
<li><p>HashMap 里面的Entry 内部类的引用都是强引用。ThreadLocalMap里面的Entry 内部类中的key 是弱引用，value 是强引用</p>
</li>
</ol>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="链地址法和开放地址法的优缺点"><a href="#链地址法和开放地址法的优缺点" class="headerlink" title="链地址法和开放地址法的优缺点"></a><strong>链地址法和开放地址法的优缺点</strong></h3><p><strong>链地址法：</strong></p>
<ol>
<li>处理冲突简单，且无堆积现象，平均查找长度短。</li>
<li>链表中的结点是动态申请的，适合构造表不能确定长度的情况。</li>
<li>删除结点的操作易于实现。只要简单地删去链表上相应的结点即可。</li>
<li>指针需要额外的空间，故当结点规模较小时，开放定址法较为节省空间。</li>
</ol>
<p><strong>开放地址法：</strong>(出现冲突时顺着这个值往后找 找一个没有值的放下去)</p>
<ol>
<li>容易产生<strong>堆积问题</strong>，不适于大规模的数据存储。</li>
<li>散列函数的设计对冲突会有很大的影响，插入时可能会出现多次冲突的现象。</li>
<li>删除的元素是多个冲突元素中的一个，需要对后面的元素作处理，实现较复杂。</li>
</ol>
<p><strong>ThreadLocalMap 采用开放地址法原因</strong></p>
<ol>
<li>ThreadLocal 中看到一个属性 HASH_INCREMENT &#x3D; 0x61c88647 ，0x61c88647 是一个神奇的数字，让哈希码能均匀的分布在2的N次方的数组里, 即 Entry[] table，关于这个神奇的数字google 有很多解析，。</li>
<li>ThreadLocal 往往存放的<strong>数据量不会特别大</strong>（而且<strong>key 是弱引用又会被垃圾回收</strong>，及时让数据量更小），这个时候开放地址法简单的结构会<strong>显得更省空间</strong>，同时数组的查询效率也是非常高，加上第一点的保障，冲突概率也低</li>
</ol>
<h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h3 id="Thread、ThreadLocal、ThreadLocalMap之间的关系"><a href="#Thread、ThreadLocal、ThreadLocalMap之间的关系" class="headerlink" title="Thread、ThreadLocal、ThreadLocalMap之间的关系"></a><strong>Thread、ThreadLocal、ThreadLocalMap之间的关系</strong></h3><p>每个Thread线程内部都有一个Map。Map里面存储线程本地对象（key）和线程的变量副本（value）Thread内部的Map是由ThreadLocal维护的，由ThreadLocal负责向map获取和设置线程的变量值。所以对于不同的线程，每次获取副本值时，别的线程并不能获取到当前线程的副本值，形成了副本的隔离，彼此之间互不干扰。</p>
<h2 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a><strong>源码解读</strong></h2><h3 id="先了解一下ThreadLocal类提供的几个方法："><a href="#先了解一下ThreadLocal类提供的几个方法：" class="headerlink" title="先了解一下ThreadLocal类提供的几个方法："></a><strong>先了解一下ThreadLocal类提供的几个方法：</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> T <span class="title function_">get</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(T value)</span> &#123; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"><span class="keyword">protected</span> T <span class="title function_">initialValue</span><span class="params">()</span> &#123; &#125;</span><br></pre></td></tr></table></figure>

<p>get()方法是用来获取ThreadLocal在当前线程中保存的变量副本。<br>set()用来设置当前线程中变量的副本。<br>remove()用来移除当前线程中变量的副本。<br>initialValue()是一个protected方法，一般是用来在使用时进行重写的</p>
<h3 id="-2"><a href="#-2" class="headerlink" title=""></a></h3><h3 id="内存泄露问题："><a href="#内存泄露问题：" class="headerlink" title="内存泄露问题："></a>内存泄露问题：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static class Entry extends WeakReference&lt;ThreadLocal&lt;?&gt;&gt; &#123;</span><br><span class="line">    /** The value associated with this ThreadLocal. */</span><br><span class="line">    Object value;</span><br><span class="line"> </span><br><span class="line">    Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">        super(k);</span><br><span class="line">        value = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上面源码可以看出，ThreadLocalMap使用ThreadLocal的弱引用作为Entry的key，如果一个ThreadLocal没有外部强引用来引用它，下一次系统GC时，这个ThreadLocal必然会被回收，这样一来，ThreadLocalMap中就会出现key为null的Entry，就没有办法访问这些key为null的Entry的value。</p>
<p>我们上面介绍的get、set、remove等方法中，都会对key为null的Entry进行清除（expungeStaleEntry方法，将Entry的value清空，等下一次垃圾回收时，这些Entry将会被彻底回收）。</p>
<p>但是如果当前线程一直在运行，并且一直不执行get、set、remove方法，这些key为null的Entry的value就会一直存在一条强引用练：Thread Ref -&gt; Thread -&gt; ThreadLocalMap -&gt; Entry -&gt; value，导致这些key为null的Entry的value永远无法回收，造成内存泄漏。</p>
<p>如何避免内存泄漏？<br>为了避免这种情况，我们可以在使用完ThreadLocal后，手动调用remove方法，以避免出现内存泄漏。</p>
<h2 id="ThreadLocal使用"><a href="#ThreadLocal使用" class="headerlink" title="ThreadLocal使用"></a>ThreadLocal使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.greate.community.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 持有用户信息(多线程)，用于代替 session 对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HostHolder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储 User</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        users.set(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 User</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> users.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清理</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        users.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>jmeter压力测试使用</title>
    <url>/2020/07/30/Java/jmeter%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/jmeter/</url>
    <content><![CDATA[<h1 id="jmeter"><a href="#jmeter" class="headerlink" title="jmeter"></a>jmeter</h1><h2 id="原理："><a href="#原理：" class="headerlink" title="原理："></a><strong>原理</strong>：</h2><p> Jmeter可以作为Web服务与浏览器直接的代理网关，以便捕获浏览器的请求和web服务器的响应，如此就可以很容易地生成性能测试脚本。</p>
<p>通过性能测试脚本，jmeter可以通过线程来模拟真实用户对web服务器的访问压力。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载官网下载链接：</p>
<p><a href="http://jmeter.apache.org/download_jmeter.cgi">http://jmeter.apache.org/download_jmeter.cgi</a></p>
<p>下载完成后，解压该文件，移动该文件到指定目录，本课程目录为：‘E:\Jmeter’。</p>
<p>把‘E:\Jmeter\apache-jmeter-5.1\bin’添加到系统变量Path中，</p>
<p>在命令行窗口输入jmeter，启动Jmeter</p>
<p>​		</p>
<h2 id="数据库指标"><a href="#数据库指标" class="headerlink" title="数据库指标"></a>数据库指标</h2><ul>
<li><p><strong>响应时间</strong>（Response Time:RT）</p>
<p>响应时间指用户从客户端发起一个<strong>请求开始</strong>，到客户端接收到服务器端返回的<strong>响应结束</strong>，<strong>整个过程</strong>所耗费的时间</p>
</li>
<li><p><strong>HPS</strong>（Hits Per Second） ：<strong>每秒点击次数</strong>，单位是次&#x2F;秒</p>
</li>
<li><p><strong>TPS</strong>（Transaction per Second）：<strong>系统每秒处理交易数</strong>，单位是笔&#x2F;秒</p>
</li>
<li><p><strong>QPS</strong> (Query perSecond) :<strong>系统每秒处理查询次数</strong>，单位是次&#x2F;秒。</p>
</li>
<li><p>对于互联网业务中，如果某些业务有且仅有一个请求连接，那么TPS&#x3D;QPS&#x3D;HPS，一般情况下用TPS来衡量整个业务流程，用QPS来衡量接口查询次数，用HPS来表示对服务器单击请求。</p>
</li>
<li><p>无论TPS、QPS、HPS,此指标是衡量系统处理能力非常重要的指标，越大越好，根据经验，一般情况下:</p>
<ul>
<li>金融行业: 1000TPS~50000TPS, 不包括互联网化的活动</li>
<li>保险行业: 1007P-00000PS， 不包括互联网化的活动</li>
<li>制造行业: 10TPS~5000TPS</li>
<li>互联网电子商务: 10000TPS~-100000TPS</li>
<li>互联网中型网站: 1000TPS~50000TPS</li>
<li>互联网小型网站: 5007PS~10000TPS</li>
</ul>
</li>
<li><p><strong>最大响应时间</strong>(Max Response Time) 指用户发出请求或者指令到系统做出反应(响应)的最大时间。</p>
</li>
<li><p><strong>最少响应时间</strong> （Mininum ResponseTime）指用户发出请求或者指令到系统做出反应（响应）的最少时间</p>
</li>
<li><p><strong>90%响应时间</strong>（90% Response Time） 是指所有用户的响应时间进行排序、第90%的响应时间</p>
</li>
<li><p>从外部看、性能测试主要关注如下三个指</p>
<ul>
<li>吞吐量：每秒钟系统能够处理的请求数、任务数</li>
<li>响应时间：服务处理一个请求或一个任务的耗时</li>
<li>错误率：一批请求中结果出错的请求所占比例</li>
</ul>
</li>
</ul>
<p>吞吐量大:系统支持高并发，</p>
<p>响应时间：越短说明接口性能越好</p>
<h2 id="JMeter-Address-Already-in-use-错误解决"><a href="#JMeter-Address-Already-in-use-错误解决" class="headerlink" title="JMeter Address Already in use 错误解决"></a>JMeter Address Already in use 错误解决</h2><p>windows本身提供的端口访问机制的问题。<br>Windows提供给TCP&#x2F;IP 链接的端口为1024-5000，并且要四分钟来循环回收他们。就导致<br>我们在短时间内跑大量的请求时将端口占满了。</p>
<p>1.cmd中，用regedit命令打开注册表</p>
<p>2.在HKEY_ LOCAL MACHINE\SYSTEMCurrentControlSet\Services Tcpip\Parameters下，</p>
<p>​	1.右击parameters,添加一个新的DWORD,名字为MaxUserPort<br>​	2.然后双击 MaxUserPort,输入数值数据为65534,基数选择十进制(如果是分布式运行的话，控制机器和负载机器都需要这样操作哦)</p>
<p>3.修改配置完毕之后记得重启机器才会生效</p>
<p>TCPTimedWaitDelay:30</p>
<h1 id="jvisualvm"><a href="#jvisualvm" class="headerlink" title="jvisualvm"></a>jvisualvm</h1><p>javajdk自带工具</p>
<p>cmd   输入jvisualvm</p>
<p><img src="/jmeter/image-20220110144459560.png" alt="image-20220110144459560"></p>
<p>安装插件</p>
<img src="jmeter/image-20220110144850972.png" alt="image-20220110144850972" style="zoom:67%;" />

<img src="jmeter/image-20220110145020229.png" alt="image-20220110145020229" style="zoom: 50%;" />

]]></content>
      <categories>
        <category>jmeter</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>fastjson</title>
    <url>/2020/08/31/Java/fastjson/fastjson/</url>
    <content><![CDATA[<p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.78<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>







<h1 id="对象-互转-String"><a href="#对象-互转-String" class="headerlink" title="对象 互转 String"></a>对象 互转 String</h1><p>String   互转  对象</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"> String s = JSON.toJSONString(对象);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">User user = JSON.parseObject(str2<span class="punctuation">,</span> User.class);</span><br><span class="line">User user = JSONArray.parseObject(str2<span class="punctuation">,</span> User.class);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="String-互转-JSONObject"><a href="#String-互转-JSONObject" class="headerlink" title="String 互转  JSONObject"></a>String 互转  JSONObject</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">String jsonStr = JSONObject.toJSONString(object); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">JSONObject json = JSONObject.parseObject(str2);</span><br></pre></td></tr></table></figure>





<h1 id="JSONArray"><a href="#JSONArray" class="headerlink" title="JSONArray"></a>JSONArray</h1><ul>
<li>JSONArray       JSONArray.parseArray(str); </li>
<li>List<User>       JSONArray.parseArray(str1, User.class);</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">String str = <span class="string">&quot;[\&quot;张三\&quot;,\&quot;18\&quot;,\&quot;宜昌\&quot;]&quot;</span>;</span><br><span class="line"></span><br><span class="line">JSONArray array = JSONArray.parseArray(str); </span><br></pre></td></tr></table></figure>



<p>JSONArray 对象数组  转    集合 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;User&gt; array2 = JSONArray.parseArray(str1, User.class);</span><br></pre></td></tr></table></figure>





<p>验证</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonArray</span> &#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">		<span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;[\&quot;张三\&quot;,\&quot;18\&quot;,\&quot;宜昌\&quot;]&quot;</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="type">JSONArray</span> <span class="variable">array</span> <span class="operator">=</span> JSONArray.parseArray(str); </span><br><span class="line">		System.out.println(array.get(<span class="number">0</span>));</span><br><span class="line">		System.out.println(array.get(<span class="number">1</span>));</span><br><span class="line">		System.out.println(array.get(<span class="number">2</span>));</span><br><span class="line">		System.out.println();</span><br><span class="line">		</span><br><span class="line">		<span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> <span class="string">&quot;[&quot;</span> + </span><br><span class="line">				<span class="string">&quot;	&#123;\&quot;name\&quot;: \&quot;张三\&quot;, \&quot;age\&quot;: 24, \&quot;city\&quot;: \&quot;宜昌\&quot;&#125;,&quot;</span> + </span><br><span class="line">				<span class="string">&quot;	&#123;\&quot;name\&quot;: \&quot;李四\&quot;, \&quot;age\&quot;: 25, \&quot;city\&quot;: \&quot;宜昌\&quot;&#125;,&quot;</span> + </span><br><span class="line">				<span class="string">&quot;	&#123;\&quot;name\&quot;: \&quot;王五\&quot;, \&quot;age\&quot;: 22, \&quot;city\&quot;: \&quot;宜昌\&quot;&#125;&quot;</span> + </span><br><span class="line">				<span class="string">&quot;]&quot;</span>;</span><br><span class="line">		<span class="type">JSONArray</span> <span class="variable">array1</span> <span class="operator">=</span> JSONArray.parseArray(str1); </span><br><span class="line">		System.out.println(array1.get(<span class="number">0</span>).toString());</span><br><span class="line">		System.out.println(array1.get(<span class="number">1</span>).toString());</span><br><span class="line">		System.out.println(array1.get(<span class="number">2</span>).toString());</span><br><span class="line">		System.out.println();</span><br><span class="line">		</span><br><span class="line">		List&lt;User&gt; array2 = JSONArray.parseArray(str1, User.class); </span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array2.size(); i++) &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;姓名：&quot;</span>+array2.get(i).getName()+<span class="string">&quot;， 年龄：&quot;</span>+array2.get(i).getAge()+<span class="string">&quot;， 地址：&quot;</span>+array2.get(i).getCity());</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println();</span><br><span class="line">		</span><br><span class="line">		<span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;name\&quot;: \&quot;张三\&quot;, \&quot;age\&quot;: 24, \&quot;city\&quot;: \&quot;宜昌\&quot;&#125;&quot;</span>;</span><br><span class="line">		<span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> JSONArray.parseObject(str2, User.class);</span><br><span class="line">		System.out.println(<span class="string">&quot;姓名：&quot;</span>+user.getName()+<span class="string">&quot;， 年龄：&quot;</span>+user.getAge()+<span class="string">&quot;， 地址：&quot;</span>+user.getCity());</span><br><span class="line">		System.out.println();</span><br><span class="line">		</span><br><span class="line">		<span class="type">JSONObject</span> <span class="variable">json</span> <span class="operator">=</span> JSONObject.parseObject(str2);</span><br><span class="line">		<span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> json.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">		<span class="type">String</span> <span class="variable">age</span> <span class="operator">=</span> json.getString(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">		<span class="type">String</span> <span class="variable">city</span> <span class="operator">=</span> json.getString(<span class="string">&quot;city&quot;</span>);</span><br><span class="line">		System.out.println(name);</span><br><span class="line">		System.out.println(age);</span><br><span class="line">		System.out.println(city);</span><br><span class="line">	&#125;</span><br><span class="line">     <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> String city;</span><br><span class="line">        <span class="keyword">private</span> Integer age;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getCity</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> city;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCity</span><span class="params">(String city)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.city = city;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, String city, Integer age)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>();</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="built_in">this</span>.city = city;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

















































]]></content>
      <categories>
        <category>fastjson</category>
      </categories>
      <tags>
        <tag>fastjson</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM 虚拟机</title>
    <url>/2022/01/11/Java/jvm%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/jvm/</url>
    <content><![CDATA[<h1 id="JVM内存结构"><a href="#JVM内存结构" class="headerlink" title="JVM内存结构"></a>JVM内存结构</h1><p>java虚拟机在执行程序的过程中会将内存划分为不同的数据区域</p>
<img src="jvm/aHR0cDovL3d3dy5jaG91cGFuZ3hpYS5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTkvMTAvMTU3MTM2MzMwOTUzNC5qcGc" alt="image" style="zoom: 50%;" />



<p><strong>黄色</strong>（私有）      </p>
<ol>
<li>java文件 编译成     .class 文件     </li>
<li>.class 文件      会被类装载器 <strong>装载</strong>到我们的运行时数据区</li>
<li>运行时数据区 主要是包括堆、栈（虚拟机栈、本地方法栈）、方法区、程序计数器</li>
<li>程序计数器：当前线程走到哪</li>
</ol>
<ul>
<li><p>第一，JVM分为五个区域：虚拟机栈、本地方法栈、方法区、堆、程序计数器。</p>
</li>
<li><p>第二，JVM五个区中线程私有(黄色)   虚拟机栈、本地方法栈、程序计数器</p>
<p>​                                                   线程共享区（绿色） 方法区和堆为。</p>
</li>
<li><p>第三，JVM不同区域的占用内存大小不同，一般情况下堆最大，程序计数器较小。那么最大的区域会放什么？当然就是Java中最多的“对象”了。</p>
</li>
</ul>
<h2 id="线程共享"><a href="#线程共享" class="headerlink" title="线程共享"></a>线程共享</h2><h3 id="堆（Heap）"><a href="#堆（Heap）" class="headerlink" title="堆（Heap）"></a>堆（Heap）</h3><img src="jvm/aHR0cDovL3d3dy5jaG91cGFuZ3hpYS5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTkvMTAvaGVhcC5qcGc" alt="image" style="zoom:50%;" />

<p>堆可以细分为：</p>
<ul>
<li><p>新生代</p>
<ul>
<li>Eden空间</li>
<li>From Survivor 空间</li>
<li>To Survivor 空间</li>
</ul>
</li>
<li><p>老年代</p>
</li>
<li><p>永久代&#x2F;原空间</p>
<ul>
<li>Java8 以前永久代、受 JVM 管理</li>
<li>Java8 以后原空间，直接使用物理内存，因此默认情况下，原空间的大小仅受本地内存限制</li>
</ul>
</li>
</ul>
<p>上面已经得出结论，堆内存最大，堆是被线程共享，堆的目的就是<strong>存放对象</strong>。几乎所有的<strong>对象实例都在此分配</strong>。当然，随着优化技术的更新，某些数据也会被放在栈上等。</p>
<p>枪打出头鸟，树大招风。因为堆占用内存空间最大，堆也是Java垃圾回收的主要区域（重点对象），因此也称作“GC堆”（Garbage Collected Heap）。</p>
<p>Java虚拟机规范规定，Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可。也就是说堆的内存是一块块拼凑起来的。要增加堆空间时，往上“拼凑”（可扩展性）即可，但当堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError异常。</p>
<h3 id="方法区（Method-Area）"><a href="#方法区（Method-Area）" class="headerlink" title="方法区（Method Area）"></a>方法区（Method Area）</h3><p>方法区与堆有很多共性：线程共享、内存不连续、可扩展、可垃圾回收，同样当无法再扩展时会抛出OutOfMemoryError异常。</p>
<p>正因为如此相像，Java虚拟机规范把方法区描述为堆的一个逻辑部分，但目前实际上是与Java堆分开的（Non-Heap）。</p>
<p>方法区个性化的是，它存储的是已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p>
<p>方法区的内存回收目标主要是针对常量池的回收和对类型的卸载，一般来说这个区域的回收“成绩”比较难以令人满意，尤其是类型的卸载，条件相当苛刻，但是回收确实是有必要的。</p>
<img src="jvm/aHR0cDovL3d3dy5jaG91cGFuZ3hpYS5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTkvMTAvbWV0aG9kYXJlYS5qcGc" alt="image" style="zoom: 50%;" />

<h2 id="线程私有"><a href="#线程私有" class="headerlink" title="线程私有"></a>线程私有</h2><h3 id="程序计数器（Program-Counter-Register）"><a href="#程序计数器（Program-Counter-Register）" class="headerlink" title="程序计数器（Program Counter Register）"></a>程序计数器（Program Counter Register）</h3><p>关于程序计数器我们已经得知：占用内存较小，现成私有。它是唯一没有OutOfMemoryError异常的区域。</p>
<p>程序计数器的作用可以看做是当前线程所执行的字节码的行号指示器，字节码解释器工作时就是通过改变计数器的值来选取下一条字节码指令。其中，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖计数器来完成。</p>
<p>Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）只会执行一条线程中的指令。</p>
<p><img src="/jvm/aHR0cDovL3d3dy5jaG91cGFuZ3hpYS5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTkvMTAvcHJvZ3JhbS1jb3VudGVyLmpwZw" alt="image"></p>
<p>因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间的计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。</p>
<p>如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Natvie方法，这个计数器值则为空（Undefined）。</p>
<h3 id="虚拟机栈（JVM-Stacks）"><a href="#虚拟机栈（JVM-Stacks）" class="headerlink" title="虚拟机栈（JVM Stacks）"></a>虚拟机栈（JVM Stacks）</h3><p>虚拟机栈线程私有，生命周期与线程相同。</p>
<p>栈帧(Stack Frame)是用于支持虚拟机进行方法调用和方法执行的数据结构。栈帧存储了方法的局部变量表、操作数栈、动态连接和方法返回地址等信息。每一个方法从调用至执行完成的过程，都对应着一个栈帧在虚拟机栈里从入栈到出栈的过程。</p>
<p><img src="/jvm/aHR0cDovL3d3dy5jaG91cGFuZ3hpYS5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTkvMTAvc3RhY2suanBn" alt="image"></p>
<p>局部变量表(Local Variable Table)是一组变量值存储空间，用于存放方法参数和方法内定义的局部变量。包括8种基本数据类型、对象引用（reference类型）和returnAddress类型（指向一条字节码指令的地址）。</p>
<p>其中64位长度的long和double类型的数据会占用2个局部变量空间（Slot），其余的数据类型只占用1个。</p>
<p>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常；如果虚拟机栈动态扩展时无法申请到足够的内存时会抛出OutOfMemoryError异常。</p>
<p>操作数栈(Operand Stack)也称作操作栈，是一个后入先出栈(LIFO)。随着方法执行和字节码指令的执行，会从局部变量表或对象实例的字段中复制常量或变量写入到操作数栈，再随着计算的进行将栈中元素出栈到局部变量表或者返回给方法调用者，也就是出栈&#x2F;入栈操作。</p>
<p>动态链接：Java虚拟机栈中，每个栈帧都包含一个指向运行时常量池中该栈所属方法的符号引用，持有这个引用的目的是为了支持方法调用过程中的动态链接(Dynamic Linking)。</p>
<p>方法返回：无论方法是否正常完成，都需要返回到方法被调用的位置，程序才能继续进行。</p>
<h3 id="本地方法栈（Native-Method-Stacks）"><a href="#本地方法栈（Native-Method-Stacks）" class="headerlink" title="本地方法栈（Native Method Stacks）"></a>本地方法栈（Native Method Stacks）</h3><p>本地方法栈（Native Method Stacks）与虚拟机栈作用相似，也会抛出StackOverflowError和OutOfMemoryError异常。</p>
<p>区别在于虚拟机栈为虚拟机执行Java方法（字节码）服务，而本地方法栈是为虚拟机使用到的Native方法服务。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>经。</p>
<p><img src="/jvm/aHR0cDovL3d3dy5jaG91cGFuZ3hpYS5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTkvMTAvanZtLXhtaW5kLmpwZw" alt="image"></p>
<h1 id="设置内存参数"><a href="#设置内存参数" class="headerlink" title="设置内存参数"></a>设置内存参数</h1><p><img src="/jvm/aHR0cDovL3d3dy5jaG91cGFuZ3hpYS5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTkvMTAvaGVhcC5qcGc" alt="image"></p>
<p>图中展示了堆中三个区域：Eden、From Survivor、To Survivor。从图中可以也可以看到它们的大小比例，准确来说是：8:1:1。</p>
<p>还记得在设置JVM时，常用的类似-Xms和-Xmx等参数吗？对的它们就是用来说设置堆中各区域的大小的。</p>
<p> <img src="/jvm/aHR0cDovL3d3dy5jaG91cGFuZ3hpYS5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTkvMTAvc3RhY2stc2l6ZS5wbmc" alt="image"></p>
<p>控制参数详解：</p>
<ul>
<li>-Xms设置<strong>堆的最小空间</strong>大小。</li>
<li>-Xmx设置<strong>堆的最大空间</strong>大小。</li>
<li>-Xmn堆中<strong>新生代初始及最大大小</strong>（NewSize和MaxNewSize为其细化）。</li>
<li>-XX:NewSize设置新生代最小空间大小。</li>
<li>-XX:MaxNewSize设置新生代最大空间大小。</li>
<li>-XX:PermSize设置永久代最小空间大小。</li>
<li>-XX:MaxPermSize设置永久代最大空间大小。</li>
<li>-Xss设置每个线程的堆栈大小。</li>
</ul>
<p>对照上面两个图，再来看这些参数是不是没有之前那么枯燥了，它们在图中都有了对应的位置。</p>
<p>有没有发现没有直接设置老年代空间大小的参数？我们通过简单的计算获得。</p>
<ol>
<li>老年代空间大小&#x3D;堆空间大小-年轻代大空间大小</li>
</ol>
<p>对上面参数立即了，但记忆有困难？那么，以下几个助记词可能更好的帮你记忆和理解参数的含义。</p>
<p>Xmx（memory maximum）, Xms（memory startup）, Xmn（memory nursery&#x2F;new）, Xss（stack size）。</p>
<p>对于参数的格式可以这样理解：</p>
<ul>
<li><p>-: 标准VM选项，VM规范的选项。</p>
</li>
<li><p>-X: 非标准VM选项，不保证所有VM支持。</p>
</li>
<li><p>-XX: 高级选项，高级特性，但属于不稳定的选项</p>
</li>
</ul>
<h1 id="GC垃圾回收"><a href="#GC垃圾回收" class="headerlink" title="GC垃圾回收"></a>GC垃圾回收</h1><h2 id="GC概述"><a href="#GC概述" class="headerlink" title="GC概述"></a>GC概述</h2><p>垃圾收集（Garbage Collection）通常被称为“GC”，由虚拟机“自动化”完成垃圾回收工作。</p>
<p>思考一个问题，既然GC会自动回收，开发人员为什么要学习GC和内存分配呢？为了能够配置上面的参数配置？参数配置又是为了什么？</p>
<p>“<strong>当需要排查各种内存溢出，内存泄露问题时，当垃圾成为系统达到更高并发量的瓶颈时，我们就需要对GC的自动回收实施必要的监控和调节。</strong>”</p>
<p>JVM中程序计数器、虚拟机栈、本地方法栈3个区域随线程而生随线程而灭。栈帧随着方法的进入和退出做入栈和出栈操作，实现了自动的内存清理。它们的内存分配和回收都具有确定性。</p>
<p>因此，GC垃圾回收主要<strong>集中在堆和方法区</strong>，在程序运行期间，这部分内存的分配和使用都是动态的。</p>
<h2 id="GC回收流程"><a href="#GC回收流程" class="headerlink" title="GC回收流程"></a>GC回收流程</h2><p>​               <img src="/jvm/aHR0cHM6Ly9pbWcxLnR1aWNvb2wuY29tL3JNM1FSM3EuanBnIXdlYg" alt="img"></p>
<p>（1）Eden区域是用来存放使用new或者newInstance等方式创建的对象，默认都是存放在Eden区，除非这个对象太大，或者超过了设定的阈值-XX:PretenureSizeThresold,这样的对象会被直接分配到Old区域。</p>
<p>（2）2个Survivor（幸存）区，一般称S0，S1，理论上他们是一样大的，解释一下，他们是如何工作的：</p>
<p>在不断创建对象的过程中，Eden区会满，这时候会开始做Young G也叫Minor GC，而Young空间的第一次GC就是找出Eden区中，幸存活着的对象，然后将这些对象，放到S0，或S1区中的其中一个， 假设第一次选择了S0，它会逐步将活着的对象拷贝到S0区域，但是如果S0区域满了，剩下活着的对象只能放old区域了，接下来要做的是，将Eden区域 清空，此时时候S1区域也是空的。</p>
<p>当第二次Eden区域满的时候，就将Eden区域中活着的对象+S0区域中活着的对象，迁移到S1中，如果S1放不下，就会将剩下的部门，放到Old区域中，只是这次对象来源区域增加了S0，最后会将Eden区+S0区域，清空</p>
<p>第三次和第四次依次类推，始终保证S0和S1有一个是空的，用来存储临时对象，用于交换空间的目的，反反复复多次没有被淘汰的对象，将会放入old区域中，默认是15次。具体的交换过程就和上图中的信息相似。</p>
<p>如果old区域放不下，会进行fullGC，old区 young区 所有垃圾 全部剔除  如果放得下就放 再放不下 就会报内存溢出异常OOM</p>
<h2 id="如何判断对象存活"><a href="#如何判断对象存活" class="headerlink" title="如何判断对象存活"></a>如何判断对象存活</h2><p>判断对象常规有两种方法：引用计数算法和可达性分析算法（Reachability Analysis）。</p>
<p><strong>引用计数算法</strong>：给对象添加一个引用计数器，每当有一个地方引用它时计数器加1，引用释放时计数减1，当计数器为0时可以回收。</p>
<p>引用计数算法实现简单，判断高效，在微软COM和Python语言等被广泛使用，但在主流的Java虚拟机中没有使用该方法，主要是因为无法解决<strong>对象相互循环引用</strong>的问题。</p>
<p><strong>可达性分析算法</strong>：基本思想是通过一系列称为“GC Root”的对象（如系统类加载器、栈中的对象、处于激活状态的线程等）作为起点，基于对象引用关系，开始向下搜索，所走过的路径称为引用链，当一个对象到GC Root没有任何引用链相连，证明对象是不可用的。</p>
<p><img src="/jvm/aHR0cDovL3d3dy5jaG91cGFuZ3hpYS5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTkvMTAvZ2Mtcm9vdC5qcGc" alt="image"></p>
<p>上图中中绿色部分为存活对象，灰色部分为可回收对象。虽然灰色部分内部依旧有关联，但它们到GC Root是不可达的。 </p>
<h2 id="面试问题"><a href="#面试问题" class="headerlink" title="面试问题"></a>面试问题</h2><p>面试官，说说Java GC都用了哪些算法？分别应用在什么地方？</p>
<p>答：复制算法、标记清除、标记整理……</p>
<h2 id="标记清除算法"><a href="#标记清除算法" class="headerlink" title="标记清除算法"></a>标记清除算法</h2><p>标记清除（Mark-Sweep）算法，包含“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后统一回收掉所有被标记的对象。</p>
<p>标记清除算法是最基础的收集算法，后续的收集算法都是基于该思路并对其缺点进行改进而得到的。</p>
<p>​           <img src="/jvm/aHR0cDovL3d3dy5jaG91cGFuZ3hpYS5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTkvMTAvbWFyay1jbGVhbi5naWY" alt="image"> </p>
<p>主要缺点：一个是效率问题，标记和清除过程的效率都不高；另外是空间问题，标记清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致，当程序在以后的运行过程中需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</p>
<h2 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h2><p>复制（Copying）算法：将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当一块内存用完了，就将还存活着的对象复制到另外一块上，然后清理掉前一块。</p>
<p><img src="/jvm/aHR0cDovL3d3dy5jaG91cGFuZ3hpYS5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTkvMTAvZ2MtY29weWluZy5qcGc" alt="image"></p>
<p>每次对半区内存回收时、内存分配时就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可，实现简单，运行高效。</p>
<p>缺点：将内存缩小为一半，性价比低，持续复制长生存期的对象则导致效率低下。</p>
<p>JVM堆中新生代便采用复制算法。回到最初推分配结构图。</p>
<p><img src="/jvm/aHR0cDovL3d3dy5jaG91cGFuZ3hpYS5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTkvMTAvaGVhcC5qcGc" alt="image"></p>
<p>在GC回收过程中，当Eden区满时，还存活的对象会被复制到其中一个Survivor区；当回收时，会将Eden和使用的Survivor区还存活的对象，复制到另外一个Survivor区，然后对Eden和用过的Survivor区进行清理。</p>
<p>如果另外一个Survivor区没有足够的内存存储时，则会进入老年代。</p>
<p>这里针对哪些对象会进入老年代有这样的机制：对象每经历一次复制，年龄加1，达到晋升年龄阈值后，转移到老年代。</p>
<p>在这整个过程中，由于Eden中的对象属于像浮萍一样“瞬生瞬灭”的对象，所以并不需要1：1的比例来分配内存，而是采用了8：1：1的比例来分配。</p>
<p>而针对那些像“水熊虫”一样，历经多次清理依旧存活的对象，则会进入老年代，而老年的清理算法则采用下面要讲到的“标记整理算法”。</p>
<h2 id="标记整理算法"><a href="#标记整理算法" class="headerlink" title="标记整理算法"></a>标记整理算法</h2><p>标记整理（Mark-Compact）算法：标记过程与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p>
<p><img src="/jvm/aHR0cDovL3d3dy5jaG91cGFuZ3hpYS5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTkvMTAvbWFyay1jb21wYWN0LmpwZw" alt="image"></p>
<p>这种算法不既不用浪费50%的内存，也解决了复制算法在对象存活率较高时的效率低下问题。</p>
<h2 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h2><p>分代收集算法，基本思路：将Java的堆内存逻辑上分成两块，新生代和老年代，针对不同存活周期、不同大小的对象采取不同的垃圾回收策略。</p>
<p>而在新生代中大多数对象都是瞬间对象，只有少量对象存活，复制较少对象即可完成清理，因此采用复制算法。而针对老年代中的对象，存活率较高，又没有额外的担保内存，因此采用标记整理算法。</p>
<p>其实，回头看，分代收集算法就是对新生代和老年代算法从策略维度的规划而已。</p>
<h1 id="常见问题锦集"><a href="#常见问题锦集" class="headerlink" title="常见问题锦集"></a>常见问题锦集</h1><h2 id="1、对象进入Old区域有什么坏处？"><a href="#1、对象进入Old区域有什么坏处？" class="headerlink" title="1、对象进入Old区域有什么坏处？"></a>1、对象进入Old区域有什么坏处？</h2><p>old区域一般称为老年代，老年代与新生代不一样，年轻代，我们可以认为存活下来的对象很少，而老年代则相反，存活下来的对象很多，所以JVM的 堆内存，才是我们通常关注的主战场，因为这里面活着的对象非常多，所以发生一次FULL GC，来找出来所有存活的对象是非常耗时的，因此，我们应该尽量避免FULL GC的发生。</p>
<h2 id="2、S0和S1一般多大，靠什么参数来控制，有什么变化？"><a href="#2、S0和S1一般多大，靠什么参数来控制，有什么变化？" class="headerlink" title="2、S0和S1一般多大，靠什么参数来控制，有什么变化？"></a>2、S0和S1一般多大，靠什么参数来控制，有什么变化？</h2><p>一般来说很小，我们大概知道它与Young差不多相差一倍的比例，设置的的参数主要有两个：</p>
<p>-XX:SurvivorRatio&#x3D;8</p>
<p>-XX:InitialSurvivorRatio&#x3D;8</p>
<p>第一个参数是Eden和Survivor区域比重，注意是一个Survivor的的大小，如果将其设置为8，则说明Eden区是一个Survivor区的8倍，换句话说S0或S1空间是整个Young空间的1&#x2F;10，剩余的80%由Eden区域来使用。</p>
<p>第二个参数是Young&#x2F;S0的比值，当其设置为8时，表示s0或s1占整个Young空间的12.5%。</p>
<h2 id="3、一个对象每次Minor-Gc时，活着的对象都会在s0和s1区域转移，经过经过Minor-GC多少次后，会进入Old区域呢？"><a href="#3、一个对象每次Minor-Gc时，活着的对象都会在s0和s1区域转移，经过经过Minor-GC多少次后，会进入Old区域呢？" class="headerlink" title="3、一个对象每次Minor Gc时，活着的对象都会在s0和s1区域转移，经过经过Minor GC多少次后，会进入Old区域呢？"></a>3、一个对象每次Minor Gc时，活着的对象都会在s0和s1区域转移，经过经过Minor GC多少次后，会进入Old区域呢？</h2><p>默认是15次，参数设置-XX:MaxTenuringThreshold&#x3D;15,计数器会在对象的头部记录它交换的次数</p>
<h2 id="4、为什么发生FULL-GC会带来很大的危害？"><a href="#4、为什么发生FULL-GC会带来很大的危害？" class="headerlink" title="4、为什么发生FULL GC会带来很大的危害？"></a>4、为什么发生FULL GC会带来很大的危害？</h2><p>在发生FULL GC的时候，意味着JVM会安全的暂停所有正在执行的线程（Stop The World），来回收内存空间，在这个时间段内，所有除<strong>了回收垃圾的线程外，其他有关JAVA的程序，代码都会静止</strong>，反映到系统上，就会出现<strong>系统响应大幅度变慢，卡机</strong>等状态。</p>
<p>举个通俗易懂点的例子，就是在一个房间里，如果有一个人，不停的扔垃圾，然后有一个清洁工不停扫垃圾，这时候，我们的系统是OK的，因为基本不会 出现垃圾堆满房间的情景，而且因为清洁工可以对付过来，假设现在有10个人不停扔垃圾，那么就房间就会很快被堆满，这时候清洁工，由于工作不过来了，大声 吼一声，你们都暂停3分钟，别再扔了，我先把这个房间打扫完，你们才可以扔。</p>
<p>在这个场景中，一个人扔，一个人扫，就类似于Minor GC，这时候，并不会影响扔垃圾的人，然后一旦10个人同时仍，而且很快就没地方仍了，这时候，就会触发Full GC，然后JVM下令，你们暂时都别仍了，等我什么时候回收完垃圾了，你们在仍，现在大家清楚了吧，所谓的10个人，就是类似我们成千上百的java类， 在不停的执行任务，所谓的清洁工，就是我们的GC机制，所以，大家在平时编码的时候，一定注意尽量<strong>少造点垃圾对象</strong>，这样触发FULL GC的几率，才会变小。</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis使用</title>
    <url>/2021/07/11/Java/mybatis/mybatis/</url>
    <content><![CDATA[<h2 id="MyBatis-JDK-的动态代理技术"><a href="#MyBatis-JDK-的动态代理技术" class="headerlink" title="MyBatis JDK 的动态代理技术"></a>MyBatis JDK 的动态代理技术</h2><ul>
<li><p>分析动态代理对象如何生成的？ </p>
<p>通过动态代理开发模式，我们只编写一个接口，不写实现类，我们通过 getMapper() 方法最终获取到 <strong>org.apache.ibatis.binding.MapperProxy</strong> 代理对象，然后执行功能，而这个代理对象正是 MyBatis 使用了 JDK 的动态代理技术，帮助我们生成了代理实现类对象。从而可以进行相关持久化操作。 </p>
</li>
<li><p>分析方法是如何执行的？</p>
<p>动态代理实现类对象在执行方法的时候最终调用了 <strong>mapperMethod.execute()</strong> 方法，这个方法中通过 switch 语句根据操作类型来判断是新增、修改、删除、查询操作，最后一步回到了 MyBatis 最原生的 SqlSession 方式来执行增删改查。</p>
<p><strong>Debug跟读源码</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlSession.getMapper(StudentMapper.class);</span><br><span class="line">和</span><br><span class="line">mapper.selectAll();</span><br></pre></td></tr></table></figure></li>
</ul>
<p><img src="/Untitled/image-20200820174139362.png" alt="image-20200820174139362"></p>
<h2 id="mybatis使用"><a href="#mybatis使用" class="headerlink" title="mybatis使用"></a>mybatis使用</h2><h2 id="mapper-与xml对应关系"><a href="#mapper-与xml对应关系" class="headerlink" title="mapper 与xml对应关系"></a>mapper 与xml对应关系</h2><p>mapper                              ——————————&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;                mapper.xml  </p>
<p><img src="/Untitled/image-20220405173621291.png" alt="image-20220405173621291"></p>
<h2 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h2><h3 id="1-where-标签"><a href="#1-where-标签" class="headerlink" title="1.where 标签"></a>1.where 标签</h3><h3 id="2-if-标签"><a href="#2-if-标签" class="headerlink" title="2. if  标签"></a>2. if  标签</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="keyword">where</span><span class="operator">&gt;</span>：条件标签。如果有动态条件，则使用该标签代替 <span class="keyword">where</span> 关键字。</span><br><span class="line"></span><br><span class="line"><span class="operator">&lt;</span>if test<span class="operator">=</span>“条件判断”<span class="operator">&gt;</span></span><br><span class="line">	查询条件拼接</span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="/Untitled/image-20220405174735614.png" alt="image-20220405174735614"></p>
<h3 id="3-foreach标签-in-1-2-3"><a href="#3-foreach标签-in-1-2-3" class="headerlink" title="3.foreach标签 ( in (1,2,3))"></a>3.foreach标签 ( in (1,2,3))</h3><p>例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> student  <span class="keyword">WHERE</span> id <span class="keyword">IN</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure>





<p><img src="/Untitled/image-20220405180436103.png" alt="image-20220405180436103"></p>
<p>collection：参数容器类型， (list-集合， array-数组)。<br>open：开始的 SQL 语句。<br>close：结束的 SQL 语句。<br>item：参数变量名。<br>separator：分隔符。</p>
<p><img src="/mybatis/image-20220410233050827.png" alt="image-20220410233050827"></p>
<h3 id="4-sql片段的抽取"><a href="#4-sql片段的抽取" class="headerlink" title="4.sql片段的抽取"></a>4.sql片段的抽取</h3><p><strong>定义：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;片段名字&quot;</span>&gt;</span> sql片段 <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>引用：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;片段名字&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/Untitled/image-20220405180924111.png" alt="image-20220405180924111"></p>
<h2 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h2><p>字段和实体对象属性的映射关系</p>
<h2 id="一对一查询"><a href="#一对一查询" class="headerlink" title="一对一查询"></a>一对一查询</h2><p>卡号 -人</p>
<p><img src="/mybatis/image-20220405183520673.png" alt="image-20220405183520673"></p>
<h2 id="一对多查询"><a href="#一对多查询" class="headerlink" title="一对多查询"></a>一对多查询</h2><p>班级学生</p>
<p><img src="/mybatis/image-20220411001204161.png" alt="image-20220411001204161"></p>
<h2 id="多对多查询"><a href="#多对多查询" class="headerlink" title="多对多查询"></a>多对多查询</h2><p>学生 课程</p>
<p>多对多</p>
<p><img src="/mybatis/image-20220411002638101.png" alt="image-20220411002638101"></p>
<p>column 属性：<strong>表</strong>中字段名称</p>
<p>property 属性：被包含<strong>对象</strong>的<strong>变量</strong>名</p>
]]></content>
      <categories>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>MinIO</title>
    <url>/2020/11/20/Java/minio%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8/minio/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><blockquote>
<p>常见的对象存储服务有阿里云的OSS对象存储、FastDFS分布式文件系统以及公司的私有云平台等等，以便于数据的存储和快速获取。但随着业务的快速发展，我们需要存储一些身份信息用于审核和实名相关的数据，这部分数据较为敏感，因此对于敏感数据的存储我们选择了使用兼容S3协议的开源分布式对象存储-<a href="https://so.csdn.net/so/search?q=Minio&spm=1001.2101.3001.7020">Minio</a>来进行自建服务。</p>
</blockquote>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>MinIO对象存储系统是为海量数据存储、人工智能、大数据分析而设计，基于Apache License v2.0开源协议的对象存储系统，它完全兼容Amazon S3接口，单个对象最大可达5TB，适合存储海量图片、视频、日志文件、备份数据和容器&#x2F;虚拟机镜像等。MinIO主要采用Golang语言实现，整个系统都运行在操作系统的用户态空间，客户端与存储服务器之间采用http&#x2F;https通信协议。</p>
</blockquote>
<p>中文文档方便学习Minio：<a href="http://docs.minio.org.cn/docs/master/minio-docker-quickstart-guide">http://docs.minio.org.cn/docs/master/minio-docker-quickstart-guide</a></p>
<h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><h3 id="1-查询minio服务版本"><a href="#1-查询minio服务版本" class="headerlink" title="1.查询minio服务版本"></a>1.查询minio服务版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker search minio</span><br></pre></td></tr></table></figure>

<p><img src="/minio/97b50b33713246528527163eb9e47421.png" alt="在这里插入图片描述"></p>
<h3 id="2-拉取minio"><a href="#2-拉取minio" class="headerlink" title="2.拉取minio"></a>2.拉取minio</h3><h3 id="3-docker-hub下载其他版本"><a href="#3-docker-hub下载其他版本" class="headerlink" title="3. docker hub下载其他版本"></a>3. docker hub下载其他版本</h3><p><a href="https://hub.docker.com/r/minio/minio/tags?page=1&ordering=last_updated">https://hub.docker.com/r/minio/minio/tags?page=1&amp;ordering=last_updated</a></p>
<p><strong>2021年6月17号的</strong>。<br><img src="/minio/1cb2ddcc346a4442a4f26b605d41cfb4.png" alt="在这里插入图片描述"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">docker pull minio/minio:RELEASE<span class="number">.2021</span>-<span class="number">06</span>-17T00-<span class="number">10</span>-46Z</span><br></pre></td></tr></table></figure>



<h3 id="4-启动"><a href="#4-启动" class="headerlink" title="4. 启动"></a>4. 启动</h3><blockquote>
<p>MinIO 需要一个持久卷来存储配置和应用数据。不过, 如果只是为了测试一下, 您可以通过简单地传递一个目录（在下面的示例中为&#x2F; data）启动MinIO。这个目录会在容器启动时在容器的文件系统中创建，不过所有的数据都会在容器退出时丢失。</p>
</blockquote>
<p>首先你的key 和 secret是重要的，就相当于你的账号密码，不要设置的那么简单，还有就是你的文件存放，假设服务宕机了，文件也不丢失，服务迁移了，文件也能跟着迁移，这才是工作中应当注意的地方。</p>
<p><strong>要覆盖MinIO的自动生成的密钥，您可以将Access和Secret密钥设为环境变量。 MinIO允许常规字符串作为Access和Secret密钥。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">docker run -d -p <span class="number">9000</span>:<span class="number">9000</span> --name minio\</span><br><span class="line">  -e <span class="string">&quot;MINIO_ACCESS_KEY=admin&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;MINIO_SECRET_KEY=1415479273@qq.com&quot;</span> \</span><br><span class="line">  -v /mydata/minio/data:/data \</span><br><span class="line">  -v /mydata/minio/config:/root/.minio \</span><br><span class="line">  minio/minio:RELEASE<span class="number">.2021</span>-<span class="number">06</span>-17T00-<span class="number">10</span>-46Z server /data</span><br></pre></td></tr></table></figure>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/mydata/minio/data // 数据卷存放路径（自行添加）</span><br><span class="line">/mydata/minio/config //服务配置文件（自行添加）</span><br></pre></td></tr></table></figure>




<p>上传文件成功之后，我们去到我们的服务data数据卷存储位置，查看文件是否存在。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-yml配置文件"><a href="#2-yml配置文件" class="headerlink" title="2.yml配置文件"></a>2.yml配置文件</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">100MB</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="string">1000MB</span></span><br><span class="line">      </span><br><span class="line"><span class="comment">#minio配置</span></span><br><span class="line"><span class="attr">minio:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">http://8.144.162.164:9000</span>  <span class="comment">#对象存储服务的URL</span></span><br><span class="line">  <span class="attr">accessKey:</span> <span class="string">admin</span> <span class="comment">#Access key账户</span></span><br><span class="line">  <span class="attr">secretKey:</span> <span class="string">xxx</span>  <span class="comment">#Secret key密码</span></span><br></pre></td></tr></table></figure>

<h3 id="3-注入MinioClient"><a href="#3-注入MinioClient" class="headerlink" title="3.注入MinioClient"></a>3.注入MinioClient</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> boot.spring.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.minio.MinioClient;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioConfig</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Value(&quot;$&#123;minio.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.accessKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessKey;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.secretKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String secretKey;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MinioClient <span class="title function_">getMinioClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MinioClient</span> <span class="variable">minioClient</span> <span class="operator">=</span> MinioClient.builder().endpoint(url)</span><br><span class="line">            .credentials(accessKey, secretKey).build();</span><br><span class="line">        <span class="keyword">return</span> minioClient;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="4-组件-MinioUtil"><a href="#4-组件-MinioUtil" class="headerlink" title="4.组件-MinioUtil"></a>4.组件-MinioUtil</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> boot.spring.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> boot.spring.domain.Fileinfo;</span><br><span class="line"><span class="keyword">import</span> io.minio.BucketExistsArgs;</span><br><span class="line"><span class="keyword">import</span> io.minio.GetObjectArgs;</span><br><span class="line"><span class="keyword">import</span> io.minio.ListObjectsArgs;</span><br><span class="line"><span class="keyword">import</span> io.minio.MakeBucketArgs;</span><br><span class="line"><span class="keyword">import</span> io.minio.MinioClient;</span><br><span class="line"><span class="keyword">import</span> io.minio.PutObjectArgs;</span><br><span class="line"><span class="keyword">import</span> io.minio.RemoveBucketArgs;</span><br><span class="line"><span class="keyword">import</span> io.minio.RemoveObjectArgs;</span><br><span class="line"><span class="keyword">import</span> io.minio.Result;</span><br><span class="line"><span class="keyword">import</span> io.minio.messages.Bucket;</span><br><span class="line"><span class="keyword">import</span> io.minio.messages.Item;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioUtil</span> &#123;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MinioClient minioClient;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 创建一个桶</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createBucket</span><span class="params">(String bucket)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      <span class="type">boolean</span> <span class="variable">found</span> <span class="operator">=</span> minioClient.bucketExists(BucketExistsArgs.builder().bucket(bucket).build());</span><br><span class="line">      <span class="keyword">if</span> (!found) &#123;</span><br><span class="line">         minioClient.makeBucket(MakeBucketArgs.builder().bucket(bucket).build());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 删除一个桶</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteBucket</span><span class="params">(String bucket)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      minioClient.removeBucket(RemoveBucketArgs.builder().bucket(bucket).build());</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 列出所有的桶</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">listBuckets</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      List&lt;Bucket&gt; list = minioClient.listBuckets();</span><br><span class="line">      List&lt;String&gt; names = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">      list.forEach(b -&gt; &#123;</span><br><span class="line">         names.add(b.name());</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">return</span> names;</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 列出一个桶中的所有文件和目录</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> List&lt;Fileinfo&gt; <span class="title function_">listFiles</span><span class="params">(String bucket)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      Iterable&lt;Result&lt;Item&gt;&gt; results = minioClient.listObjects(</span><br><span class="line">             ListObjectsArgs.builder().bucket(bucket).recursive(<span class="literal">true</span>).build());</span><br><span class="line">         </span><br><span class="line">         List&lt;Fileinfo&gt; infos = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            results.forEach(r-&gt;&#123;</span><br><span class="line">               <span class="type">Fileinfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fileinfo</span>();</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                  <span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> r.get();</span><br><span class="line">                  info.setFilename(item.objectName());</span><br><span class="line">                  info.setDirectory(item.isDir());</span><br><span class="line">                  infos.add(info);</span><br><span class="line">               &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                  e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">      <span class="keyword">return</span> infos;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 上传一个文件</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uploadFile</span><span class="params">(InputStream stream, String bucket, String objectName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      minioClient.putObject(PutObjectArgs.builder().bucket(bucket).object(objectName)</span><br><span class="line">            .stream(stream, -<span class="number">1</span>, <span class="number">10485760</span>).build());</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 下载一个文件</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> InputStream <span class="title function_">download</span><span class="params">(String bucket, String objectName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      <span class="type">InputStream</span> <span class="variable">stream</span> <span class="operator">=</span> minioClient.getObject(</span><br><span class="line">                    GetObjectArgs.builder().bucket(bucket).object(objectName).build());</span><br><span class="line">      <span class="keyword">return</span> stream;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 删除一个文件</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteObject</span><span class="params">(String bucket, String objectName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      minioClient.removeObject(RemoveObjectArgs.builder().bucket(bucket).object(objectName).build());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> boot.spring.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.security.InvalidKeyException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> boot.spring.service.MinIOService;</span><br><span class="line"><span class="keyword">import</span> io.minio.BucketExistsArgs;</span><br><span class="line"><span class="keyword">import</span> io.minio.MakeBucketArgs;</span><br><span class="line"><span class="keyword">import</span> io.minio.MinioClient;</span><br><span class="line"><span class="keyword">import</span> io.minio.PutObjectArgs;</span><br><span class="line"><span class="keyword">import</span> io.minio.UploadObjectArgs;</span><br><span class="line"><span class="keyword">import</span> io.minio.errors.MinioException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service(&quot;minIOService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinIOServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">MinIOService</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchAlgorithmException, InvalidKeyException &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">// Create a minioClient with the MinIO server playground, its access</span></span><br><span class="line">         <span class="comment">// key and secret key.</span></span><br><span class="line">         <span class="type">MinioClient</span> <span class="variable">minioClient</span> <span class="operator">=</span> MinioClient.builder().endpoint(<span class="string">&quot;http://192.168.7.250:9000&quot;</span>)</span><br><span class="line">               .credentials(<span class="string">&quot;minioadmin&quot;</span>, <span class="string">&quot;minioadmin&quot;</span>).build();</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Make &#x27;asiatrip&#x27; bucket if not exist.</span></span><br><span class="line">         <span class="type">boolean</span> <span class="variable">found</span> <span class="operator">=</span> minioClient.bucketExists(BucketExistsArgs.builder().bucket(<span class="string">&quot;abc&quot;</span>).build());</span><br><span class="line">         <span class="keyword">if</span> (!found) &#123;</span><br><span class="line">            <span class="comment">// Make a new bucket called &#x27;asiatrip&#x27;.</span></span><br><span class="line">            minioClient.makeBucket(MakeBucketArgs.builder().bucket(<span class="string">&quot;abc&quot;</span>).build());</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Bucket &#x27;abc&#x27; already exists.&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="comment">// Upload &#x27;/home/user/Photos/asiaphotos.zip&#x27; as object name</span></span><br><span class="line">         <span class="comment">// &#x27;asiaphotos-2015.zip&#x27; to bucket</span></span><br><span class="line">         <span class="comment">// &#x27;asiatrip&#x27;.</span></span><br><span class="line"><span class="comment">//       minioClient.uploadObject(UploadObjectArgs.builder().bucket(&quot;abc&quot;).object(&quot;1.txt&quot;)</span></span><br><span class="line"><span class="comment">//             .filename(&quot;D:\\实时监控数据.txt&quot;).build());</span></span><br><span class="line"><span class="comment">//       System.out.println(&quot;&#x27;实时监控数据.txt&#x27; is successfully uploaded as &quot;</span></span><br><span class="line"><span class="comment">//             + &quot;object &#x27;1.txt&#x27; to bucket &#x27;abc&#x27;.&quot;);</span></span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">      &#125; <span class="keyword">catch</span> (MinioException e) &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;Error occurred: &quot;</span> + e);</span><br><span class="line">         System.out.println(<span class="string">&quot;HTTP trace: &quot;</span> + e.httpTrace());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="6-Controller"><a href="#6-Controller" class="headerlink" title="6.Controller"></a>6.Controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> boot.spring.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.http.fileupload.IOUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> boot.spring.domain.AjaxResult;</span><br><span class="line"><span class="keyword">import</span> boot.spring.util.MinioUtil;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//@Api(tags = &quot;文件操作接口&quot;)</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileController</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   MinioUtil minioUtil;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//@ApiOperation(&quot;上传一个文件&quot;)</span></span><br><span class="line">   <span class="meta">@RequestMapping(value = &quot;/uploadfile&quot;, method = RequestMethod.POST)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="keyword">public</span> AjaxResult <span class="title function_">fileupload</span><span class="params">(<span class="meta">@RequestParam</span> MultipartFile uploadfile, <span class="meta">@RequestParam</span> String bucket, </span></span><br><span class="line"><span class="params">         <span class="meta">@RequestParam(required=false)</span> String objectName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      minioUtil.createBucket(bucket);</span><br><span class="line">      <span class="keyword">if</span> (objectName != <span class="literal">null</span>) &#123;</span><br><span class="line">         minioUtil.uploadFile(uploadfile.getInputStream(), bucket, objectName+<span class="string">&quot;/&quot;</span>+uploadfile.getOriginalFilename());</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         minioUtil.uploadFile(uploadfile.getInputStream(), bucket, uploadfile.getOriginalFilename());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> AjaxResult.success();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//@ApiOperation(&quot;列出所有的桶&quot;)</span></span><br><span class="line">   <span class="meta">@RequestMapping(value = &quot;/listBuckets&quot;, method = RequestMethod.GET)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="keyword">public</span> AjaxResult <span class="title function_">listBuckets</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      <span class="keyword">return</span> AjaxResult.success(minioUtil.listBuckets());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//http://localhost:9000/列出所有的桶</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">//@ApiOperation(&quot;递归列出一个桶中的所有文件和目录&quot;)</span></span><br><span class="line">   <span class="meta">@RequestMapping(value = &quot;/listFiles&quot;, method = RequestMethod.GET)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="keyword">public</span> AjaxResult <span class="title function_">listFiles</span><span class="params">(<span class="meta">@RequestParam</span> String bucket)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      <span class="keyword">return</span> AjaxResult.success(<span class="string">&quot;200&quot;</span>, minioUtil.listFiles(bucket));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//&#123;&quot;msg&quot;:&quot;200&quot;,&quot;code&quot;:0,&quot;data&quot;:[&#123;&quot;filename&quot;:&quot;a/snap.png&quot;,&quot;directory&quot;:false&#125;,&#123;&quot;filename&quot;:&quot;b/a/snap.png&quot;,&quot;directory&quot;:false&#125;,&#123;&quot;filename&quot;:&quot;snap.png&quot;,&quot;directory&quot;:false&#125;]&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//@ApiOperation(&quot;下载一个文件&quot;)</span></span><br><span class="line">   <span class="meta">@RequestMapping(value = &quot;/downloadFile&quot;, method = RequestMethod.GET)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloadFile</span><span class="params">(<span class="meta">@RequestParam</span> String bucket, <span class="meta">@RequestParam</span> String objectName,</span></span><br><span class="line"><span class="params">         HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      <span class="type">InputStream</span> <span class="variable">stream</span> <span class="operator">=</span> minioUtil.download(bucket, objectName);</span><br><span class="line">      <span class="type">ServletOutputStream</span> <span class="variable">output</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">      response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(objectName.substring(objectName.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>), <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">      IOUtils.copy(stream, output);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//http://localhost:9000/downloadFile?bucket=bucket&amp;objectName=b/a/snap.png</span></span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   <span class="comment">//@ApiOperation(&quot;删除一个文件&quot;)</span></span><br><span class="line">   <span class="meta">@RequestMapping(value = &quot;/deleteFile&quot;, method = RequestMethod.GET)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="keyword">public</span> AjaxResult <span class="title function_">deleteFile</span><span class="params">(<span class="meta">@RequestParam</span> String bucket, <span class="meta">@RequestParam</span> String objectName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      minioUtil.deleteObject(bucket, objectName);</span><br><span class="line">      <span class="keyword">return</span> AjaxResult.success();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//http://localhost:9000/deleteFile?bucket=bucket&amp;objectName=b/a/snap.png</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//@ApiOperation(&quot;删除一个桶&quot;)</span></span><br><span class="line">   <span class="meta">@RequestMapping(value = &quot;/deleteBucket&quot;, method = RequestMethod.GET)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="keyword">public</span> AjaxResult <span class="title function_">deleteBucket</span><span class="params">(<span class="meta">@RequestParam</span> String bucket)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      minioUtil.deleteBucket(bucket);</span><br><span class="line">      <span class="keyword">return</span> AjaxResult.success();</span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>参考：<a href="https://gitee.com/shenzhanwang/Spring-minio">https://gitee.com/shenzhanwang/Spring-minio</a></p>
]]></content>
      <categories>
        <category>使用Java 操作MinIO</category>
      </categories>
      <tags>
        <tag>分布式文件存储</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql安装使用问题</title>
    <url>/2021/10/10/Java/mysql/mysql/</url>
    <content><![CDATA[<h2 id="sql语句"><a href="#sql语句" class="headerlink" title="sql语句"></a>sql语句</h2><p>暂未整理</p>
<h2 id="mysql安装使用问题"><a href="#mysql安装使用问题" class="headerlink" title="mysql安装使用问题"></a>mysql安装使用问题</h2><h3 id="1-不允许远程连接"><a href="#1-不允许远程连接" class="headerlink" title="1.不允许远程连接"></a>1.不允许远程连接</h3><p>方法一：</p>
<ul>
<li><p>问题描述</p>
<p>Host ‘xxx’ is not allowed to connect to this MySQL server 1130-主机‘xxx’不允许连接到此MySQL服务器</p>
</li>
</ul>
<p><strong>步骤一</strong> 登陆</p>
<p>mysql -u root -p</p>
<p><strong>步骤二</strong> 查询user表</p>
<p>use mysql;</p>
<p>select host from user where user&#x3D;’root’;</p>
<p>可以看到当前主机配置信息为localhost.</p>
<p><strong>步骤三</strong>.将Host设置为通配符%</p>
<p>Host列指定了允许用户登录所使用的IP，比如user&#x3D;root Host&#x3D;192.168.1.1。这里的意思就是说root用户只能通过192.168.1.1的客户端去访问。 user&#x3D;root Host&#x3D;localhost，表示只能通过本机客户端去访问。而%是个通配符，如果Host&#x3D;192.168.1.%，那么就表示只要是IP地址前缀为“192.168.1.”的客户端都可以连接。如果Host&#x3D;%，表示所有IP都有连接权限。 </p>
<p>注意：在生产环境下不能为了省事将host设置为%，这样做会存在安全问题，具体的设置可以根据<strong>生产环境的IP进行设置</strong>；</p>
<p>update user set host &#x3D; ‘%’ where user &#x3D;’root’;</p>
<p>Host设置了“%”后便可以允许远程访问。</p>
<p><strong>步骤四</strong>.Host修改完成后记得执行flush privileges使配置立即生效</p>
<p>flush privileges;</p>
<p>6.使用navicat 成功连接至mysql</p>
<p>方法二：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span> <span class="keyword">with</span> <span class="keyword">grant</span> option;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>h或者</p>
<pre><code>//授权
grant all privileges on *.* to &#39;root&#39; @&#39;%&#39; identified by &#39;密码&#39;;

//刷新
flush privileges;
</code></pre>
<h3 id="2-修改mysql密码"><a href="#2-修改mysql密码" class="headerlink" title="2.修改mysql密码"></a>2.修改mysql密码</h3><h4 id="知道密码"><a href="#知道密码" class="headerlink" title="知道密码"></a>知道密码</h4><p>在清楚的知道密码的情况之下可以使用以下几种方式修改MySQL的密码。</p>
<p><strong>方式一</strong></p>
<blockquote>
<p>登录mysql执行以下语句</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql <span class="operator">-</span>u root <span class="operator">-</span>p</span><br></pre></td></tr></table></figure>

<blockquote>
<p>按回车确认, 如果安装正确且 MySQL 正在运行, 会得到以下响应:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Enter password: xxx</span><br></pre></td></tr></table></figure>

<blockquote>
<p>若密码存在, 输入密码登录, 不存在则直接按回车登录。登录成功后你将会看到 Welcome to the MySQL monitor… 的提示语。</p>
</blockquote>
<p>修改密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>出现Query OK, 0 rows affected (0.36 sec)，表示修改成功。</p>
</blockquote>
<p>报错  ERROR 1396 (HY000): Operation ALTER USER failed for ‘root‘@’localhost’</p>
<p>mysql&gt; use mysql;<br>mysql&gt; select user,host from user;<br>+——————+———–+<br>| user             | host      |<br>+——————+———–+<br>| root             | %         |<br>| admin            | localhost |<br>| mysql.infoschema | localhost |<br>| mysql.session    | localhost |<br>| mysql.sys        | localhost |<br>| zhangj           | localhost |<br>+——————+———–+<br>注意我的root，host是’%’</p>
<p>你可能执行的是:</p>
<p>ALTER USER ‘root‘@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘123’;<br>改成:</p>
<p>ALTER USER ‘root‘@’%’ IDENTIFIED WITH mysql_native_password BY ‘123’;</p>
<p> <strong>方式二</strong></p>
<p><strong>通过mysqladmin修改密码</strong></p>
<p>root 用户可以使用 mysqladmin 命令来修改密码，mysqladmin 的语法格式如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqladmin -u username -h hostname -p password <span class="string">&quot;newpwd&quot;</span></span><br></pre></td></tr></table></figure>

<p>语法参数说明如下：</p>
<ul>
<li>usermame 指需要修改密码的用户名称，在这里指定为 root 用户；</li>
<li>hostname 指需要修改密码的用户主机名，该参数可以不写，默认是 localhost；</li>
<li>password 为关键字，而不是指旧密码；</li>
<li>newpwd 为新设置的密码，必须用双引号括起来。如果使用单引号会引发错误，可能会造成修改后的密码不是你想要的。</li>
</ul>
<p><img src="/mysql/20210620124108836.png" alt="img"></p>
<p>警告：由于密码将以明文形式发送到服务器，请使用ssl连接以确保密码安全。</p>
<p>提示的这部分就不用管了。 </p>
<p>修改完成。</p>
<h4 id="忘记密码"><a href="#忘记密码" class="headerlink" title="忘记密码"></a>忘记密码</h4><p>在忘记密码的情况下如何强制修改密码，我在此提供一种办法。</p>
<blockquote>
<ol>
<li>以超级管理员打开cmd，关闭mysql服务</li>
</ol>
</blockquote>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">net <span class="keyword">stop</span> mysql</span><br></pre></td></tr></table></figure>

<blockquote>
<ol start="2">
<li>跳过权限验证登录mysql</li>
</ol>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysqld --shared-memory --skip-grant-tables</span><br></pre></td></tr></table></figure>

<blockquote>
<ol start="3">
<li>在新的窗口中登录mysql</li>
</ol>
</blockquote>
<p>使用命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<p>无需输入密码，直接回车即可。</p>
<blockquote>
<ol start="4">
<li>切换到mysql，将密码置空。</li>
</ol>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">update user <span class="built_in">set</span> authentication_string=<span class="string">&#x27;&#x27;</span> <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>然后刷新权限:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<blockquote>
<ol start="5">
<li>设置加密规则并更新新密码，授权(直接复制这些SQL语句你的密码会更新为123456)</li>
</ol>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ALTER USER <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;123456&#x27;</span> PASSWORD EXPIRE NEVER; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">alter user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">grant all privileges  on *.*  to <span class="string">&quot;root&quot;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<blockquote>
<ol start="6">
<li>设置成功后，重启mysql服务，使用新密码登录</li>
</ol>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure>





































]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>onlyoffice-在线word使用</title>
    <url>/2021/05/23/Java/onlyoffice/onlyoffice/</url>
    <content><![CDATA[<hr>
<h1 id="onlyoffice-服务端的安装"><a href="#onlyoffice-服务端的安装" class="headerlink" title="onlyoffice 服务端的安装"></a>onlyoffice 服务端的安装</h1><ol>
<li>拉取镜像</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull onlyoffice/documentserver</span><br></pre></td></tr></table></figure>

<p>​    </p>
<p>  2.创建容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -i -t -d -p 8085:80 --restart=always \</span><br><span class="line">    -v /app/onlyoffice/DocumentServer/logs:/var/log/onlyoffice  \</span><br><span class="line">    -v /app/onlyoffice/DocumentServer/data:/var/www/onlyoffice/Data  \</span><br><span class="line">    -v /app/onlyoffice/DocumentServer/lib:/var/lib/onlyoffice \</span><br><span class="line">    -v /app/onlyoffice/DocumentServer/db:/var/lib/postgresql  onlyoffice/documentserver</span><br></pre></td></tr></table></figure>

<p>之前二步即可 </p>
<p>创建实例检查是否可用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker exec 55aa23804ae8 sudo supervisorctl start ds:example</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker exec 55aa23804ae8 sudo sed &#x27;s,autostart=false,autostart=true,&#x27; -i /etc/supervisor/conf.d/ds-example.conf</span><br></pre></td></tr></table></figure>





<p>onlyoffice 配置地址不可用localhost 或127.0.0.1 必须要用电脑本机地址</p>
<p>因为本地服务是调用另一个Server</p>
<p>进入容器<br>docker exec -i -t 55aa23804ae8 &#x2F;bin&#x2F;bash</p>
<h1 id="onlyoffice客户端"><a href="#onlyoffice客户端" class="headerlink" title="onlyoffice客户端"></a>onlyoffice客户端</h1><h2 id="1-pom-xml"><a href="#1-pom-xml" class="headerlink" title="1.pom.xml"></a>1.pom.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- servlet 依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tomcat 的支持.--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h2 id="2-controller"><a href="#2-controller" class="headerlink" title="2.controller"></a>2.controller</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">aa</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/d&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">downExcel</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> UnsupportedEncodingException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\tiger\\aaa1.doc&quot;</span>);</span><br><span class="line">        <span class="comment">// 如果文件存在，则进行下载</span></span><br><span class="line">        <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">            <span class="comment">// 配置文件下载</span></span><br><span class="line">            response.setHeader(<span class="string">&quot;content-type&quot;</span>, <span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">            <span class="comment">// 下载文件能正常显示中文</span></span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(<span class="string">&quot;aaa1.doc&quot;</span>, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            <span class="comment">// 实现文件下载</span></span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">                bis = <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(fis);</span><br><span class="line">                <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> bis.read(buffer);</span><br><span class="line">                <span class="keyword">while</span> (i != -<span class="number">1</span>) &#123;</span><br><span class="line">                    os.write(buffer, <span class="number">0</span>, i);</span><br><span class="line">                    i = bis.read(buffer);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;Download  successfully!&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;successfully&quot;</span>;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Download  failed!&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;failed&quot;</span>;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (bis != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        bis.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (fis != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        fis.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存修改后的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/docx/save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWord</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">            <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(request.getInputStream());</span><br><span class="line">                scanner.useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                body = scanner.hasNext() ? scanner.next() : <span class="string">&quot;&quot;</span>;</span><br><span class="line">                scanner.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                writer.write(<span class="string">&quot;get request.getInputStream error:&quot;</span> + ex.getMessage());</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (body.isEmpty()) &#123;</span><br><span class="line">                writer.write(<span class="string">&quot;empty request.getInputStream&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">JSONObject</span> <span class="variable">jsonObj</span> <span class="operator">=</span> JSON.parseObject(body);</span><br><span class="line">            <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> (Integer) jsonObj.get(<span class="string">&quot;status&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">saved</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (status == <span class="number">2</span> || status == <span class="number">3</span>)<span class="comment">//MustSave, Corrupted</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">downloadUri</span> <span class="operator">=</span> (String) jsonObj.get(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(downloadUri);</span><br><span class="line">                    java.net.<span class="type">HttpURLConnection</span> <span class="variable">connection</span> <span class="operator">=</span> (java.net.HttpURLConnection) url.openConnection();</span><br><span class="line">                    <span class="type">InputStream</span> <span class="variable">stream</span> <span class="operator">=</span> connection.getInputStream();</span><br><span class="line">                    <span class="keyword">if</span> (stream == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;Stream is null&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 从请求中获取要覆盖的文件参数定义&quot;path&quot;</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;path&quot;</span>);</span><br><span class="line">                    System.err.println(<span class="string">&quot;====路径:&quot;</span>+path);</span><br><span class="line">                    <span class="type">File</span> <span class="variable">savedFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">                    <span class="keyword">try</span> (<span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(savedFile)) &#123;</span><br><span class="line">                        <span class="type">int</span> read;</span><br><span class="line">                        <span class="keyword">final</span> <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                        <span class="keyword">while</span> ((read = stream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                            out.write(bytes, <span class="number">0</span>, read);</span><br><span class="line">                        &#125;</span><br><span class="line">                        out.flush();</span><br><span class="line">                    &#125;</span><br><span class="line">                    connection.disconnect();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                    saved = <span class="number">1</span>;</span><br><span class="line">                    ex.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">&quot;编辑完成--------------11111&quot;</span>);</span><br><span class="line">            writer.write(<span class="string">&quot;&#123;\&quot;error\&quot;:&quot;</span> + saved + <span class="string">&quot;&#125;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="3-main"><a href="#3-main" class="headerlink" title="3.main"></a>3.main</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-resource-templates"><a href="#4-resource-templates" class="headerlink" title="4.resource-&gt;templates"></a>4.resource-&gt;templates</h2><ul>
<li>index.html</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>dubbo2.5.4案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;form action=&quot;#&quot; th:action=&quot;@&#123;/initOrder&#125;&quot; method=&quot;get&quot;&gt;</span></span><br><span class="line"><span class="comment">    输入编号：&lt;input type=&quot;text&quot; name=&quot;uid&quot;&gt;</span></span><br><span class="line"><span class="comment">    &lt;input type=&quot;submit&quot; value=&quot;查询&quot;&gt;</span></span><br><span class="line"><span class="comment">&lt;/form&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;fileEdit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://172.16.1.125:8081/web-apps/apps/api/documents/api.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用js创建预览对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">DocsAPI</span>.<span class="title class_">DocEditor</span>(<span class="string">&quot;fileEdit&quot;</span>, <span class="comment">// 元素id</span></span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;document&quot;</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;permissions&quot;</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&quot;edit&quot;</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;fileType&quot;</span>: <span class="string">&quot;docx&quot;</span>, <span class="comment">// 展示文件的类型</span></span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;title&quot;</span>: <span class="string">&quot;页面展示的文件名称&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;url&quot;</span>:<span class="string">&quot;http://10.10.10.22:8080/d&quot;</span> <span class="comment">//读取文件进行展示</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;documentType&quot;</span>: <span class="string">&quot;text&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;editorConfig&quot;</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;lang&quot;</span> : <span class="string">&quot;zh-CN&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 回调接口，用于编辑后实现保存的功能,(关闭页面5秒左右会触发)</span></span></span><br><span class="line"><span class="language-javascript">                <span class="string">&quot;callbackUrl&quot;</span>: <span class="string">&quot;http://10.10.10.22:8080/docx/save?path=D:/tiger/aaa1.doc&quot;</span> <span class="comment">//保存文件的接口?path=告诉保存接口需要覆盖的文件</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;height&quot;</span>: <span class="string">&quot;1300px&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;width&quot;</span>: <span class="string">&quot;100%&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="5-jsp修改"><a href="#5-jsp修改" class="headerlink" title="5.jsp修改"></a>5.jsp修改</h2><h3 id="1-pom文件jsp的依赖"><a href="#1-pom文件jsp的依赖" class="headerlink" title="1.pom文件jsp的依赖"></a>1.pom文件jsp的依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        &amp;lt;!&amp;ndash; servlet 依赖 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;scope&gt;provided&lt;/scope&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;jstl&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &amp;lt;!&amp;ndash; tomcat 的支持.&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;scope&gt;provided&lt;/scope&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;scope&gt;test&lt;/scope&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;exclusions&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;exclusion&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                    &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                    &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;/exclusion&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;/exclusions&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/dependency&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引入springBoot 内嵌的Tomcat对JSP的解析包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--servlet--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--jsp--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--jstl--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>target/lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">excludeArtifactIds</span>&gt;</span></span><br><span class="line">                                junit</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">excludeArtifactIds</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">overWriteSnapshots</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overWriteSnapshots</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="2-webapp-WEB-INF-index-jsp"><a href="#2-webapp-WEB-INF-index-jsp" class="headerlink" title="2.webapp\WEB-INF\index.jsp"></a>2.webapp\WEB-INF\index.jsp</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span><span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;&lt;title&gt;GOD&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--&lt;form action=<span class="string">&quot;#&quot;</span> th:action=<span class="string">&quot;@&#123;/initOrder&#125;&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">    输入编号：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;uid&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;查询&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;--&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">&quot;fileEdit&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;http://172.16.1.125:8081/web-apps/apps/api/documents/api.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 调用js创建预览对象</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">DocsAPI</span>.DocEditor(<span class="string">&quot;fileEdit&quot;</span>, <span class="comment">// 元素id</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;document&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;permissions&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;edit&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;fileType&quot;</span>: <span class="string">&quot;docx&quot;</span>, <span class="comment">// 展示文件的类型</span></span><br><span class="line">                <span class="string">&quot;title&quot;</span>: <span class="string">&quot;页面展示的文件名称&quot;</span>,</span><br><span class="line">                <span class="string">&quot;url&quot;</span>:<span class="string">&quot;http://172.16.1.1:8080/d&quot;</span> <span class="comment">//读取文件进行展示</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;documentType&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">            <span class="string">&quot;editorConfig&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;lang&quot;</span> : <span class="string">&quot;zh-CN&quot;</span>,</span><br><span class="line"><span class="comment">// 回调接口，用于编辑后实现保存的功能,(关闭页面5秒左右会触发)</span></span><br><span class="line">                <span class="string">&quot;callbackUrl&quot;</span>: <span class="string">&quot;http://172.16.1.1:8080/docx/save?path=D:/tiger/aaa1.doc&quot;</span> <span class="comment">//保存文件的接口?path=告诉保存接口需要覆盖的文件</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;height&quot;</span>: <span class="string">&quot;1300px&quot;</span>,</span><br><span class="line">            <span class="string">&quot;width&quot;</span>: <span class="string">&quot;100%&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="3-乱码解决"><a href="#3-乱码解决" class="headerlink" title="3.乱码解决"></a>3.乱码解决</h3><p>把从url中读取的流拷一份出来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">IOUtils.copy(is,bos);<span class="comment">//package org.apache.tomcat.util.http.fileupload;</span></span><br><span class="line"><span class="type">ByteArrayInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bos.toByteArray());</span><br></pre></td></tr></table></figure>

<p>这样stream.available()获取到的长度就是准确的，文档也就不会乱码损坏了</p>
<h2 id="6-代码地址"><a href="#6-代码地址" class="headerlink" title="6.代码地址"></a>6.代码地址</h2><p><a href="https://gitee.com/cardioid/onlyoffice.git">https://gitee.com/cardioid/onlyoffice.git</a></p>
]]></content>
      <categories>
        <category>onlyoffice</category>
      </categories>
      <tags>
        <tag>onlyoffice</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx的安装及配置</title>
    <url>/2021/07/20/Java/nginx%E7%9A%84%E4%BD%BF%E7%94%A8/nginx/</url>
    <content><![CDATA[<h2 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h2><ul>
<li>下载Nginx<code>1.10</code>的docker镜像：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull nginx:1.10</span><br></pre></td></tr></table></figure>

<ul>
<li>先运行一次容器（为了拷贝配置文件）：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 80:80 --name nginx \</span><br><span class="line">-v /mydata/nginx/html:/usr/share/nginx/html \</span><br><span class="line">-v /mydata/nginx/logs:/var/log/nginx  \</span><br><span class="line">-d nginx:1.10</span><br></pre></td></tr></table></figure>

<ul>
<li>将容器内的配置文件拷贝到指定目录：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker container <span class="built_in">cp</span> nginx:/etc/nginx /mydata/nginx/</span><br></pre></td></tr></table></figure>

<ul>
<li>修改文件名称：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> /mydata/nginx/nginx /mydata/nginx/conf</span><br></pre></td></tr></table></figure>

<ul>
<li>终止并删除容器：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop nginx</span><br><span class="line">docker <span class="built_in">rm</span> nginx</span><br></pre></td></tr></table></figure>

<ul>
<li>使用如下命令启动Nginx服务：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 80:80 --name nginx \</span><br><span class="line">-v /mydata/nginx/html:/usr/share/nginx/html \</span><br><span class="line">-v /mydata/nginx/logs:/var/log/nginx  \</span><br><span class="line">-v /mydata/nginx/conf:/etc/nginx \</span><br><span class="line">-d nginx:1.10</span><br></pre></td></tr></table></figure>

<p>解析到nginx</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       <span class="number">80</span>;         <span class="comment">#监听的端口</span></span><br><span class="line">        server_name  a.keep999.cn;    <span class="comment">#监听的URL</span></span><br><span class="line">        location / &#123;</span><br><span class="line">           proxy_redirect off;</span><br><span class="line">            proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">            proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">            proxy_pass http:<span class="comment">//47.108.59.73:8080;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>







<h3 id="1-Nginx-搭建域名环境一（反向代理配置）"><a href="#1-Nginx-搭建域名环境一（反向代理配置）" class="headerlink" title="1 Nginx 搭建域名环境一（反向代理配置）"></a>1 Nginx 搭建域名环境一（反向代理配置）</h3><p>什么是 反向代理?</p>
<p><img src="/nginx/image-20201029051037570.png" alt="image-20201029051037570"></p>
<p>vi nginx.conf 文件后在底部有该条语句：</p>
<ul>
<li>引入nginx下的 conf.d 下面的conf文件</li>
<li>那么我们开始在该目录下增加关于 谷粒商城的 nginx</li>
</ul>
<p><img src="/nginx/image-20201029045921936.png" alt="image-20201029045921936"></p>
<p>拷贝原先默认的 conf</p>
<p><img src="/nginx/image-20201029050207857.png" alt="image-20201029050207857"></p>
<p>修改</p>
<p><img src="/nginx/image-20201029050136324.png" alt="image-20201029050136324"></p>
<h3 id="4-2-Nginx-搭建域名环境二-（负载均衡到网关）"><a href="#4-2-Nginx-搭建域名环境二-（负载均衡到网关）" class="headerlink" title="4.2 Nginx 搭建域名环境二 （负载均衡到网关）"></a>4.2 Nginx 搭建域名环境二 （负载均衡到网关）</h3><p> 配置 UpStream</p>
<p><img src="/nginx/image-20201029050256216.png" alt="image-20201029050256216"></p>
<p>使用nginx实现负载平衡的最简单配置如下,官网地址：<a href="https://nginx.org/en/docs/http/load_balancing.html">https://nginx.org/en/docs/http/load_balancing.html</a></p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream myapp1 &#123;</span><br><span class="line">        server srv1.example.com;</span><br><span class="line">        server srv2.example.com;</span><br><span class="line">        server srv3.example.com;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://myapp1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时在 本机上 hosts 文件上那个配置 域名映射</p>
<p><img src="/../../%E7%AC%94%E8%AE%B0%20git/brain-map/docs/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/%E5%88%86%E5%B8%83%E5%BC%8F%E9%AB%98%E7%BA%A7%E7%AF%87/image/image-20201029050625740.png" alt="image-20201029050625740"></p>
<p>将请求转接给网关后，需要在网关配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">gulimall_host_route</span></span><br><span class="line">  <span class="attr">uri:</span> <span class="string">lb://gulimall-product</span></span><br><span class="line">  <span class="attr">predicates:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Host=**.gulimall.com</span></span><br></pre></td></tr></table></figure>

<p>最后放几张图方便理解哈</p>
<p><img src="/nginx/image-20201029050828421.png" alt="image-20201029050828421"></p>
<p><img src="/nginx/image-20201029050901546.png" alt="image-20201029050901546"></p>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>布隆过滤器</title>
    <url>/2021/10/19/Java/redis-%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
    <content><![CDATA[<h1 id="布隆过滤器的使用"><a href="#布隆过滤器的使用" class="headerlink" title="布隆过滤器的使用"></a>布隆过滤器的使用</h1><p>1.先说下背景，肯定遇到这种情况，<strong>判断元素在不在一个集合里面</strong>，如果，集合里面的元素非常大，这个判断过程是非常耗时的，而且集合占用空间也很大。</p>
<p>2.应用场景，网页黑名单，垃圾邮件过滤，电话黑名单，url去重，内容推荐等。</p>
<p>3.原理：布隆过滤器实际上就是一个<strong>字节数组</strong>，字节数组的值是0或1，在添加元素的时候，对值通过<strong>多个hash函数的计算</strong>，得到多个0,1然后在字节数组里面在相应的位置设置值。这样处理完所有的值之后，一个完整的布隆过滤器就完成了。之后就进入应用阶段了，判断值在不在布隆过滤器里面了，如果新输出的对象是之前处理放在布隆过滤器里面的，那就一定是存在，因为两次计算得到的hash值是一样的，肯定在，那对于新的对象了，这时就有可能会出现误杀了，新的值的hash值可能与老的值hash一样，于是布隆过滤器就认为，这个值是黑名单里的了，会造成误杀的结果。相当于就是宁愿杀错一k，不愿放过一个。</p>
<p>4.改进：通常误杀的话，可以通过两个方法去补救，<strong>再建立一个白名单</strong>，从布隆器本身去优化，降低误杀率。</p>
<p>5.再举例，头条给你推荐内容的时候，肯定要去查询一个的你的历史阅读记录，你看过的内容，一定是存在你的记录中的，新内容会有很小的机率认为是你之前看过的。</p>
<p><strong>现象</strong>：用户大量并发请求的数据(key)对应的数据在redis和数据库中都不存在，导致尽管数据不存在但还是每次都会进行查DB。</p>
<p>为什么key对应数据在缓存和db中不存在还会每次都进行DB查询呢？因为很多开发同学写的代码写的逻辑都是先从redis缓存中查一把，如果缓存中为空则从DB中查，如果DB中查到的数据不为空则设置到缓存并返回给接口。那么问题来了，如果从DB中查询的数据为空呢？？</p>
<p><strong>解决方案</strong>：</p>
<ul>
<li>从DB中查询出来数据为空，也进行空数据的缓存，避免DB数据为空也每次都进行数据库查询；</li>
<li>使用布隆过滤器，但是会增加一定的复杂度及存在一定的误判率；</li>
</ul>
<p>bloomfilter就类似于一个hash set，用于快速判某个元素是否存在于集合中，其典型的应用场景就是快速判断一个key是否存在于某容器，不存在就直接返回。布隆过滤器的关键就在于hash算法和容器大小，下面先来简单的实现下看看效果，我这里用guava实现的布隆过滤器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;  </span><br><span class="line">     &lt;dependency&gt;  </span><br><span class="line">         &lt;groupId&gt;com.google.guava&lt;/groupId&gt;  </span><br><span class="line">         &lt;artifactId&gt;guava&lt;/artifactId&gt;  </span><br><span class="line">         &lt;version&gt;<span class="number">23.0</span>&lt;/version&gt;  </span><br><span class="line">     &lt;/dependency&gt;  </span><br><span class="line">&lt;/dependencies&gt;  </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BloomFilterTest</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">capacity</span> <span class="operator">=</span> <span class="number">1000000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">key</span> <span class="operator">=</span> <span class="number">999998</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> BloomFilter&lt;Integer&gt; bloomFilter = BloomFilter.create(Funnels.integerFunnel(), capacity);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; capacity; i++) &#123;</span><br><span class="line">            bloomFilter.put(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*返回计算机最精确的时间，单位微妙*/</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (bloomFilter.mightContain(key)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;成功过滤到&quot;</span> + key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">        System.out.println(<span class="string">&quot;布隆过滤器消耗时间:&quot;</span> + (end - start));</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1020000</span> i &lt; <span class="number">1030000</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//这一万个错误数据</span></span><br><span class="line">            <span class="keyword">if</span> (bloomFilter.mightContain(i)) &#123;</span><br><span class="line">                sum = sum + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;错判率为:&quot;</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>1秒 s&#x3D; 1000 毫秒 ms</p>
<p>1毫秒 ms &#x3D; 1,000 微秒 μs</p>
<p> 1微秒 μs &#x3D; 1,000 纳秒 ns</p>
<p>结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">成功过滤到999998</span><br><span class="line">布隆过滤器消耗时间:215518</span><br><span class="line">错判率为:318</span><br></pre></td></tr></table></figure>







<p>可以看到，100w个数据中只消耗了约0.2毫秒就匹配到了key，速度足够快。然后模拟了1w个不存在于布隆过滤器中的key，匹配错误率为318&#x2F;10000，也就是说，出错率大概为3%，跟踪下BloomFilter的源码发现默认的容错率就是0.03：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; BloomFilter&lt;T&gt; <span class="title function_">create</span><span class="params">(Funnel&lt;T&gt; funnel, <span class="type">int</span> expectedInsertions <span class="comment">/* n */</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> create(funnel, expectedInsertions, <span class="number">0.03</span>); <span class="comment">// FYI, for 3%, we always get 5 hash functions</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可调用BloomFilter的这个方法显式的指定误判率：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> BloomFilter&lt;Integer&gt; bloomFilter = BloomFilter.create(Funnels.integerFunnel(), capacity,<span class="number">0.01</span>);</span><br></pre></td></tr></table></figure>

<p>我们断点跟踪下，误判率为0.02和默认的0.03时候的区别:</p>
<p><img src="/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/20180601221013466" alt="img"></p>
<p><img src="/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/20180601221026433" alt="img"></p>
<p>对比两个出错率可以发现，误判率为0.02时数组大小为8142363，0.03时为7298440，误判率降低了0.01，BloomFilter维护的数组大小也减少了843923，可见BloomFilter默认的误判率0.03是设计者权衡系统性能后得出的值。要注意的是，布隆过滤器不支持删除操作。用在这边解决缓存穿透问题就是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getByKey</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="comment">// 通过key获取value</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> redisService.get(key);</span><br><span class="line">    <span class="keyword">if</span> (StringUtil.isEmpty(value)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (bloomFilter.mightContain(key)) &#123;</span><br><span class="line">            value = userService.getById(key);</span><br><span class="line">            redisService.set(key, value);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>布隆过滤器</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat的安装及配置</title>
    <url>/2022/01/11/Java/tomcat/Tomcat/</url>
    <content><![CDATA[<h1 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h1><h2 id="下载、安装"><a href="#下载、安装" class="headerlink" title="下载、安装"></a>下载、安装</h2><h3 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h3><p>　　进官网下载 ： <a href="https://tomcat.apache.org/">Apache Tomcat® - Welcome!</a><br>　　选择自己适合的版本。在这里演示的是下载 Tomcat 7（解压安装版）。</p>
<p><img src="/Tomcat/1688578-20190715201044938-457753953.png" alt="img"></p>
<h3 id="2、解压、启动tomcat"><a href="#2、解压、启动tomcat" class="headerlink" title="2、解压、启动tomcat"></a>2、解压、启动tomcat</h3><p>　　解压到指定目录。<br>　　tomcat7之后的版本一般不用配置环境变量。</p>
<p>配置环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">若进不去网址，则需要手动配置环境变量。</span><br><span class="line">    CATALINA_HOME：Tomcat的安装路径。 比如： C:\Users\Downloads\apache-tomcat-7.0.94</span><br><span class="line">    PATH：一些命令所在的路径。 比如: C:\Users\Downloads\apache-tomcat-7.0.94\bin</span><br></pre></td></tr></table></figure>





<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">找到bin目录下的 startup.bat 文件。</span><br><span class="line">使用某软件打开后（比如：Notepad++），</span><br><span class="line">如果存在  if exist &quot;%CATALINA_HOME%\bin\catalina.bat&quot; goto okHome  ，</span><br><span class="line">则表示 bin 目录下存在 catalina.bat文件即可访问tomcat页面（启动服务器后），</span><br><span class="line">此时不需要配置环境变量。</span><br><span class="line"></span><br><span class="line">启动 tomcat 服务后（可直接双击startup.bat文件）， 在浏览器中输入 http://localhost:8080/， 若能进入页面，则成功。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">启动tomcat:</span><br><span class="line">    方法1：</span><br><span class="line">        直接双击打开bin目录下的startup.bat文件。</span><br><span class="line">        </span><br><span class="line">    方法2：</span><br><span class="line">        使用命令行启动，首先进入tomcat的bin目录，然后输入startup即可启动。</span><br><span class="line">        比如： </span><br><span class="line">            通过命令行进入bin目录</span><br><span class="line">                cd C:\Users\Downloads\apache-tomcat-7.0.94\bin</span><br><span class="line">            启动tomcat</span><br><span class="line">                startup</span><br><span class="line">            关闭tomcat </span><br><span class="line">                shutdown</span><br></pre></td></tr></table></figure>



<p>成功启动后，访问网站后显示如下：</p>
<p><img src="/Tomcat/1688578-20190715201251407-518918367.png" alt="img"></p>
<h3 id="3、tomcat日志文件乱码问题"><a href="#3、tomcat日志文件乱码问题" class="headerlink" title="3、tomcat日志文件乱码问题"></a>3、tomcat日志文件乱码问题</h3><p>　　找到安装目录下logging.properties文件的位置。<br>　　比如 F:\tomcat\apache-tomcat-7.0.94\conf\logging.properties<br>　　将其中关于utf-8 的信息删除即可。</p>
<p><img src="/Tomcat/1688578-20190715201353281-68318591.png" alt="img"></p>
<p><img src="/Tomcat/1688578-20190715201427672-549961247.png" alt="img"></p>
<h2 id="IntelliJ-IDEA配置Tomcat"><a href="#IntelliJ-IDEA配置Tomcat" class="headerlink" title="IntelliJ IDEA配置Tomcat"></a>IntelliJ IDEA配置Tomcat</h2><h3 id="1、新建一个JavaWeb项目"><a href="#1、新建一个JavaWeb项目" class="headerlink" title="1、新建一个JavaWeb项目"></a>1、新建一个JavaWeb项目</h3><p><img src="/Tomcat/1688578-20190715202254141-1870003486.png" alt="img"></p>
<h3 id="2、配置Tomcat"><a href="#2、配置Tomcat" class="headerlink" title="2、配置Tomcat"></a>2、配置Tomcat</h3><p>选择Run –&gt; Edit Configurations…</p>
<p><img src="/Tomcat/1688578-20190715202348747-104151589.png" alt="img"></p>
<p>选择 Tomcat Server –&gt; Local， 并配置相关的信息。</p>
<p><img src="/Tomcat/1688578-20190715202436844-1406328321.png" alt="img"></p>
<p>在Deployment下，选择需要放入tomcat容器的项目。</p>
<p><img src="/Tomcat/1688578-20190715202519427-1863309457.png" alt="img"></p>
<h3 id="3、远程-Debug-Tomcat-代码"><a href="#3、远程-Debug-Tomcat-代码" class="headerlink" title="3、远程 Debug Tomcat 代码"></a>3、远程 Debug Tomcat 代码</h3><p>　　选择Run –&gt; Edit Configurations –&gt; Remote</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">【配置 JVM 参数】</span><br><span class="line">    -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005</span><br><span class="line"></span><br><span class="line">注：</span><br><span class="line">    用于 debug 的代码必须与远程部署的代码完全一致，不能发生任何的修改，否则打上的断点可能无法命中。</span><br></pre></td></tr></table></figure>

<p><img src="/Tomcat/1688578-20211218132748403-828342498.png" alt="img"></p>
<h2 id="tomcat启动失败情况"><a href="#tomcat启动失败情况" class="headerlink" title="tomcat启动失败情况"></a>tomcat启动失败情况</h2><h3 id="1、若是8080报错。"><a href="#1、若是8080报错。" class="headerlink" title="1、若是8080报错。"></a>1、若是8080报错。</h3><p>先查询是哪个进程占用了，若能直接删除最好，不行的话，再百度。</p>
<p>　　windows查询端口号以及进程：<br>　　　　WIN + R 敲cmd打开命令行。<br>　　　　　　输入：netstat -aon|findstr 端口号<br>　　　　　　输出的是端口号以及其PID。</p>
<p>　　　　　　输入：tasklist | findstr PID<br>　　　　　　输出的是占用端口号的进程。</p>
<p>　　　　　　输入：taskkill &#x2F;f &#x2F;t &#x2F;im 进程名 （用于结束进程）</p>
<p>　　若是oracle软件导致的，可以根据以下步骤进行修改。<br>　　　　oracle 10g修改默认端口号（8080-&gt;&gt;8088）<br>　　　　windows下：<br>　　　　　　WIN + R 敲cmd打开命令行。<br>　　　　　　输入：sqlplus &#x2F; as sysdba；<br>　　　　然后会提示输入数据库的用户名+口令（根据自己的情况输入）。<br>　　　　　　输入（用户名）：SYSTEM<br>　　　　　　输入（口令）：SYSTEM<br>　　　　连接数据库成功后：<br>　　　　　　输入：exec dbms_xdb.sethttpport(8088)<br>　　　　此时就将默认端口号（8080）改为了8088.</p>
<h3 id="2、ClassFormatException"><a href="#2、ClassFormatException" class="headerlink" title="2、ClassFormatException"></a>2、ClassFormatException</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">【启动tomcat报错：】</span><br><span class="line">org.apache.tomcat.util.bcel.classfile.ClassFormatException: Invalid byte tag in constant pool: 18</span><br><span class="line"></span><br><span class="line">【原因一：可能是 metadata-complete=&quot;true&quot;未设置。】</span><br><span class="line"></span><br><span class="line">&lt;web-app version=&quot;3.0&quot; xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot; metadata-complete=&quot;true&quot;&gt;</span><br><span class="line"></span><br><span class="line">  metadata-complete=&quot;true&quot; 这句话的意思是设置tomcat启动后不要自动扫描注解和网络碎片。【原因二：当前 tomcat 版本与 JDK 不兼容】比如 maven 工程且通过命令  tomcat:run -Dmaven.tomcat.port=9000 去启动时，可能默认选择的是 tomcat6 的版本。解决办法是添加一个 tomcat7-maven-plugin 插件，并通过命令 tomcat7:run -Dmaven.tomcat.port=9000 去启动。</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">  &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;2.2&lt;/version&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Tomcat</category>
      </categories>
      <tags>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring循环依赖解决</title>
    <url>/2021/09/21/Java/spring%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E7%9A%84%E8%A7%A3%E5%86%B3/spring%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E7%9A%84%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<h1 id="Spring源码初探-IOC-4-Bean的初始化-循环依赖的解决"><a href="#Spring源码初探-IOC-4-Bean的初始化-循环依赖的解决" class="headerlink" title="Spring源码初探-IOC(4)-Bean的初始化-循环依赖的解决"></a>Spring源码初探-IOC(4)-Bean的初始化-循环依赖的解决</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在实际工作中，经常由于设计不佳或者各种因素，导致类之间相互依赖。这些类可能单独使用时不会出问题，但是在使用Spring进行管理的时候可能就会抛出BeanCurrentlyInCreationException等异常 。当抛出这种异常时表示Spring解决不了该循环依赖，本文将简要说明Spring对于循环依赖的解决方法。</p>
<h2 id="循环依赖的产生和解决的前提"><a href="#循环依赖的产生和解决的前提" class="headerlink" title="循环依赖的产生和解决的前提"></a>循环依赖的产生和解决的前提</h2><p>循环依赖的产生可能有很多种情况，例如：</p>
<ul>
<li>A的构造方法中依赖了B的实例对象，同时B的构造方法中依赖了A的实例对象</li>
<li>A的构造方法中依赖了B的实例对象，同时B的某个field或者setter需要A的实例对象，以及反之</li>
<li>A的某个field或者setter依赖了B的实例对象，同时B的某个field或者setter依赖了A的实例对象，以及反之</li>
</ul>
<p>当然，Spring对于循环依赖的解决不是无条件的，首先前提条件是针对scope单例并且没有显式指明不需要解决循环依赖的对象，而且要求该对象没有被代理过。同时Spring解决循环依赖也不是万能，以上三种情况只能解决两种，第一种在构造方法中相互依赖的情况Spring也无力回天。结论先给在这，下面来看看Spring的解决方法，知道了解决方案就能明白为啥第一种情况无法解决了。</p>
<h2 id="Spring对于循环依赖的解决"><a href="#Spring对于循环依赖的解决" class="headerlink" title="Spring对于循环依赖的解决"></a>Spring对于循环依赖的解决</h2><p>Spring循环依赖的理论依据其实是Java基于引用传递，当我们获取到对象的引用时，对象的field或者或属性是可以延后设置的。<br>Spring单例对象的初始化其实可以分为三步：</p>
<ul>
<li>createBeanInstance， 实例化，实际上就是调用对应的构造方法构造对象，此时只是调用了构造方法，spring xml中指定的property并没有进行populate</li>
<li>populateBean，填充属性，这步对spring xml中指定的property进行populate (填充)</li>
<li>initializeBean，调用spring xml中指定的init方法，或者AfterPropertiesSet方法<br>会发生循环依赖的步骤集中在第一步和第二步。</li>
</ul>
<h3 id="三级缓存"><a href="#三级缓存" class="headerlink" title="三级缓存"></a>三级缓存</h3><p>对于单例对象来说，在Spring的整个容器的生命周期内，有且只存在一个对象，很容易想到这个对象应该存在Cache中，Spring大量运用了Cache的手段，在循环依赖问题的解决过程中甚至使用了“三级缓存”。</p>
<p>“三级缓存”主要是指</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="language-markdown">/** Cache of</span> singleton objects: bean <span class="language-markdown">name --&gt; bean instance <span class="emphasis">*/</span></span></span></span><br><span class="line">private <span class="keyword">final</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; singletonObjects = <span class="keyword">new</span> ConcurrentHashMap&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt;(<span class="number">256</span>);</span><br><span class="line"><span class="comment"><span class="language-markdown"><span class="emphasis">/*</span>* Cache of</span> singleton factories: bean <span class="language-markdown">name --&gt; ObjectFactory <span class="emphasis">*/</span></span></span></span><br><span class="line">private <span class="keyword">final</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, ObjectFactory&lt;?&gt;&gt; singletonFactories = <span class="keyword">new</span> HashMap&lt;<span class="built_in">String</span>, ObjectFactory&lt;?&gt;&gt;(<span class="number">16</span>);</span><br><span class="line"><span class="comment"><span class="language-markdown"><span class="emphasis">/*</span>* Cache of</span> early singleton objects: <span class="language-markdown">bean name --&gt; bean instance <span class="emphasis">*/</span></span></span></span><br><span class="line">private <span class="keyword">final</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; earlySingletonObjects = <span class="keyword">new</span> HashMap&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt;(<span class="number">16</span>);</span><br></pre></td></tr></table></figure>

<p>从字面意思来说：</p>
<p>singletonObjects指单例对象的cache，</p>
<p>singletonFactories指单例对象工厂的cache，</p>
<p>earlySingletonObjects指提前曝光的单例对象的cache。</p>
<p>以上三个cache构成了三级缓存，Spring就用这三级缓存巧妙的解决了循环依赖问题。</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>回想上篇文章中关于Bean创建的过程，首先Spring会尝试从缓存中获取，这个缓存就是指singletonObjects，主要调用的方法是：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object getSingleton(String beanName, boolean allowEarlyReference) &#123;</span><br><span class="line">   Object singletonObject = <span class="keyword">this</span>.singletonObjects.<span class="keyword">get</span>(beanName);</span><br><span class="line">   <span class="keyword">if</span> (singletonObject == <span class="literal">null</span> &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">      synchronized (<span class="keyword">this</span>.singletonObjects) &#123;</span><br><span class="line">         singletonObject = <span class="keyword">this</span>.earlySingletonObjects.<span class="keyword">get</span>(beanName);</span><br><span class="line">         <span class="keyword">if</span> (singletonObject == <span class="literal">null</span> &amp;&amp; allowEarlyReference) &#123;</span><br><span class="line">            ObjectFactory&lt;?&gt; singletonFactory = <span class="keyword">this</span>.singletonFactories.<span class="keyword">get</span>(beanName);</span><br><span class="line">            <span class="keyword">if</span> (singletonFactory != <span class="literal">null</span>) &#123;</span><br><span class="line">               singletonObject = singletonFactory.getObject();</span><br><span class="line">               <span class="keyword">this</span>.earlySingletonObjects.put(beanName, singletonObject);</span><br><span class="line">               <span class="keyword">this</span>.singletonFactories.remove(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> (singletonObject != NULL_OBJECT ? singletonObject : <span class="literal">null</span>);&#125;</span><br></pre></td></tr></table></figure>

<p>首先解释两个参数：</p>
<ul>
<li>isSingletonCurrentlyInCreation 判断对应的单例对象是否在创建中，当单例对象没有被初始化完全(例如A定义的构造函数依赖了B对象，得先去创建B对象，或者在populatebean过程中依赖了B对象，得先去创建B对象，此时A处于创建中)</li>
<li>allowEarlyReference 是否允许从singletonFactories中通过getObject拿到对象</li>
</ul>
<p>分析getSingleton的整个过程，Spring首先从singletonObjects（一级缓存）中尝试获取，如果获取不到并且对象在创建中，则尝试从earlySingletonObjects(二级缓存)中获取，如果还是获取不到并且允许从singletonFactories通过getObject获取，则通过singletonFactory.getObject()(三级缓存)获取。如果获取到了则</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">this<span class="selector-class">.earlySingletonObjects</span><span class="selector-class">.put</span>(beanName, singletonObject);</span><br><span class="line">this<span class="selector-class">.singletonFactories</span><span class="selector-class">.remove</span>(beanName);</span><br></pre></td></tr></table></figure>

<p>则移除对应的singletonFactory,将singletonObject放入到earlySingletonObjects，其实就是将三级缓存提升到二级缓存中！</p>
<p>Spring解决循环依赖的诀窍就在于singletonFactories这个cache，这个cache中存的是类型为ObjectFactory，其定义如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ObjectFactory</span>&lt;T&gt; &#123;</span><br><span class="line">    T <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> BeansException;&#125;</span><br></pre></td></tr></table></figure>

<p>在bean创建过程中，有两处比较重要的匿名内部类实现了该接口。一处是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">ObjectFactory</span>&lt;Object&gt;() &#123;</span><br><span class="line">   <span class="meta">@Override</span>   <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">      &#125;      <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">         destroySingleton(beanName);</span><br><span class="line">         <span class="keyword">throw</span> ex;</span><br><span class="line">      &#125;   &#125;</span><br></pre></td></tr></table></figure>

<p>在上文已经提到，Spring利用其创建bean（这样做真的很不明确呀…）</p>
<p>另一处就是:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">addSingletonFactory(beanName, <span class="keyword">new</span> <span class="title class_">ObjectFactory</span>&lt;Object&gt;() &#123;</span><br><span class="line">   <span class="meta">@Override</span>   <span class="keyword">public</span> Object <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">      <span class="keyword">return</span> getEarlyBeanReference(beanName, mbd, bean);</span><br><span class="line">   &#125;&#125;);</span><br></pre></td></tr></table></figure>

<p>此处就是解决循环依赖的关键，这段代码发生在createBeanInstance之后，也就是说单例对象此时已经被创建出来的。这个对象已经被生产出来了，虽然还不完美（还没有进行初始化的第二步和第三步），但是已经能被人认出来了（根据对象引用能定位到堆中的对象），所以Spring此时将这个对象提前曝光出来让大家认识，让大家使用。</p>
<p>这样做有什么好处呢？让我们来分析一下“A的某个field或者setter依赖了B的实例对象，同时B的某个field或者setter依赖了A的实例对象”这种循环依赖的情况。A首先完成了初始化的第一步，并且将自己提前曝光到singletonFactories中，此时进行初始化的第二步，发现自己依赖对象B，此时就尝试去get(B)，发现B还没有被create，所以走create流程，B在初始化第一步的时候发现自己依赖了对象A，于是尝试get(A)，尝试一级缓存singletonObjects(肯定没有，因为A还没初始化完全)，尝试二级缓存earlySingletonObjects（也没有），尝试三级缓存singletonFactories，由于A通过ObjectFactory将自己提前曝光了，所以B能够通过ObjectFactory.getObject拿到A对象(虽然A还没有初始化完全，但是总比没有好呀)，B拿到A对象后顺利完成了初始化阶段1、2、3，完全初始化之后将自己放入到一级缓存singletonObjects中。此时返回A中，A此时能拿到B的对象顺利完成自己的初始化阶段2、3，最终A也完成了初始化，长大成人，进去了一级缓存singletonObjects中，而且更加幸运的是，由于B拿到了A的对象引用，所以B现在hold住的A对象也蜕变完美了！一切都是这么神奇！！</p>
<p>知道了这个原理时候，肯定就知道为啥Spring不能解决“A的构造方法中依赖了B的实例对象，同时B的构造方法中依赖了A的实例对象”这类问题了！</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Spring通过三级缓存加上“提前曝光”机制，配合Java的对象引用原理，比较完美地解决了某些情况下的循环依赖问题！</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>typora的使用</title>
    <url>/2020/09/07/Java/typora%E8%AF%AD%E6%B3%95/typora/</url>
    <content><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>Ctrl + 1&#x2F;2&#x2F;3&#x2F;4&#x2F;5&#x2F;6</p>
<h2 id="插入表格"><a href="#插入表格" class="headerlink" title="插入表格"></a>插入表格</h2><p>ctrl+t</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="题注"><a href="#题注" class="headerlink" title="题注"></a>题注</h2><blockquote>
<p>题注</p>
</blockquote>
<h2 id="加一道横线"><a href="#加一道横线" class="headerlink" title="加一道横线"></a>加一道横线</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">------</span><br></pre></td></tr></table></figure>



<hr>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">​```java 回车</span><br></pre></td></tr></table></figure>





<h2 id="切换到源代码模式"><a href="#切换到源代码模式" class="headerlink" title="切换到源代码模式"></a>切换到源代码模式</h2><p>CTRL + &#x2F;</p>
]]></content>
      <categories>
        <category>typora</category>
      </categories>
      <tags>
        <tag>typora</tag>
      </tags>
  </entry>
  <entry>
    <title>各种注解的使用整理</title>
    <url>/2020/03/09/Java/%E5%90%84%E7%A7%8D%E6%B3%A8%E8%A7%A3/%E5%90%84%E7%A7%8D%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="JsonInclude"><a href="#JsonInclude" class="headerlink" title="@JsonInclude"></a>@JsonInclude</h2><blockquote>
<p>返回数据是否包含这个字段</p>
</blockquote>
<p>ALWAYS 总是包含这个字段</p>
<p>NON_NULL  不为空时</p>
<p>NON_EMPTY 不为空的时候返回带</p>
<p><img src="/%E5%90%84%E7%A7%8D%E6%B3%A8%E8%A7%A3/1640452244337-1642757605194.png" alt="1640452244337"></p>
<p><img src="/%E5%90%84%E7%A7%8D%E6%B3%A8%E8%A7%A3/1640452189077.png" alt="1640452189077"></p>
<h2 id="JsonFormat"><a href="#JsonFormat" class="headerlink" title="@JsonFormat"></a>@JsonFormat</h2><p><strong>@JsonFormat后台到前台的时间格式的转换<br>@DataFormat前后到后台的时间格式的转换</strong></p>
<p><strong>1.@JsonFormat(pattern&#x3D;”yyyy-MM-dd HH:mm:ss”,timezone &#x3D; “GMT+8”)</strong><br>pattern:需要转换的时间日期的格式<br>timezone：是时间设置为东八区</p>
<p><strong>2.@DateTimeFormat(pattern &#x3D; “yyyy-MM-dd HH:mm:ss”)</strong><br>pattern:需要转换的时间日期的格式</p>
<p>3.例子<br>&#x2F;<em>俩个注解可以同时使用</em>&#x2F;<br>@ApiModelProperty(“创建时间”) </p>
<p>@JsonFormat(pattern&#x3D;”yyyy-MM-dd HH:mm:ss”,timezone &#x3D; “GMT+8”) </p>
<p>@DateTimeFormat(pattern &#x3D; “yyyy-MM-dd HH:mm:ss”) private Date createdDate ;</p>
<p><strong>举例：以下ClinicalTrialSettleParamVO 作为swagger入参，日期类型的列，可同时接收时间戳和时间类型的数据</strong></p>
<p><strong>若不加任何注解，默认接收时间戳,返回json也是long类型的时间戳</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClinicalTrialSettleParamVO</span> &#123;</span><br><span class="line">    <span class="meta">@Schema(description = &quot;项目id&quot;, required = true, example = &quot;LCSY2019091000000001&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String projectId;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot; ,timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;起始时间&quot;, required = true, example = &quot;2019-11-01 00:00:00&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date startTimestamp;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot; ,timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">    <span class="meta">@Schema(description = &quot;结束时间&quot;, required = true, example = &quot;2019-11-01 23:59:59&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date endTimestamp;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>注解</category>
      </categories>
      <tags>
        <tag>注解</tag>
      </tags>
  </entry>
  <entry>
    <title>异步编排</title>
    <url>/2022/03/28/Java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/CompletableFuture%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92/</url>
    <content><![CDATA[<h1 id="异步编排"><a href="#异步编排" class="headerlink" title="异步编排"></a>异步编排</h1><p>所谓异步 就是new几个其他线程 与主线程同时做任务 分活给其他人一起干</p>
<p>（）-{</p>
<p>​	} 大括号以内就是要干的活</p>
<p>业务场景：</p>
<p>查询商品详情页逻辑比较复杂，有些数据还需要远程调用，必然需要花费更多的时间</p>
<p>基本信息<br>图片信息<br>促销信息<br>销售属性<br>规格参数</p>
<p>等</p>
<p><img src="/CompletableFuture%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92/image-20201105163535757.png" alt="image-20201105163535757"></p>
<p>那么，用户需要5.5s后才能看到商品相详情页的内容，很显然是不能接受的</p>
<p>如果有多个线程同时完成这 6 步操作，也许只需要 1.5s 即可完成响应</p>
<h2 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h2><p>第一种</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">//员工数量</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="comment">//创建计数器</span></span><br><span class="line">    <span class="comment">//构造参数传入的数量值代表的是latch.countDown()调用的次数</span></span><br><span class="line">    <span class="type">CountDownLatch</span> <span class="variable">latch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(count);</span><br><span class="line">    System.out.println(<span class="string">&quot;核心线程数&quot;</span>+count);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建线程池，可以通过以下方式创建</span></span><br><span class="line">    <span class="comment">//ThreadPoolExecutor threadPool = new ThreadPoolExecutor(1,1,60,TimeUnit.SECONDS,new LinkedBlockingQueue&lt;Runnable&gt;(count));</span></span><br><span class="line">    <span class="comment">//ExecutorService threadPool =  Executors.newFixedThreadPool(count);</span></span><br><span class="line">    <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> ThreadPoolFactory.createFixedThreadPool(<span class="string">&quot;集合&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;公司发送通知，每一位员工在周六早上8点到公司大门口集合&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        threadPool.execute(<span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;员工：&quot;</span> + Thread.currentThread() + <span class="string">&quot;，正在前往公司大门口集合...&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;员工：&quot;</span> + Thread.currentThread() + <span class="string">&quot;，已到达。&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//当前计算工作已结束，计数器减一</span></span><br><span class="line">                latch.countDown();</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">0</span>; i1 &lt; <span class="number">100000</span>; i1++) &#123;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;员工：&quot;</span> + Thread.currentThread() + <span class="string">&quot;，吃饭、喝水、拍照。&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//阻塞当前线程，直到所有员工到达公司大门口之后才执行</span></span><br><span class="line">    latch.await();</span><br><span class="line">    <span class="comment">// 使当前线程在锁存器倒计数至零之前一直等待，除非线程被中断或超出了指定的等待时间。</span></span><br><span class="line">    <span class="comment">//latch.await(long timeout, TimeUnit unit)</span></span><br><span class="line">    System.out.println(<span class="string">&quot;所有员工已经到达公司大门口，大巴车发动，前往活动目的地。&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最后关闭线程池，但执行以前提交的任务，不接受新任务</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭线程池，停止所有正在执行的活动任务，暂停处理正在等待的任务，并返回等待执行的任务列表。</span></span><br><span class="line">    <span class="comment">//threadPool.shutdownNow();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h2 id="CompletableFuture"><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h2><h3 id="创建异步对象"><a href="#创建异步对象" class="headerlink" title="创建异步对象"></a>创建异步对象</h3><p>CompletableFuture 提供了四个静态方法来创建一个异步操作</p>
<p><img src="/CompletableFuture%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92/image-20201105185420349.png" alt="image-20201105185420349"></p>
<p>1、<strong>runXxx 都是没有返回结果的，supplyXxxx都是可以获取返回结果的</strong></p>
<p>2、可以传入<strong>自定义的线程池</strong>，否则就是用默认的线程池</p>
<p>3、根据方法的返回类型来判断是否该方法<strong>是否有返回类型</strong></p>
<p>代码实现：</p>
<h5 id="无返回-runAsync"><a href="#无返回-runAsync" class="headerlink" title="无返回   runAsync"></a><strong>无返回</strong>   runAsync</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CompletableFuture&lt;Void&gt; completableFuture = CompletableFuture.runAsync(() -&gt; 		&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;当前线程：&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">         <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">2</span>;</span><br><span class="line">         System.out.println(<span class="string">&quot;运行结果：&quot;</span> + i);</span><br><span class="line">     &#125;, executorService);</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h5 id="有返回-supplyAsync"><a href="#有返回-supplyAsync" class="headerlink" title="有返回   supplyAsync"></a><strong>有返回</strong>   supplyAsync</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前线程：&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">2</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;运行结果：&quot;</span> + i);</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;, executorService);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> future.get();</span><br></pre></td></tr></table></figure>





<h3 id="计算完成时"><a href="#计算完成时" class="headerlink" title="计算完成时"></a>计算完成时</h3><h4 id="回调方法whenComplete"><a href="#回调方法whenComplete" class="headerlink" title="回调方法whenComplete"></a>回调方法whenComplete</h4><p><img src="/CompletableFuture%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92/image-20201105185821263.png" alt="image-20201105185821263"></p>
<p>，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;当前线程：&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;运行结果：&quot;</span> + i);</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;, executor).whenComplete((result,exception) -&gt;&#123;</span><br><span class="line">    <span class="comment">// 虽然能得到异常信息，但是没法修改返回的数据</span></span><br><span class="line">    System.out.println(<span class="string">&quot;异步任务成功完成了...结果是：&quot;</span> +result + <span class="string">&quot;异常是：&quot;</span> + exception);</span><br><span class="line">&#125;).exceptionally(throwable -&gt; &#123;</span><br><span class="line">    <span class="comment">// 可以感知到异常，同时返回默认值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<blockquote>
<p>whenComplete 可以处理正常和异常的计算结果</p>
</blockquote>
<blockquote>
<p>exceptionally 处理异常情况</p>
</blockquote>
<p><strong>whenComplete 和 whenCompleteAsync 的区别</strong></p>
<p>​		whenComplete ：<strong>是执行当前任务的线程继续执行 whencomplete 的任务</strong></p>
<p>​		whenCompleteAsync： 是执行把 whenCompleteAsync 这个任务继续<strong>提交给线程池</strong>来进行执行</p>
<p>方法<strong>不以 Async 结尾</strong>，意味着 Action 使用<strong>相同的线程执行</strong>，而 Async结尾 <strong>可能会使用其他线程</strong>执行（如果是使用相同的线程池，也可能会被同一个线程选中执行）</p>
<h4 id="处理异常-方法-handle"><a href="#处理异常-方法-handle" class="headerlink" title="处理异常 方法  handle"></a>处理异常 方法  handle</h4><p><img src="/CompletableFuture%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92/image-20201105194503175.png" alt="image-20201105194503175"></p>
<p>和 complete 一样，可以<strong>对结果做最后的处理（可处理异常）</strong>，可改变返回值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;当前线程：&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">2</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;运行结果：&quot;</span> + i);</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;, executor).handle((res,thr) -&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span> (res != <span class="literal">null</span> ) &#123;</span><br><span class="line">        <span class="keyword">return</span> res * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (thr != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="串行方法thenxxxAsync"><a href="#串行方法thenxxxAsync" class="headerlink" title="串行方法thenxxxAsync"></a>串行方法thenxxxAsync</h4><p><img src="/CompletableFuture%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92/image-20201105195632819.png" alt="image-20201105195632819"></p>
<p>thenApply 方法：<strong>当一个线程依赖另一个线程时，获取上一个任务返回的结果，并返回当前任物的返回值</strong></p>
<p>thenAccept方法：<strong>消费处理结果，接受任务处理结果，并消费处理，无返回结果</strong></p>
<p>thenRun 方法：<strong>只要上面任务执行完成，就开始执行 thenRun ,只是处理完任务后，执行 thenRun的后续操作</strong></p>
<p>带有 <strong>Async 默认是异步执行</strong>的，同之前，</p>
<p>以上都要前置任务完成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 线程串行化，</span></span><br><span class="line"><span class="comment">      * 1、thenRun:不能获取到上一步的执行结果，无返回值</span></span><br><span class="line"><span class="comment">      * .thenRunAsync(() -&gt;&#123;</span></span><br><span class="line"><span class="comment">      *             System.out.println(&quot;任务2启动了....&quot;);</span></span><br><span class="line"><span class="comment">      *         &#125;,executor);</span></span><br><span class="line"><span class="comment">      * 2、能接受上一步结果，但是无返回值 thenAcceptAsync</span></span><br><span class="line"><span class="comment">      * 3、thenApplyAsync 能收受上一步结果，有返回值</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     CompletableFuture&lt;String&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;当前线程：&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">         <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">2</span>;</span><br><span class="line">         System.out.println(<span class="string">&quot;运行结果：&quot;</span> + i);</span><br><span class="line">         <span class="keyword">return</span> i;</span><br><span class="line">     &#125;, executor).thenApplyAsync(res -&gt; &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;任务2启动了...&quot;</span> + res);</span><br><span class="line">         <span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + res;</span><br><span class="line">     &#125;, executor);</span><br><span class="line">     <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> future.get();</span><br><span class="line"></span><br><span class="line">     System.out.println(<span class="string">&quot;main....stop.....&quot;</span> + s);</span><br></pre></td></tr></table></figure>

<h3 id="任务组合"><a href="#任务组合" class="headerlink" title="任务组合"></a>任务组合</h3><h4 id="都要完成"><a href="#都要完成" class="headerlink" title="都要完成"></a>都要完成</h4><p><img src="/CompletableFuture%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92/image-20210102044028142.png" alt="image-20210102044028142"></p>
<p><img src="/CompletableFuture%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92/image-20210102044044914.png" alt="image-20210102044044914"></p>
<p>两个任务必须都完成，触发该任务</p>
<p>thenCombine: 组合两个 future，获取两个 future的返回结果，并返回当前任务的返回值</p>
<p>thenAccpetBoth: 组合两个 future，获取两个 future 任务的返回结果，然后处理任务，没有返回值</p>
<p>runAfterBoth:组合 两个 future，不需要获取 future 的结果，只需要两个 future处理完成任务后，处理该任务，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 两个都完成</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        CompletableFuture&lt;Integer&gt; future01 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;任务1当前线程：&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">4</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;任务1结束：&quot;</span> + i);</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;, executor);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;String&gt; future02 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;任务2当前线程：&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">            System.out.println(<span class="string">&quot;任务2结束：&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        &#125;, executor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// f1 和 f2 执行完成后在执行这个</span></span><br><span class="line"><span class="comment">//        future01.runAfterBothAsync(future02,() -&gt; &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;任务3开始&quot;);</span></span><br><span class="line"><span class="comment">//        &#125;,executor);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回f1 和 f2 的运行结果</span></span><br><span class="line"><span class="comment">//        future01.thenAcceptBothAsync(future02,(f1,f2) -&gt; &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;任务3开始....之前的结果:&quot; + f1 + &quot;==&gt;&quot; + f2);</span></span><br><span class="line"><span class="comment">//        &#125;,executor);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// f1 和 f2 单独定义返回结果</span></span><br><span class="line">        CompletableFuture&lt;String&gt; future = future01.thenCombineAsync(future02, (f1, f2) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> f1 + <span class="string">&quot;:&quot;</span> + f2 + <span class="string">&quot;-&gt; Haha&quot;</span>;</span><br><span class="line">        &#125;, executor);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;main....end.....&quot;</span> + future.get());</span><br></pre></td></tr></table></figure>





<h4 id="一个完成"><a href="#一个完成" class="headerlink" title="一个完成"></a>一个完成</h4><p><img src="/CompletableFuture%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92/image-20201106101904880.png" alt="image-20201106101904880"></p>
<p><img src="/CompletableFuture%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92/image-20201106101918013.png" alt="image-20201106101918013"></p>
<p>当两个任务中，任意一个future 任务完成时，执行任务</p>
<p><strong>applyToEither</strong>;两个任务有一个执行完成，获取它的返回值，处理任务并有新的返回值</p>
<p><strong>acceptEither</strong>: 两个任务有一个执行完成，获取它的返回值，处理任务，没有新的返回值</p>
<p><strong>runAfterEither</strong>:两个任务有一个执行完成，不需要获取 future 的结果，处理任务，也没有返回值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 两个任务，只要有一个完成，我们就执行任务</span></span><br><span class="line"><span class="comment">         * runAfterEnitherAsync：不感知结果，自己没有返回值</span></span><br><span class="line"><span class="comment">         * acceptEitherAsync：感知结果，自己没有返回值</span></span><br><span class="line"><span class="comment">         *  applyToEitherAsync：感知结果，自己有返回值</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="comment">//        future01.runAfterEitherAsync(future02,() -&gt;&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;任务3开始...之前的结果:&quot;);</span></span><br><span class="line"><span class="comment">//        &#125;,executor);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        future01.acceptEitherAsync(future02,(res) -&gt; &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(&quot;任务3开始...之前的结果:&quot; + res);</span></span><br><span class="line"><span class="comment">//        &#125;,executor);</span></span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;String&gt; future = future01.applyToEitherAsync(future02, res -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;任务3开始...之前的结果：&quot;</span> + res);</span><br><span class="line">            <span class="keyword">return</span> res.toString() + <span class="string">&quot;-&gt;哈哈&quot;</span>;</span><br><span class="line">        &#125;, executor);</span><br></pre></td></tr></table></figure>

<h3 id="多任务组合"><a href="#多任务组合" class="headerlink" title="多任务组合"></a>多任务组合</h3><p><img src="/CompletableFuture%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92/image-20201106104031315.png" alt="image-20201106104031315"></p>
<p>allOf：<strong>等待所有任务完成</strong></p>
<p>anyOf:<strong>只要有一个任务完成</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">        CompletableFuture&lt;String&gt; futureImg = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;查询商品的图片信息&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;hello.jpg&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;String&gt; futureAttr = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;查询商品的属性&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;黑色+256G&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;String&gt; futureDesc = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123; TimeUnit.SECONDS.sleep(<span class="number">3</span>); &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;查询商品介绍&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;华为&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待全部执行完</span></span><br><span class="line"><span class="comment">//        CompletableFuture&lt;Void&gt; allOf = CompletableFuture.allOf(futureImg, futureAttr, futureDesc);</span></span><br><span class="line"><span class="comment">//        allOf.get();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 只需要有一个执行完</span></span><br><span class="line">        CompletableFuture&lt;Object&gt; anyOf = CompletableFuture.anyOf(futureImg, futureAttr, futureDesc);</span><br><span class="line">        anyOf.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;main....end.....&quot;</span> + anyOf.get());</span><br></pre></td></tr></table></figure>

<p>都是操作 CompletableFuture 类 更多方法还请参考该类</p>
<h4 id="测试及使用多任务组合"><a href="#测试及使用多任务组合" class="headerlink" title="测试及使用多任务组合"></a>测试及使用多任务组合</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SkuItemVo <span class="title function_">item</span><span class="params">(Long skuId)</span> &#123;</span><br><span class="line">        <span class="type">SkuItemVo</span> <span class="variable">skuItemVo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SkuItemVo</span>();</span><br><span class="line">        <span class="comment">//1、sku基本信息获取 pms_sku_info</span></span><br><span class="line">        CompletableFuture&lt;SkuInfoEntity&gt; infoFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="type">SkuInfoEntity</span> <span class="variable">info</span> <span class="operator">=</span> getById(skuId);</span><br><span class="line">            skuItemVo.setInfo(info);</span><br><span class="line">            <span class="keyword">return</span> info;</span><br><span class="line">        &#125;, executor);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3、获取spu的销售属性组合</span></span><br><span class="line">        CompletableFuture&lt;Void&gt; saleAttrFuture = infoFuture.thenAcceptAsync((res) -&gt; &#123;</span><br><span class="line">            List&lt;SkuItemSaleAttrVo&gt; saleAttrVos = skuSaleAttrValueService.getSaleAttrsBySpuId(res.getSpuId());</span><br><span class="line">            skuItemVo.setSaleAttr(saleAttrVos);</span><br><span class="line">        &#125;, executor);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//4、获取spu的介绍 pms_spu_info_desc</span></span><br><span class="line">        CompletableFuture&lt;Void&gt; descFuture = infoFuture.thenAcceptAsync(res -&gt; &#123;</span><br><span class="line">            <span class="type">SpuInfoDescEntity</span> <span class="variable">spuInfoDescEntity</span> <span class="operator">=</span> spuInfoDescService.getById(res.getSpuId());</span><br><span class="line">            skuItemVo.setDesp(spuInfoDescEntity);</span><br><span class="line">        &#125;, executor);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//5、获取spu的规格参数信息</span></span><br><span class="line">        CompletableFuture&lt;Void&gt; attrGroupFuture = infoFuture.thenAcceptAsync(res -&gt; &#123;</span><br><span class="line">            List&lt;SpuItemAttrGroupVo&gt; attrGroupVos = attrGroupService.getAttrGroupWithAttrsBySpuId(res.getSpuId(), res.getCatalogId());</span><br><span class="line">            skuItemVo.setGroupAttrs(attrGroupVos);</span><br><span class="line">        &#125;, executor);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2、sku图片信息    pms_sku_images</span></span><br><span class="line">        CompletableFuture&lt;Void&gt; imgFuture = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">            List&lt;SkuImagesEntity&gt; skuImagesEntityList = imagesService.getImagesBySkuId(skuId);</span><br><span class="line">            skuItemVo.setImages(skuImagesEntityList);</span><br><span class="line">        &#125;, executor);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;Void&gt; seckillFuture = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">            <span class="comment">//3、远程调用查询当前sku是否参与秒杀优惠活动</span></span><br><span class="line">            <span class="type">R</span> <span class="variable">skuSeckilInfo</span> <span class="operator">=</span> seckillFeignService.getSkuSeckilInfo(skuId);</span><br><span class="line">            <span class="keyword">if</span> (skuSeckilInfo.getCode() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//查询成功</span></span><br><span class="line">                <span class="type">SeckillSkuVo</span> <span class="variable">seckilInfoData</span> <span class="operator">=</span> skuSeckilInfo.getData(<span class="string">&quot;data&quot;</span>, <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;SeckillSkuVo&gt;() &#123;</span><br><span class="line">                &#125;);</span><br><span class="line">                skuItemVo.setSeckillSkuVo(seckilInfoData);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (seckilInfoData != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">long</span> <span class="variable">currentTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">                    <span class="keyword">if</span> (currentTime &gt; seckilInfoData.getEndTime()) &#123;</span><br><span class="line">                        skuItemVo.setSeckillSkuVo(<span class="literal">null</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, executor);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//等待所有任务都完成</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            CompletableFuture.allOf(saleAttrFuture,descFuture,attrGroupFuture,imgFuture).get();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> skuItemVo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程</title>
    <url>/2021/02/01/Java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="初始化线程的-4-种方式"><a href="#初始化线程的-4-种方式" class="headerlink" title="初始化线程的 4 种方式"></a>初始化线程的 4 种方式</h2><p>1、继承 Thread</p>
<p>2、实现 Runnable+</p>
<p>3、实现 Callable 接口 + FutureTask（可以拿到返回结果，可以处理异常）</p>
<p>4、线程池</p>
<p>方式一和方式二 主进程无法获取线程的运算结果</p>
<p>方式三：主进程可以获取当前线程的运算结果，但是不利于控制服务器种的线程资源，可以导致服务器资源耗尽</p>
<p>方式四：通过如下两种方式初始化线程池</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">ThreadPollExecutor</span>(corePoolSize,maximumPoolSize,keepAliveTime,TimeUnit,unit,workQueue,threadFactory,handler);</span><br></pre></td></tr></table></figure>







<h2 id="开发中为什么使用线程池"><a href="#开发中为什么使用线程池" class="headerlink" title="开发中为什么使用线程池"></a>开发中为什么使用线程池</h2><ul>
<li>降低资源的消耗<ul>
<li>通过重复利用已创建好的线程降低线程的创建和销毁带来的损耗</li>
</ul>
</li>
<li>提高响应速度<ul>
<li>因为线程池中的线程没有超过线程池的最大上限时，有的线程处于等待分配任务的状态，当任务来时无需创建新的线程就能执行</li>
</ul>
</li>
<li>提高线程的客观理性<ul>
<li>线程池会根据当前系统的特点对池内的线程进行优化处理，减少创建和销毁线程带来的系统开销，无限的创建和销毁线程不仅消耗系统资源，还降低系统的稳定性，使用线程池进行统一分配</li>
</ul>
</li>
</ul>
<p><span style="color:blue;font-">通过线程池性能稳定，也可以获取执行结果，并捕获异常，但是</span>，<strong>在业务复杂情况下，一个异步调用可能会依赖另一个异步调用的执行结果</strong></p>
<h2 id="常见的-4-种线程池"><a href="#常见的-4-种线程池" class="headerlink" title="常见的 4 种线程池"></a>常见的 4 种线程池</h2><ul>
<li><code>newCacheThreadPool</code><ul>
<li>创建一个可缓存的线程池，如果线程池长度超过需要，可灵活回收空闲线程，若无可回收，则新建线程</li>
</ul>
</li>
<li><code>newFixedThreadPool</code><ul>
<li>创建一个指定长度的线程池，可控制线程最大并发数，超出的线程会再队列中等待</li>
</ul>
</li>
<li><code>newScheduleThreadPool</code><ul>
<li>创建一个定长线程池，支持定时及周期性任务执行</li>
</ul>
</li>
<li><code>newSingleThreadExecutor</code><ul>
<li>创建一个单线程化的线程池，她只会用唯一的工作线程来执行任务，保证所有任务</li>
</ul>
</li>
</ul>
<h2 id="线程池的-7-大参数"><a href="#线程池的-7-大参数" class="headerlink" title="线程池的 7 大参数"></a>线程池的 7 大参数</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a new &#123;<span class="doctag">@code</span> ThreadPoolExecutor&#125; with the given initial</span></span><br><span class="line"><span class="comment"> * parameters.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> corePoolSize the number of threads to keep in the pool, even</span></span><br><span class="line"><span class="comment"> *        if they are idle, unless &#123;<span class="doctag">@code</span> allowCoreThreadTimeOut&#125; is set</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> maximumPoolSize the maximum number of threads to allow in the</span></span><br><span class="line"><span class="comment"> *        pool</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> keepAliveTime when the number of threads is greater than</span></span><br><span class="line"><span class="comment"> *        the core, this is the maximum time that excess idle threads</span></span><br><span class="line"><span class="comment"> *        will wait for new tasks before terminating.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> unit the time unit for the &#123;<span class="doctag">@code</span> keepAliveTime&#125; argument</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> workQueue the queue to use for holding tasks before they are</span></span><br><span class="line"><span class="comment"> *        executed.  This queue will hold only the &#123;<span class="doctag">@code</span> Runnable&#125;</span></span><br><span class="line"><span class="comment"> *        tasks submitted by the &#123;<span class="doctag">@code</span> execute&#125; method.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> threadFactory the factory to use when the executor</span></span><br><span class="line"><span class="comment"> *        creates a new thread</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> handler the handler to use when execution is blocked</span></span><br><span class="line"><span class="comment"> *        because the thread bounds and queue capacities are reached</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException if one of the following holds:&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> corePoolSize &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> keepAliveTime &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt;= 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment"> *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt; corePoolSize&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> workQueue&#125;</span></span><br><span class="line"><span class="comment"> *         or &#123;<span class="doctag">@code</span> threadFactory&#125; or &#123;<span class="doctag">@code</span> handler&#125; is null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,</span></span><br><span class="line"><span class="params">                          <span class="type">int</span> maximumPoolSize,</span></span><br><span class="line"><span class="params">                          <span class="type">long</span> keepAliveTime,</span></span><br><span class="line"><span class="params">                          TimeUnit unit,</span></span><br><span class="line"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="line"><span class="params">                          ThreadFactory threadFactory,</span></span><br><span class="line"><span class="params">                          RejectedExecutionHandler handler)</span> &#123;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>





<h3 id="corePoolSize：核心线程数"><a href="#corePoolSize：核心线程数" class="headerlink" title="corePoolSize：核心线程数"></a>corePoolSize：核心线程数</h3><p>线程池维护的最小线程数量，核心线程创建后不会被回收（注意：设置allowCoreThreadTimeout&#x3D;true后，空闲的核心线程超过存活时间也会被回收）。</p>
<p>大于核心线程数的线程，在空闲时间超过keepAliveTime后会被回收。</p>
<p>线程池刚创建时，里面没有一个线程，当调用 execute() 方法添加一个任务时，如果正在运行的线程数量小于corePoolSize，则马上创建新线程并运行这个任务。</p>
<h3 id="maximumPoolSize：最大线程数"><a href="#maximumPoolSize：最大线程数" class="headerlink" title="maximumPoolSize：最大线程数"></a>maximumPoolSize：最大线程数</h3><p>线程池允许创建的最大线程数量。</p>
<p>当添加一个任务时，核心线程数已满，线程池还没达到最大线程数，并且没有空闲线程，工作队列已满的情况下，创建一个新线程并执行。</p>
<h3 id="keepAliveTime：空闲线程存活时间"><a href="#keepAliveTime：空闲线程存活时间" class="headerlink" title="keepAliveTime：空闲线程存活时间"></a>keepAliveTime：空闲线程存活时间</h3><p>当一个可被回收的线程的空闲时间大于keepAliveTime，就会被回收。</p>
<p>可被回收的线程：</p>
<ol>
<li>设置allowCoreThreadTimeout&#x3D;true的核心线程。</li>
<li>大于核心线程数的线程（非核心线程）。</li>
</ol>
<h3 id="unit：时间单位"><a href="#unit：时间单位" class="headerlink" title="unit：时间单位"></a>unit：时间单位</h3><p>keepAliveTime的时间单位：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TimeUnit.NANOSECONDS</span><br><span class="line">TimeUnit.MICROSECONDS</span><br><span class="line">TimeUnit.MILLISECONDS <span class="comment">// 毫秒</span></span><br><span class="line">TimeUnit.SECONDS</span><br><span class="line">TimeUnit.MINUTES</span><br><span class="line">TimeUnit.HOURS</span><br><span class="line">TimeUnit.DAYS</span><br></pre></td></tr></table></figure>

<h3 id="workQueue：工作队列"><a href="#workQueue：工作队列" class="headerlink" title="workQueue：工作队列"></a>workQueue：工作队列</h3><p>存放待执行任务的队列：当提交的任务数超过核心线程数大小后，再提交的任务就存放在工作队列，任务调度时再从队列中取出任务。它仅仅用来存放被execute()方法提交的Runnable任务。工作队列实现了BlockingQueue接口。</p>
<p>JDK默认的工作队列有五种：</p>
<ol>
<li>ArrayBlockingQueue 数组型阻塞队列：数组结构，初始化时传入大小，有界，FIFO，使用一个重入锁，默认使用非公平锁，入队和出队共用一个锁，互斥。</li>
<li>LinkedBlockingQueue 链表型阻塞队列：链表结构，默认初始化大小为Integer.MAX_VALUE，有界（近似无解），FIFO，使用两个重入锁分别控制元素的入队和出队，用Condition进行线程间的唤醒和等待。</li>
<li>SynchronousQueue 同步队列：容量为0，添加任务必须等待取出任务，这个队列相当于通道，不存储元素。</li>
<li>PriorityBlockingQueue 优先阻塞队列：无界，默认采用元素自然顺序升序排列。</li>
<li>DelayQueue 延时队列：无界，元素有过期时间，过期的元素才能被取出。</li>
</ol>
<h3 id="threadFactory：线程工厂"><a href="#threadFactory：线程工厂" class="headerlink" title="threadFactory：线程工厂"></a>threadFactory：线程工厂</h3><p>创建线程的工厂，可以设定线程名、线程编号等。</p>
<p>默认线程工厂：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The default thread factory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DefaultThreadFactory</span> <span class="keyword">implements</span> <span class="title class_">ThreadFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">poolNumber</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadGroup group;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">threadNumber</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String namePrefix;</span><br><span class="line"> </span><br><span class="line">    DefaultThreadFactory() &#123;</span><br><span class="line">        <span class="type">SecurityManager</span> <span class="variable">s</span> <span class="operator">=</span> System.getSecurityManager();</span><br><span class="line">        group = (s != <span class="literal">null</span>) ? s.getThreadGroup() :</span><br><span class="line">                              Thread.currentThread().getThreadGroup();</span><br><span class="line">        namePrefix = <span class="string">&quot;pool-&quot;</span> +</span><br><span class="line">                      poolNumber.getAndIncrement() +</span><br><span class="line">                     <span class="string">&quot;-thread-&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(group, r,</span><br><span class="line">                              namePrefix + threadNumber.getAndIncrement(),</span><br><span class="line">                              <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (t.isDaemon())</span><br><span class="line">            t.setDaemon(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (t.getPriority() != Thread.NORM_PRIORITY)</span><br><span class="line">            t.setPriority(Thread.NORM_PRIORITY);</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="handler：拒绝策略"><a href="#handler：拒绝策略" class="headerlink" title="handler：拒绝策略"></a>handler：拒绝策略</h3><p>当线程池线程数已满，并且工作队列达到限制，新提交的任务使用拒绝策略处理。可以自定义拒绝策略，拒绝策略需要实现RejectedExecutionHandler接口。</p>
<p>JDK默认的拒绝策略有四种：</p>
<ol>
<li>AbortPolicy：丢弃任务并<strong>抛出RejectedExecutionException异常。</strong></li>
<li>DiscardPolicy：<strong>丢弃任务</strong>，但是不抛出异常。可能导致无法发现系统的异常状态。</li>
<li>DiscardOldestPolicy：<strong>丢弃队列最(老)前面的任务</strong>，然后重新提交被拒绝的任务。</li>
<li>CallerRunsPolicy：<strong>由调用线程处理该任务。</strong></li>
</ol>
<p>默认拒绝策略：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The default rejected execution handler</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">RejectedExecutionHandler</span> <span class="variable">defaultHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AbortPolicy</span>();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">AbortPolicy</span> <span class="keyword">implements</span> <span class="title class_">RejectedExecutionHandler</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates an &#123;<span class="doctag">@code</span> AbortPolicy&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AbortPolicy</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Always throws RejectedExecutionException.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> r the runnable task requested to be executed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> e the executor attempting to execute this task</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RejectedExecutionException always</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RejectedExecutionException</span>(<span class="string">&quot;Task &quot;</span> + r.toString() +</span><br><span class="line">                                             <span class="string">&quot; rejected from &quot;</span> +</span><br><span class="line">                                             e.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="线程池的执行流程"><a href="#线程池的执行流程" class="headerlink" title="线程池的执行流程"></a>线程池的执行流程</h2><p>1、线程池创建，准备好 <code>core</code> 数量 的<strong>核心线程</strong>，准备接受任务</p>
<p>2、新的任务进来，用 <code>core</code> 准备好的空闲线程执行</p>
<ul>
<li><code>core</code> 满了，就将再进来的任务放入<strong>阻塞队列</strong>中，空闲的 core 就会自己去阻塞队列获取任务执行</li>
<li>阻塞队列也满了，就直接开新线程去执行，最大只能开到 <strong><code>max</code> 指定的数量</strong></li>
<li><code>max</code> 都执行好了，**<code>Max-core</code> 数量空闲的线程<strong>会在 <code>keepAliveTime</code> 指定的时间后</strong>自动销毁**，终保持到 <code>core</code> 大小</li>
<li>如果线程数开到了 <code>max</code> 数量，还有新的任务进来，就会使用 reject 指定的<strong>拒绝策略</strong>进行处理</li>
</ul>
<p>3、所有的线程创建都是由指定的 <code>factory</code> 创建的</p>
<p>面试;</p>
<p>一个线程池 core 7、max 20 ，queue 50 100 并发进来怎么分配的 ?</p>
<p>先有 7 个能直接得到运行，接下来 50 个进入队列排队，再多开 13 个继续执行，线程70个被安排上了，剩下30个默认拒绝策略</p>
<p><img src="/%E5%A4%9A%E7%BA%BF%E7%A8%8B/20210414112748609.png" alt="img"></p>
<h2 id="自定义线程池"><a href="#自定义线程池" class="headerlink" title="自定义线程池"></a>自定义线程池</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程池工厂工具</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadPoolFactory</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成固定大小的线程池</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> threadName 线程名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 线程池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title function_">createFixedThreadPool</span><span class="params">(String threadName)</span> &#123;</span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">threadNumber</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">                <span class="comment">// 核心线程数</span></span><br><span class="line">                desiredThreadNum(),</span><br><span class="line">                <span class="comment">// 最大线程数</span></span><br><span class="line">                desiredThreadNum(),</span><br><span class="line">                <span class="comment">// 空闲线程存活时间</span></span><br><span class="line">                <span class="number">60L</span>,</span><br><span class="line">                <span class="comment">// 空闲线程存活时间单位</span></span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                <span class="comment">// 工作队列</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1024</span>),</span><br><span class="line">                <span class="comment">// 线程工厂</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ThreadFactory</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(r, threadName + <span class="string">&quot;-&quot;</span> + threadNumber.getAndIncrement());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">// 拒绝策略</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">RejectedExecutionHandler</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor executor)</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (!executor.isShutdown()) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                <span class="comment">//尝试阻塞式加入任务队列</span></span><br><span class="line">                                executor.getQueue().put(r);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                                <span class="comment">//保持线程的中断状态</span></span><br><span class="line">                                Thread.currentThread().interrupt();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 理想的线程数，使用 2倍cpu核心数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">desiredThreadNum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Runtime.getRuntime().availableProcessors() * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义拒绝策略"><a href="#自定义拒绝策略" class="headerlink" title="自定义拒绝策略"></a>自定义拒绝策略</h3><p>参考类似的思路，最简单的做法，我们可以直接定义一个RejectedExecutionHandler，当队列满时改为调用BlockingQueue.put来实现生产者的阻塞：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">RejectedExecutionHandler</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor executor)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!executor.isShutdown()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    executor.getQueue().put(r);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="comment">// should not be interrupted</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>

<p>这样，我们就无需再关心Queue和Consumer的逻辑，只要把精力集中在生产者和消费者线程的实现逻辑上，只管往线程池提交任务就行了。</p>
<h2 id="测试异步"><a href="#测试异步" class="headerlink" title="测试异步"></a>测试异步</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程开始&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程当前线程ID:&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程当前线程名称:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line"><span class="comment">//        //Thread方式</span></span><br><span class="line"><span class="comment">//        new Thread01().start();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //Runnable方式</span></span><br><span class="line"><span class="comment">//        Runnable02 runnable = new Runnable02();</span></span><br><span class="line"><span class="comment">//        new Thread(runnable).start();</span></span><br><span class="line"><span class="comment">//        //FutureTask 也可以接收runnable</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        //Callable方式  有返回值  可以处理异常</span></span><br><span class="line"><span class="comment">//        FutureTask&lt;Integer&gt; futureTask = new FutureTask&lt;&gt;(new Callable03());</span></span><br><span class="line"><span class="comment">//        new Thread(futureTask).start();</span></span><br><span class="line"><span class="comment">//        Integer integer = null;</span></span><br><span class="line"><span class="comment">//        try &#123;</span></span><br><span class="line"><span class="comment">//            integer = futureTask.get();</span></span><br><span class="line"><span class="comment">//        &#125; catch (Exception e) &#123;</span></span><br><span class="line"><span class="comment">//            e.printStackTrace();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;Callable方式返回值:&quot;+integer);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//线程池</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> ThreadPoolFactory.createFixedThreadPool(<span class="string">&quot;测试&quot;</span>);</span><br><span class="line"></span><br><span class="line">        executorService.execute(<span class="keyword">new</span> <span class="title class_">Runnable02</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;主线程结束&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Thread01</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread当前线程ID:&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread当前线程名称:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;Thread打印一个数值i：&quot;</span> + i);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Runnable02</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Runnable当前线程ID:&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">            System.out.println(<span class="string">&quot;Runnable当前线程名称:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">2</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;Runnable打印一个数值i：&quot;</span> + i);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Callable03</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Callable当前线程ID:&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">            System.out.println(<span class="string">&quot;Callable当前线程名称:&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">2</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;Callable打印一个数值i：&quot;</span> + i);</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>接口幂等性</title>
    <url>/2021/10/05/Java/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E6%80%A7%E5%A4%84%E7%90%86/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E6%80%A7/</url>
    <content><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="什么是接口幂等性？"><a href="#什么是接口幂等性？" class="headerlink" title="什么是接口幂等性？"></a>什么是接口幂等性？</h2><p><strong>接口幂等性就是用户对于同一操作发起的一次请求或者多次请求的结果是一致的</strong><br>就像我们支付时，多次点支付按钮，只会扣一次。</p>
<h2 id="哪些情况需要防止"><a href="#哪些情况需要防止" class="headerlink" title="哪些情况需要防止"></a>哪些情况需要防止</h2><p>用户多次点击按钮<br>用户页面回退再次提交<br>微服务互相调用，由于网络问题，导致请求失败。feign 触发重试机制<br>等等</p>
<h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p><strong>1、token机制</strong><br>1、服务端提供了发送 [token]的接口。我们在分析业务的时候，哪些业务是存在幂等问题的， 就必须在执行业务前，先去获取 token，服务器会把 token 保存到 redis 中。<br>2、然后调用业务接口请求时，把 token 携带过去，一般放在请求头部。<br>3、服务器判断 token 是否存在 [redis] 中，存在表示第一次请求，然后删除 token,继续执行业 务。<br>4、如果判断 token 不存在 redis 中，就表示是重复操作，直接返回重复标记给 client，这样 就保证了业务代码，不被重复执行</p>
<p>危险性： </p>
<p>1、先删除 token 还是后删除 token； </p>
<p>(1) 先删除可能导致，业务确实没有执行，重试还带上之前 token，由于防重设计导致， 请求还是不能执行。 </p>
<p>(2) 后删除可能导致，业务处理成功，但是服务闪断，出现超时，没有删除 token，别 人继续重试，导致业务被执行两边 </p>
<p>(3)<strong>我们最好设计为先删除 token，如果业务调用失败，就重新获取 token 再次请求。</strong></p>
<p>2、<strong>Token 获取、比较和删除必须是原子性</strong> </p>
<p>(1) redis.get(token) 、token.equals、redis.del(token)如果这两个操作不是原子，可能导 致，高并发下，都 get 到同样的数据，判断都成功，继续业务并发执行 (2) <strong>可以在 redis 使用 lua 脚本完成这个操作</strong></p>
<p>**2.各种唯一性约束（数据库的唯一约束，防重表，全局唯一性ID，redis的Set防重等等）<br>**</p>
<p><strong>3.锁机制（数据库锁（乐观锁和悲观锁））</strong></p>
<h2 id="实战之用token机制防止订单重复提交"><a href="#实战之用token机制防止订单重复提交" class="headerlink" title="实战之用token机制防止订单重复提交"></a>实战之用token机制防止订单重复提交</h2><p>1.流程<br><img src="/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89%E6%80%A7/1b09d2d2dadb6be6150bdb9d73bfb353.png" alt="在这里插入图片描述"><br><strong>核心：保证 验，删 令牌的原子性</strong><br>2.代码<br>生成订单</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生成令牌</span></span><br><span class="line"><span class="type">String</span> <span class="variable">orderToken</span> <span class="operator">=</span> UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        orderConfirmVO.setOrderToken(orderToken);</span><br><span class="line">        <span class="comment">//保存到redis中</span></span><br><span class="line">        redisTemplate.opsForValue().set(</span><br><span class="line">                ORDER_TOKEN_REDIS_PREFIX + memberVO.getUserId(),</span><br><span class="line">                orderToken,</span><br><span class="line">                <span class="number">30</span>,</span><br><span class="line">                TimeUnit.MINUTES);</span><br><span class="line">                <span class="comment">//返回数据</span></span><br><span class="line">                 <span class="keyword">return</span> orderConfirmVO;</span><br></pre></td></tr></table></figure>

<p>提交订单</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">orderToken</span> <span class="operator">=</span> orderSubmitVO.getOrderToken();</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        *使用lua脚本,保证令牌比较和删除令牌是原子性操作,结果只能是Long, Boolean, List</span></span><br><span class="line"><span class="comment">        * the script result type. Should be one of Long, Boolean, List, or deserialized value type</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">script</span> <span class="operator">=</span> <span class="string">&quot;if redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;, KEYS[1]) else return 0 end&quot;</span>;</span><br><span class="line">       <span class="type">Long</span> <span class="variable">result</span> <span class="operator">=</span> redisTemplate.execute(<span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;Long&gt;(script, Long.class),</span><br><span class="line">               Arrays.asList(ORDER_TOKEN_REDIS_PREFIX + memberVO.getUserId()),</span><br><span class="line">               orderToken);</span><br><span class="line">       <span class="keyword">if</span> (result != <span class="literal">null</span> &amp;&amp; result == <span class="number">1L</span>) &#123;</span><br><span class="line">           <span class="comment">//令牌操作成功,创建订单</span></span><br><span class="line">           &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">//提醒用户</span></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>集合的排序算法</title>
    <url>/2021/03/09/Java/%E6%8E%92%E5%BA%8F%20Collections.sort%E4%BD%BF%E7%94%A8/%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="集合排序"><a href="#集合排序" class="headerlink" title="集合排序"></a>集合排序</h2><p>根据集合中对象的属性排序</p>
<h3 id="普通排序"><a href="#普通排序" class="headerlink" title="普通排序"></a>普通排序</h3><h4 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h4><ol>
<li>该对象实现 <code>Comparable&lt;T&gt;</code> 接口啦。然后重写里面的<br><code>compareTo()</code>方法。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Student&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Student o)</span> &#123;</span><br><span class="line">        <span class="comment">//降序</span></span><br><span class="line">        <span class="comment">//return o.age - this.age;</span></span><br><span class="line">        <span class="comment">//升序</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age - o.age;        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用默认排序</li>
</ol>
<blockquote>
<pre><code>  //使用默认排序
    Collections.sort(list);
</code></pre>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">testSort</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Student&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1</span>,<span class="number">25</span>,<span class="string">&quot;关羽&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">2</span>,<span class="number">21</span>,<span class="string">&quot;张飞&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">3</span>,<span class="number">18</span>,<span class="string">&quot;刘备&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">4</span>,<span class="number">32</span>,<span class="string">&quot;袁绍&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">5</span>,<span class="number">36</span>,<span class="string">&quot;赵云&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">6</span>,<span class="number">16</span>,<span class="string">&quot;曹操&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;排序前:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Student student : list) &#123;</span><br><span class="line">            System.out.println(student.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//使用默认排序</span></span><br><span class="line">        Collections.sort(list);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;默认排序后:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Student student : list) &#123;</span><br><span class="line">            System.out.println(student.toString());</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h4><p>使用Comparator </p>
<p><code>compare(Student o1, Student o2)</code> 方法的返回值跟 <code>Comparable&lt;&gt;</code> 接口中的 <code>compareTo(Student o)</code> 方法 返回值意思相同。</p>
<ul>
<li>写法1:      <code>Collections.sort(list,Comparator&lt;T&gt;）;</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testsSort</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;Student&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1</span>,<span class="string">&quot;关羽&quot;</span>,<span class="number">25</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">2</span>,<span class="string">&quot;张飞&quot;</span>,<span class="number">21</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">3</span>,<span class="string">&quot;刘备&quot;</span>,<span class="number">18</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">4</span>,<span class="string">&quot;袁绍&quot;</span>,<span class="number">32</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">5</span>,<span class="string">&quot;赵云&quot;</span>,<span class="number">36</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">6</span>,<span class="string">&quot;曹操&quot;</span>,<span class="number">16</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;排序前:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (Student student : list) &#123;</span><br><span class="line">        System.out.println(student.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用默认排序</span></span><br><span class="line">    Collections.sort(list,<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Student&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student o1, Student o2)</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 升序</span></span><br><span class="line">            <span class="keyword">return</span> o1.getAge() - o2.getAge();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;默认排序后:&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (Student student : list) &#123;</span><br><span class="line">        System.out.println(student.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><p>写法2  Comparator.comparing</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Collections.sort(list, Comparator.comparing(</span><br><span class="line">        Employee::getName, (s1, s2) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> s2.compareTo(s1);</span><br><span class="line">        &#125;));</span><br></pre></td></tr></table></figure>




</li>
<li><p>写法3  list.sort( Comparator<T>）</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义排序2</span></span><br><span class="line">list.sort(<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Student&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Student o1, Student o2)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 升序</span></span><br><span class="line">        <span class="keyword">return</span> o1.getAge() - o2.getAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>









<h3 id="输出结果："><a href="#输出结果：" class="headerlink" title="输出结果："></a>输出结果：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">排序前:</span><br><span class="line">Student(id=1, name=关羽, age=25)</span><br><span class="line">Student(id=2, name=张飞, age=21)</span><br><span class="line">Student(id=3, name=刘备, age=18)</span><br><span class="line">Student(id=4, name=袁绍, age=32)</span><br><span class="line">Student(id=5, name=赵云, age=36)</span><br><span class="line">Student(id=6, name=曹操, age=16)</span><br><span class="line">默认排序后:</span><br><span class="line">Student(id=6, name=曹操, age=16)</span><br><span class="line">Student(id=3, name=刘备, age=18)</span><br><span class="line">Student(id=2, name=张飞, age=21)</span><br><span class="line">Student(id=1, name=关羽, age=25)</span><br><span class="line">Student(id=4, name=袁绍, age=32)</span><br><span class="line">Student(id=5, name=赵云, age=36)</span><br></pre></td></tr></table></figure>



<hr>
<h3 id="Java-compareTo-方法"><a href="#Java-compareTo-方法" class="headerlink" title="Java compareTo() 方法"></a>Java compareTo() 方法</h3><p>比较 Byte, Long, Integer相同数据类型等。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123; </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">      <span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">      System.out.println(x.compareTo(<span class="number">3</span>));</span><br><span class="line">      System.out.println(x.compareTo(<span class="number">5</span>));</span><br><span class="line">      System.out.println(x.compareTo(<span class="number">8</span>));            </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>输出结果为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">0</span><br><span class="line">-1</span><br></pre></td></tr></table></figure>





<p>gul使用的方式  使用 根据对象的参数进行排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.sorted((menu1, menu2) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> (menu1.getSort() == <span class="literal">null</span> ? <span class="number">0</span> : menu1.getSort()) - (menu2.getSort() == <span class="literal">null</span> ? <span class="number">0</span> : menu2.getSort());</span><br><span class="line">    &#125;).</span><br></pre></td></tr></table></figure>







<h2 id="stream流-排序"><a href="#stream流-排序" class="headerlink" title="stream流 排序"></a>stream流 排序</h2><p>方式一：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123; </span><br><span class="line">   </span><br><span class="line">    List&lt;Student&gt; sorted = list.stream().sorted(Comparator.comparing(Student::getAge)).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    sorted.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>方式二：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Test&#123; </span><br><span class="line"></span><br><span class="line">    List&lt;Student&gt; sorted = list.stream().sorted(Comparator.comparing(Student::getAge)).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    sorted.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>数据分片，多线程处理</title>
    <url>/2022/02/04/Java/%E6%95%B0%E6%8D%AE%E5%88%86%E7%89%87-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%A4%84%E7%90%86/%E6%95%B0%E6%8D%AE%E5%88%86%E7%89%87%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="数据分片，多线程处理"><a href="#数据分片，多线程处理" class="headerlink" title="数据分片，多线程处理"></a>数据分片，多线程处理</h1><p>场景：mysql有100w条数据，要根据id更新到Elasticsearch</p>
<p>处理方式：100w 条数据分页查询，每次查询1w条数据，再将这1w条数据分成10个分片，每个分片1000条数据，每个分片的1000数据由一条线程去执行处理，相当于10个分片由10个线程处理。</p>
<h2 id="线程池工具类"><a href="#线程池工具类" class="headerlink" title="线程池工具类"></a>线程池工具类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程池工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程池实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 核心线程数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">THREADPOOL_COREPOOLSIZE</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最大线程数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">THREADPOOL_MAXPOOLSIZE</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程等待回收的存活时间，单位：分钟</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">THREADPOOL_KEEPALIVETIME</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化线程池</span></span><br><span class="line"><span class="comment">     * 线程池拒绝策略为默认的拒绝策略，如果不能加入工作队列就抛出RejectedExecutionException异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line"> </span><br><span class="line">        executor = <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(THREADPOOL_COREPOOLSIZE,</span><br><span class="line">                THREADPOOL_MAXPOOLSIZE,</span><br><span class="line">                THREADPOOL_KEEPALIVETIME,</span><br><span class="line">                TimeUnit.MINUTES,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">80</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">DefaultThreadFactory</span>(<span class="string">&quot;defaultPool&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用线程池运行任务，线程无返回值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> task</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Runnable task)</span>&#123;</span><br><span class="line">        executor.execute(task);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用线程池提交异步任务，任务运行带返回值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> task 实现了Callable接口的线程</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Future <span class="title function_">submit</span><span class="params">(Callable task)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> executor.submit(task);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 停止线程池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">shutdown</span><span class="params">()</span> &#123;</span><br><span class="line">        executor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadPoolExecutor <span class="title function_">getExecutor</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="模拟测试数据"><a href="#模拟测试数据" class="headerlink" title="模拟测试数据"></a>模拟测试数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListFactory</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; data;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">curPage</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ListFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        String[] arr = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;9&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;4&quot;</span>&#125;;</span><br><span class="line">        <span class="built_in">this</span>.data = Arrays.asList(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;全部数据 &quot;</span> + <span class="built_in">this</span>.data);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> curPage * pageSize;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//数据取完了</span></span><br><span class="line">        <span class="keyword">if</span> (start &gt; data.size()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> Math.min((start + pageSize), data.size());</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//下一页</span></span><br><span class="line">        curPage++;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.data.subList(start, end);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.data.size();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCurPage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.curPage;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ListFactory</span> <span class="variable">listFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListFactory</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            List&lt;String&gt; data = listFactory.getNext();</span><br><span class="line">            System.out.println(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="执行的处理任务"><a href="#执行的处理任务" class="headerlink" title="执行的处理任务"></a>执行的处理任务</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MKTask</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; items;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MKTask</span><span class="params">(List&lt;String&gt; items)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.items = items;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; items.size(); j++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//模拟业务处理耗时</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">1</span> + (<span class="type">int</span>) (Math.random() * <span class="number">3</span>);</span><br><span class="line">                TimeUnit.SECONDS.sleep(s);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.cur = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCur</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.cur + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="主线程分片"><a href="#主线程分片" class="headerlink" title="主线程分片"></a>主线程分片</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiThread</span> &#123;</span><br><span class="line">    List&lt;MKTask&gt; taskList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将任务切分，由多线程处理，并打印处理进度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleAll</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ListFactory</span> <span class="variable">listFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListFactory</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">total</span> <span class="operator">=</span> listFactory.getSize();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">//获取翻页数据</span></span><br><span class="line">            List&lt;String&gt; data = listFactory.getNext();</span><br><span class="line">            <span class="comment">//模拟取数据耗时</span></span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (data == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">//每个线程处理 5 条</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">threadCount</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前页&quot;</span> + listFactory.getCurPage());</span><br><span class="line">            handlePageDate(data, threadCount);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//计算任务进度</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br><span class="line">            <span class="comment">//每2秒打印一次各个线程的处理进度</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (MKTask mkTask : taskList) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> mkTask.getCur();</span><br><span class="line">                sum = sum + cur;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">DecimalFormat</span> <span class="variable">dF</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;0.00&quot;</span>);</span><br><span class="line">            <span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> (<span class="type">float</span>) sum / total;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (f == <span class="number">1.0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;全部任务完成&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;任务处理进度 &quot;</span> + dF.format(f * <span class="number">100</span>) + <span class="string">&quot;%&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handlePageDate</span><span class="params">(List&lt;String&gt; data, <span class="type">int</span> threadCount)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> data.size();</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//分成 segment 份，需要 segment 个线程处理</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">segment</span> <span class="operator">=</span> (<span class="type">int</span>) Math.ceil((<span class="type">double</span>) pageSize / threadCount);</span><br><span class="line"> </span><br><span class="line">        System.out.println(<span class="string">&quot;当前页数据 &quot;</span> + data + <span class="string">&quot; 一共有 &quot;</span> + pageSize + <span class="string">&quot; 条, 每个线程处理 &quot;</span> + threadCount + <span class="string">&quot; 条数据, 需要 &quot;</span> + segment + <span class="string">&quot; 个线程处理&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; segment; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> i * threadCount;</span><br><span class="line">            <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> (i == segment - <span class="number">1</span>) ? pageSize : (start + threadCount);</span><br><span class="line"> </span><br><span class="line">            List&lt;String&gt; subList = data.subList(start, end);</span><br><span class="line">            <span class="type">MKTask</span> <span class="variable">mkTask</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MKTask</span>(subList);</span><br><span class="line">            taskList.add(mkTask);</span><br><span class="line">            System.out.println(start + <span class="string">&quot; - &quot;</span> + end + <span class="string">&quot; 范围数据 &quot;</span> + subList + <span class="string">&quot; 交给一条线程处理&quot;</span>);</span><br><span class="line">            ThreadUtil.execute(mkTask);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">全部数据 <span class="selector-attr">[9, 1, 2, 1, 3, 5, 8, 3, 9, 6, 8, 7, 5, 5, 1, 1, 5, 4, 9, 4, 2, 7, 8, 8, 5, 1, 4, 3, 8, 1, 2, 4, 2, 4, 4, 8, 8, 4, 4, 5, 3, 3, 6, 4, 7, 6, 5, 4, 1, 8, 4, 3, 6, 7, 7, 4, 5, 3, 9, 9, 5, 5, 6, 1, 4, 1, 9, 3, 5, 1, 1, 7, 9, 4, 9, 2, 8, 7, 6, 6, 4, 1, 6, 6, 9, 1, 5, 2, 1, 1, 8, 1, 6, 3, 1, 8, 4]</span></span><br><span class="line">当前页<span class="number">1</span></span><br><span class="line">当前页数据 <span class="selector-attr">[9, 1, 2, 1, 3, 5, 8, 3, 9, 6, 8, 7, 5, 5, 1, 1, 5, 4, 9, 4]</span> 一共有 <span class="number">20</span> 条, 每个线程处理 <span class="number">5</span> 条数据, 需要 <span class="number">4</span> 个线程处理</span><br><span class="line"><span class="number">0</span> - <span class="number">5</span> 范围数据 <span class="selector-attr">[9, 1, 2, 1, 3]</span> 交给一条线程处理</span><br><span class="line"><span class="number">5</span> - <span class="number">10</span> 范围数据 <span class="selector-attr">[5, 8, 3, 9, 6]</span> 交给一条线程处理</span><br><span class="line"><span class="number">10</span> - <span class="number">15</span> 范围数据 <span class="selector-attr">[8, 7, 5, 5, 1]</span> 交给一条线程处理</span><br><span class="line"><span class="number">15</span> - <span class="number">20</span> 范围数据 <span class="selector-attr">[1, 5, 4, 9, 4]</span> 交给一条线程处理</span><br><span class="line">当前页<span class="number">2</span></span><br><span class="line">当前页数据 <span class="selector-attr">[2, 7, 8, 8, 5, 1, 4, 3, 8, 1, 2, 4, 2, 4, 4, 8, 8, 4, 4, 5]</span> 一共有 <span class="number">20</span> 条, 每个线程处理 <span class="number">5</span> 条数据, 需要 <span class="number">4</span> 个线程处理</span><br><span class="line"><span class="number">0</span> - <span class="number">5</span> 范围数据 <span class="selector-attr">[2, 7, 8, 8, 5]</span> 交给一条线程处理</span><br><span class="line"><span class="number">5</span> - <span class="number">10</span> 范围数据 <span class="selector-attr">[1, 4, 3, 8, 1]</span> 交给一条线程处理</span><br><span class="line"><span class="number">10</span> - <span class="number">15</span> 范围数据 <span class="selector-attr">[2, 4, 2, 4, 4]</span> 交给一条线程处理</span><br><span class="line"><span class="number">15</span> - <span class="number">20</span> 范围数据 <span class="selector-attr">[8, 8, 4, 4, 5]</span> 交给一条线程处理</span><br><span class="line">当前页<span class="number">3</span></span><br><span class="line">当前页数据 <span class="selector-attr">[3, 3, 6, 4, 7, 6, 5, 4, 1, 8, 4, 3, 6, 7, 7, 4, 5, 3, 9, 9]</span> 一共有 <span class="number">20</span> 条, 每个线程处理 <span class="number">5</span> 条数据, 需要 <span class="number">4</span> 个线程处理</span><br><span class="line"><span class="number">0</span> - <span class="number">5</span> 范围数据 <span class="selector-attr">[3, 3, 6, 4, 7]</span> 交给一条线程处理</span><br><span class="line"><span class="number">5</span> - <span class="number">10</span> 范围数据 <span class="selector-attr">[6, 5, 4, 1, 8]</span> 交给一条线程处理</span><br><span class="line"><span class="number">10</span> - <span class="number">15</span> 范围数据 <span class="selector-attr">[4, 3, 6, 7, 7]</span> 交给一条线程处理</span><br><span class="line"><span class="number">15</span> - <span class="number">20</span> 范围数据 <span class="selector-attr">[4, 5, 3, 9, 9]</span> 交给一条线程处理</span><br><span class="line">当前页<span class="number">4</span></span><br><span class="line">当前页数据 <span class="selector-attr">[5, 5, 6, 1, 4, 1, 9, 3, 5, 1, 1, 7, 9, 4, 9, 2, 8, 7, 6, 6]</span> 一共有 <span class="number">20</span> 条, 每个线程处理 <span class="number">5</span> 条数据, 需要 <span class="number">4</span> 个线程处理</span><br><span class="line"><span class="number">0</span> - <span class="number">5</span> 范围数据 <span class="selector-attr">[5, 5, 6, 1, 4]</span> 交给一条线程处理</span><br><span class="line"><span class="number">5</span> - <span class="number">10</span> 范围数据 <span class="selector-attr">[1, 9, 3, 5, 1]</span> 交给一条线程处理</span><br><span class="line"><span class="number">10</span> - <span class="number">15</span> 范围数据 <span class="selector-attr">[1, 7, 9, 4, 9]</span> 交给一条线程处理</span><br><span class="line"><span class="number">15</span> - <span class="number">20</span> 范围数据 <span class="selector-attr">[2, 8, 7, 6, 6]</span> 交给一条线程处理</span><br><span class="line">当前页<span class="number">5</span></span><br><span class="line">当前页数据 <span class="selector-attr">[4, 1, 6, 6, 9, 1, 5, 2, 1, 1, 8, 1, 6, 3, 1, 8, 4]</span> 一共有 <span class="number">17</span> 条, 每个线程处理 <span class="number">5</span> 条数据, 需要 <span class="number">4</span> 个线程处理</span><br><span class="line"><span class="number">0</span> - <span class="number">5</span> 范围数据 <span class="selector-attr">[4, 1, 6, 6, 9]</span> 交给一条线程处理</span><br><span class="line"><span class="number">5</span> - <span class="number">10</span> 范围数据 <span class="selector-attr">[1, 5, 2, 1, 1]</span> 交给一条线程处理</span><br><span class="line"><span class="number">10</span> - <span class="number">15</span> 范围数据 <span class="selector-attr">[8, 1, 6, 3, 1]</span> 交给一条线程处理</span><br><span class="line"><span class="number">15</span> - <span class="number">17</span> 范围数据 <span class="selector-attr">[8, 4]</span> 交给一条线程处理</span><br><span class="line">任务处理进度 <span class="number">48.45%</span></span><br><span class="line">任务处理进度 <span class="number">70.10%</span></span><br><span class="line">任务处理进度 <span class="number">87.63%</span></span><br><span class="line">任务处理进度 <span class="number">96.91%</span></span><br><span class="line">全部任务完成</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Edge浏览器扩展</title>
    <url>/2022/03/19/Java/%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="Edge浏览器扩展"><a href="#Edge浏览器扩展" class="headerlink" title="Edge浏览器扩展"></a>Edge浏览器扩展</h2><p><img src="/%E6%89%A9%E5%B1%95/image-20220302031950262.png" alt="image-20220302031950262"></p>
]]></content>
      <categories>
        <category>浏览器扩展</category>
      </categories>
      <tags>
        <tag>浏览器扩展</tag>
      </tags>
  </entry>
  <entry>
    <title>油猴脚本</title>
    <url>/2022/03/19/Java/%E6%B5%8F%E8%A7%88%E5%99%A8/%E6%B2%B9%E7%8C%B4%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="油猴脚本"><a href="#油猴脚本" class="headerlink" title="油猴脚本"></a>油猴脚本</h1><p><img src="/%E6%B2%B9%E7%8C%B4%E8%84%9A%E6%9C%AC/image-20220302031852407.png" alt="image-20220302031852407"></p>
]]></content>
      <categories>
        <category>油猴脚本</category>
      </categories>
      <tags>
        <tag>浏览器扩展</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么使用消息队列</title>
    <url>/2021/06/01/Java/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<h2 id="1-2-AMQP-和-JMS"><a href="#1-2-AMQP-和-JMS" class="headerlink" title="1.2. AMQP 和 JMS"></a>1.2. AMQP 和 JMS</h2><p>MQ是消息通信的模型；实现MQ的大致有两种主流方式：AMQP、JMS。</p>
<h3 id="1-2-1-AMQP"><a href="#1-2-1-AMQP" class="headerlink" title="1.2.1. AMQP"></a>1.2.1. AMQP</h3><p>AMQP是一种协议，更准确的说是一种binary wire-level protocol（链接协议）。这是其和JMS的本质差别，</p>
<p>AMQP不从API层进行限定，而是直接定义网络交换的数据格式。</p>
<h3 id="1-2-2-JMS"><a href="#1-2-2-JMS" class="headerlink" title="1.2.2. JMS"></a>1.2.2. JMS</h3><p>JMS即Java消息服务（JavaMessage Service）应用程序接口，</p>
<p>是一个Java平台中关于面向消息中间件（MOM）的API，用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。</p>
<h3 id="1-2-3-AMQP-与-JMS-区别"><a href="#1-2-3-AMQP-与-JMS-区别" class="headerlink" title="1.2.3. AMQP 与 JMS 区别"></a>1.2.3. AMQP 与 JMS 区别</h3><ul>
<li>JMS是<strong>定义</strong>了统一的<strong>接口</strong>，来对消息操作进行统一；AMQP是通过<strong>规定协议</strong>来统一数据交互的格式</li>
<li>JMS限定了必须使用<strong>Java语言</strong>；AMQP只是协议，不规定实现方式，因此是<strong>跨语言的</strong>。</li>
<li>JMS规定了<strong>两种消息模式</strong>；而AMQP的<strong>消息模式更加丰富</strong></li>
</ul>
<h4 id="JMS-两种消息模型"><a href="#JMS-两种消息模型" class="headerlink" title="JMS 两种消息模型"></a>JMS 两种消息模型</h4><p><strong>① 点到点（P2P）模型</strong></p>
<p><img src="/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/%E9%98%9F%E5%88%97%E6%A8%A1%E5%9E%8B23.png" alt="队列模型"></p>
<p>使用**队列（Queue）**作为消息通信载体；满足**生产者与消费者模式**，一条消息只能被一个消费者使用，未被消费的消息在队列中保留直到被消费或超时。比如：我们生产者发送 100 条消息的话，两个消费者来消费一般情况下两个消费者会按照消息发送的顺序各自消费一半（也就是你一个我一个的消费。）</p>
<p><strong>② 发布&#x2F;订阅（Pub&#x2F;Sub）模型</strong></p>
<p><img src="/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%9E%8B.png" alt="发布订阅模型"></p>
<p>发布订阅模型（Pub&#x2F;Sub） 使用<strong>主题（Topic）**作为消息通信载体，类似于**广播模式**；发布者发布一条消息，该消息通过主题传递给所有的订阅者，</strong>在一条消息广播之后才订阅的用户则是收不到该条消息的**。</p>
<h1 id="为什么使用消息队列"><a href="#为什么使用消息队列" class="headerlink" title="为什么使用消息队列"></a>为什么使用消息队列</h1><p>先来说一下为什么要使用消息队列，六个字总结：解耦、异步、消峰。</p>
<p>1）<strong>「解耦」</strong></p>
<p>传统模式下系统间的耦合性太强。怎么说呢，举个例子：系统 A 通过接口调用发送数据到 B、C、D 三个系统，如果将来 E 系统接入或者 B 系统不需要接入了，那么系统 A 还需要修改代码，非常麻烦。</p>
<img src="%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97kafka/image-20220226165123724.png" alt="image-20220226165123724" style="zoom:67%;" />

<p>如果系统 A 产生了一条比较关键的数据，那么它就要时时刻刻考虑 B、C、D、E 四个系统如果挂了该咋办？这条数据它们是否都收到了？显然，系统 A 跟其它系统严重耦合。</p>
<p>而如果我们将数据（消息）写入消息队列，需要消息的系统直接自己从消息队列中消费。这样下来，系统 A 就不需要去考虑要给谁发送数据，不需要去维护这个代码，也不需要考虑其他系统是否调用成功、失败超时等情况，反正我只负责生产，别的我不管。</p>
<img src="%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97kafka/image-20220226165106304.png" alt="image-20220226165106304" style="zoom:50%;" />

<p>2）<strong>「异步」</strong></p>
<p>先来看传统同步的情况，举个例子：系统 A 接收一个用户请求，需要进行写库操作，还需要同样的在 B、C、D 三个系统中进行写库操作。如果 A 自己本地写库只要 1ms，而 B、C、D 三个系统写库分别要 100ms、200ms、300ms。最终请求总延时是 1 + 100 + 200 + 300 &#x3D; 601ms，用户体验大打折扣。</p>
<img src="%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97kafka/image-20220226165136977.png" alt="image-20220226165136977" style="zoom:50%;" />

<p>如果使用消息队列，那么系统 A 就只需要发送 3 条消息到消息队列中就行了，假如耗时 5ms，A 系统从接受一个请求到返回响应给用户，总时长是 1 + 5 &#x3D; 6ms，对于用户而言，体验好感度直接拉满。</p>
<img src="%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97kafka/image-20220226165247399.png" alt="image-20220226165247399" style="zoom:50%;" />

<p>3）<strong>「消峰」</strong></p>
<p>如果没有使用缓存或者消息队列，那么系统就是直接基于数据库 MySQL 的，如果有那么一个高峰期，产生了大量的请求涌入 MySQL，毫无疑问，系统将会直接崩溃。</p>
<p>那如果我们使用消息队列，假设 MySQL 每秒钟最多处理 1k 条数据，而高峰期瞬间涌入了 5k 条数据，不过，这 5k 条数据涌入了消息队列。这样，我们的系统就可以从消息队列中根据数据库的能力慢慢的来拉取请求，不要超过自己每秒能处理的最大请求数量就行。</p>
<p>也就是说消息队列每秒钟 5k 个请求进来，1k 个请求出去，假设高峰期 1 个小时，那么这段时间就可能有几十万甚至几百万的请求积压在消息队列中。不过这个短暂的高峰期积压是完全可以的，因为高峰期过了之后，每秒钟就没有那么多的请求进入消息队列了，但是数据库依然会按照每秒 1k 个请求的速度处理。所以只要高峰期一过，系统就会快速的将积压的消息给处理掉。</p>
<img src="%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97kafka/image-20220226165323165.png" alt="image-20220226165323165" style="zoom: 50%;" />

<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      <categories>
        <category>消息队列</category>
      </categories>
      <tags>
        <tag>消息队列</tag>
      </tags>
  </entry>
  <entry>
    <title>RabbitMQ消息队列</title>
    <url>/2021/06/04/Java/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97RabbitMQ/</url>
    <content><![CDATA[<h2 id="RabbitMQ安装"><a href="#RabbitMQ安装" class="headerlink" title="RabbitMQ安装"></a>RabbitMQ安装</h2><ul>
<li>下载rabbitmq<code>3.7.15</code>的docker镜像：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull rabbitmq:3.7.15</span><br></pre></td></tr></table></figure>

<ul>
<li>使用如下命令启动RabbitMQ服务：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -p 5672:5672 -p 15672:15672 --name rabbitmq \</span><br><span class="line">-d rabbitmq:3.7.15</span><br></pre></td></tr></table></figure>

<ul>
<li>进入容器并开启管理功能：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it rabbitmq /bin/bash</span><br><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br></pre></td></tr></table></figure>

<p><img src="/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97RabbitMQ/mall_linux_deploy_02.png" alt="img"></p>
<ul>
<li>开启防火墙：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=15672/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<ul>
<li>访问地址查看是否安装成功：<a href="http://192.168.3.101:15672/">http://192.168.3.101:15672</a></li>
</ul>
<p><img src="/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97RabbitMQ/mall_linux_deploy_03.png" alt="img"></p>
<ul>
<li>输入账号密码并登录：guest guest</li>
<li>创建帐号并设置其角色为管理员：mall mall  administrator</li>
</ul>
<p><img src="/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97RabbitMQ/mall_linux_deploy_04.png" alt="img"></p>
<ul>
<li>创建一个新的虚拟host为：&#x2F;mall</li>
</ul>
<p><img src="/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97RabbitMQ/mall_linux_deploy_05.png" alt="img"></p>
<ul>
<li>点击mall用户进入用户配置页面</li>
</ul>
<p><img src="/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97RabbitMQ/mall_linux_deploy_06.png" alt="img"></p>
<ul>
<li>给mall用户配置该虚拟host的权限</li>
</ul>
<p><img src="/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97RabbitMQ/mall_linux_deploy_07.png" alt="img"></p>
<h2 id="业务场景说明"><a href="#业务场景说明" class="headerlink" title="业务场景说明"></a>业务场景说明</h2><blockquote>
<p>用于解决用户下单以后，订单超时如何取消订单的问题。</p>
</blockquote>
<ul>
<li>用户进行下单操作（会有锁定商品库存、使用优惠券、积分一系列的操作）；</li>
<li>生成订单，获取订单的id；</li>
<li>获取到设置的订单超时时间（假设设置的为60分钟不支付取消订单）；</li>
<li>按订单超时时间发送一个延迟消息给RabbitMQ，让它在订单超时后触发取消订单的操作；</li>
<li>如果用户没有支付，进行取消订单操作（释放锁定商品库存、返还优惠券、返回积分一系列操作）。</li>
</ul>
<h2 id="mall整合RabbitMQ实现延迟消息"><a href="#mall整合RabbitMQ实现延迟消息" class="headerlink" title="mall整合RabbitMQ实现延迟消息"></a>mall整合RabbitMQ实现延迟消息</h2><h3 id="在pom-xml中添加相关依赖"><a href="#在pom-xml中添加相关依赖" class="headerlink" title="在pom.xml中添加相关依赖"></a>在pom.xml中添加相关依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--消息队列相关依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--lombok依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="修改SpringBoot配置文件"><a href="#修改SpringBoot配置文件" class="headerlink" title="修改SpringBoot配置文件"></a>修改SpringBoot配置文件</h3><blockquote>
<p>修改application.yml文件，在spring节点下添加RabbitMQ相关配置。</p>
</blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">rabbitmq:</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">localhost</span> <span class="comment"># rabbitmq的连接地址</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">5672</span> <span class="comment"># rabbitmq的连接端口号</span></span><br><span class="line">  <span class="attr">virtual-host:</span> <span class="string">/mall</span> <span class="comment"># rabbitmq的虚拟host</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">mall</span> <span class="comment"># rabbitmq的用户名</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">mall</span> <span class="comment"># rabbitmq的密码</span></span><br><span class="line">  <span class="attr">publisher-confirms:</span> <span class="literal">true</span> <span class="comment">#如果对异步消息需要回调必须设置为trueCopy to clipboardErrorCopied</span></span><br></pre></td></tr></table></figure>

<h3 id="添加消息队列的枚举配置类QueueEnum"><a href="#添加消息队列的枚举配置类QueueEnum" class="headerlink" title="添加消息队列的枚举配置类QueueEnum"></a>添加消息队列的枚举配置类QueueEnum</h3><blockquote>
<p>用于延迟消息队列及处理取消订单消息队列的常量定义，包括交换机名称、队列名称、路由键名称。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.macro.mall.tiny.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息队列枚举配置</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">QueueEnum</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息通知队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    QUEUE_ORDER_CANCEL(<span class="string">&quot;mall.order.direct&quot;</span>, <span class="string">&quot;mall.order.cancel&quot;</span>, <span class="string">&quot;mall.order.cancel&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息通知ttl队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    QUEUE_TTL_ORDER_CANCEL(<span class="string">&quot;mall.order.direct.ttl&quot;</span>, <span class="string">&quot;mall.order.cancel.ttl&quot;</span>, <span class="string">&quot;mall.order.cancel.ttl&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String exchange;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 路由键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String routeKey;</span><br><span class="line"></span><br><span class="line">    QueueEnum(String exchange, String name, String routeKey) &#123;</span><br><span class="line">        <span class="built_in">this</span>.exchange = exchange;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.routeKey = routeKey;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="添加RabbitMQ的配置"><a href="#添加RabbitMQ的配置" class="headerlink" title="添加RabbitMQ的配置"></a>添加RabbitMQ的配置</h3><blockquote>
<p>用于配置交换机、队列及队列与交换机的绑定关系。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.macro.mall.tiny.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.dto.QueueEnum;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息队列配置</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMqConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订单消息实际消费队列所绑定的交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    DirectExchange <span class="title function_">orderDirect</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (DirectExchange) ExchangeBuilder</span><br><span class="line">                .directExchange(QueueEnum.QUEUE_ORDER_CANCEL.getExchange())</span><br><span class="line">                .durable(<span class="literal">true</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订单延迟队列队列所绑定的交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    DirectExchange <span class="title function_">orderTtlDirect</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (DirectExchange) ExchangeBuilder</span><br><span class="line">                .directExchange(QueueEnum.QUEUE_TTL_ORDER_CANCEL.getExchange())</span><br><span class="line">                .durable(<span class="literal">true</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订单实际消费队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">orderQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(QueueEnum.QUEUE_ORDER_CANCEL.getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订单延迟队列（死信队列）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">orderTtlQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> QueueBuilder</span><br><span class="line">                .durable(QueueEnum.QUEUE_TTL_ORDER_CANCEL.getName())</span><br><span class="line">                .withArgument(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, QueueEnum.QUEUE_ORDER_CANCEL.getExchange())<span class="comment">//到期后转发的交换机</span></span><br><span class="line">                .withArgument(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, QueueEnum.QUEUE_ORDER_CANCEL.getRouteKey())<span class="comment">//到期后转发的路由键</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将订单队列绑定到交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Binding <span class="title function_">orderBinding</span><span class="params">(DirectExchange orderDirect,Queue orderQueue)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder</span><br><span class="line">                .bind(orderQueue)</span><br><span class="line">                .to(orderDirect)</span><br><span class="line">                .with(QueueEnum.QUEUE_ORDER_CANCEL.getRouteKey());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将订单延迟队列绑定到交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Binding <span class="title function_">orderTtlBinding</span><span class="params">(DirectExchange orderTtlDirect,Queue orderTtlQueue)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder</span><br><span class="line">                .bind(orderTtlQueue)</span><br><span class="line">                .to(orderTtlDirect)</span><br><span class="line">                .with(QueueEnum.QUEUE_TTL_ORDER_CANCEL.getRouteKey());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="在RabbitMQ管理页面可以看到以下交换机和队列"><a href="#在RabbitMQ管理页面可以看到以下交换机和队列" class="headerlink" title="在RabbitMQ管理页面可以看到以下交换机和队列"></a>在RabbitMQ管理页面可以看到以下交换机和队列</h4><p><img src="/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97RabbitMQ/arch_screen_62.png" alt="img"> <img src="/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97RabbitMQ/arch_screen_63.png" alt="img"></p>
<p><img src="/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97RabbitMQ/arch_screen_64.png" alt="img"> <img src="/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97RabbitMQ/arch_screen_65.png" alt="img"></p>
<h4 id="交换机及队列说明"><a href="#交换机及队列说明" class="headerlink" title="交换机及队列说明"></a>交换机及队列说明</h4><ul>
<li>mall.order.direct（取消订单消息队列所绑定的交换机）:绑定的队列为mall.order.cancel，一旦有消息以mall.order.cancel为路由键发过来，会发送到此队列。</li>
<li>mall.order.direct.ttl（订单延迟消息队列所绑定的交换机）:绑定的队列为mall.order.cancel.ttl，一旦有消息以mall.order.cancel.ttl为路由键发送过来，会转发到此队列，并在此队列保存一定时间，等到超时后会自动将消息发送到mall.order.cancel（取消订单消息消费队列）。</li>
</ul>
<h3 id="添加延迟消息的发送者CancelOrderSender"><a href="#添加延迟消息的发送者CancelOrderSender" class="headerlink" title="添加延迟消息的发送者CancelOrderSender"></a>添加延迟消息的发送者CancelOrderSender</h3><blockquote>
<p>用于向订单延迟消息队列（mall.order.cancel.ttl）里发送消息。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.macro.mall.tiny.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.dto.QueueEnum;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.AmqpException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.AmqpTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.MessagePostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 取消订单消息的发出者</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CancelOrderSender</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span>LoggerFactory.getLogger(CancelOrderSender.class);</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(Long orderId,<span class="keyword">final</span> <span class="type">long</span> delayTimes)</span>&#123;</span><br><span class="line">        <span class="comment">//给延迟队列发送消息</span></span><br><span class="line">        amqpTemplate.convertAndSend(QueueEnum.QUEUE_TTL_ORDER_CANCEL.getExchange(), QueueEnum.QUEUE_TTL_ORDER_CANCEL.getRouteKey(), orderId, <span class="keyword">new</span> <span class="title class_">MessagePostProcessor</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Message <span class="title function_">postProcessMessage</span><span class="params">(Message message)</span> <span class="keyword">throws</span> AmqpException &#123;</span><br><span class="line">                <span class="comment">//给消息设置延迟毫秒值</span></span><br><span class="line">                message.getMessageProperties().setExpiration(String.valueOf(delayTimes));</span><br><span class="line">                <span class="keyword">return</span> message;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        LOGGER.info(<span class="string">&quot;send delay message orderId:&#123;&#125;&quot;</span>,orderId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="添加取消订单消息的接收者CancelOrderReceiver"><a href="#添加取消订单消息的接收者CancelOrderReceiver" class="headerlink" title="添加取消订单消息的接收者CancelOrderReceiver"></a>添加取消订单消息的接收者CancelOrderReceiver</h3><blockquote>
<p>用于从取消订单的消息队列（mall.order.cancel）里接收消息。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.macro.mall.tiny.component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.service.OmsPortalOrderService;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 取消订单消息的处理者</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;mall.order.cancel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CancelOrderReceiver</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span>LoggerFactory.getLogger(CancelOrderReceiver.class);</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OmsPortalOrderService portalOrderService;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(Long orderId)</span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">&quot;receive delay message orderId:&#123;&#125;&quot;</span>,orderId);</span><br><span class="line">        portalOrderService.cancelOrder(orderId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="添加OmsPortalOrderService接口"><a href="#添加OmsPortalOrderService接口" class="headerlink" title="添加OmsPortalOrderService接口"></a>添加OmsPortalOrderService接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.macro.mall.tiny.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.common.api.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.dto.OrderParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前台订单管理Service</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OmsPortalOrderService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据提交信息生成订单</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    CommonResult <span class="title function_">generateOrder</span><span class="params">(OrderParam orderParam)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取消单个超时订单</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">cancelOrder</span><span class="params">(Long orderId)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="添加OmsPortalOrderService的实现类OmsPortalOrderServiceImpl"><a href="#添加OmsPortalOrderService的实现类OmsPortalOrderServiceImpl" class="headerlink" title="添加OmsPortalOrderService的实现类OmsPortalOrderServiceImpl"></a>添加OmsPortalOrderService的实现类OmsPortalOrderServiceImpl</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.macro.mall.tiny.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.common.api.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.component.CancelOrderSender;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.dto.OrderParam;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.service.OmsPortalOrderService;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前台订单管理Service</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OmsPortalOrderServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">OmsPortalOrderService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(OmsPortalOrderServiceImpl.class);</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CancelOrderSender cancelOrderSender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">generateOrder</span><span class="params">(OrderParam orderParam)</span> &#123;</span><br><span class="line">        <span class="comment">//todo 执行一系类下单操作，具体参考mall项目</span></span><br><span class="line">        LOGGER.info(<span class="string">&quot;process generateOrder&quot;</span>);</span><br><span class="line">        <span class="comment">//下单完成后开启一个延迟消息，用于当用户没有付款时取消订单（orderId应该在下单后生成）</span></span><br><span class="line">        sendDelayMessageCancelOrder(<span class="number">11L</span>);</span><br><span class="line">        <span class="keyword">return</span> CommonResult.success(<span class="literal">null</span>, <span class="string">&quot;下单成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cancelOrder</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">        <span class="comment">//todo 执行一系类取消订单操作，具体参考mall项目</span></span><br><span class="line">        LOGGER.info(<span class="string">&quot;process cancelOrder orderId:&#123;&#125;&quot;</span>,orderId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendDelayMessageCancelOrder</span><span class="params">(Long orderId)</span> &#123;</span><br><span class="line">        <span class="comment">//获取订单超时时间，假设为60分钟</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">delayTimes</span> <span class="operator">=</span> <span class="number">30</span> * <span class="number">1000</span>;</span><br><span class="line">        <span class="comment">//发送延迟消息</span></span><br><span class="line">        cancelOrderSender.sendMessage(orderId, delayTimes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="添加OmsPortalOrderController定义接口"><a href="#添加OmsPortalOrderController定义接口" class="headerlink" title="添加OmsPortalOrderController定义接口]"></a>添加OmsPortalOrderController定义接口]</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.macro.mall.tiny.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.dto.OrderParam;</span><br><span class="line"><span class="keyword">import</span> com.macro.mall.tiny.service.OmsPortalOrderService;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.Api;</span><br><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单管理Controller</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;OmsPortalOrderController&quot;, description = &quot;订单管理&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OmsPortalOrderController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OmsPortalOrderService portalOrderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据购物车信息生成订单&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/generateOrder&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">generateOrder</span><span class="params">(<span class="meta">@RequestBody</span> OrderParam orderParam)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> portalOrderService.generateOrder(orderParam);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="进行接口测试"><a href="#进行接口测试" class="headerlink" title="进行接口测试"></a>进行接口测试</h2><h3 id="调用下单接口"><a href="#调用下单接口" class="headerlink" title="调用下单接口"></a>调用下单接口</h3><p>注意：已经将延迟消息时间设置为30秒</p>
<p><img src="/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97RabbitMQ/arch_screen_49.png" alt="img"></p>
<p><img src="/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97RabbitMQ/arch_screen_50.png" alt="img"></p>
<p><img src="/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97RabbitMQ/arch_screen_51.png" alt="img"></p>
<h2 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h2><h4 id="1、引入-Spring-boot-starter-amqp"><a href="#1、引入-Spring-boot-starter-amqp" class="headerlink" title="1、引入 Spring-boot-starter-amqp"></a>1、引入 Spring-boot-starter-amqp</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2、application-yml配置"><a href="#2、application-yml配置" class="headerlink" title="2、application.yml配置"></a>2、application.yml配置</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.10</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure>

<h4 id="3、测试RabbitMQ"><a href="#3、测试RabbitMQ" class="headerlink" title="3、测试RabbitMQ"></a>3、测试RabbitMQ</h4><h5 id="1、AmqpAdmin-管理组件"><a href="#1、AmqpAdmin-管理组件" class="headerlink" title="1、AmqpAdmin:管理组件"></a>1、AmqpAdmin:管理组件</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建Exchange</span></span><br><span class="line"><span class="comment">     * 1、如何利用Exchange,Queue,Binding</span></span><br><span class="line"><span class="comment">     *      1、使用AmqpAdmin进行创建</span></span><br><span class="line"><span class="comment">     * 2、如何收发信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//	public DirectExchange(</span></span><br><span class="line">        <span class="comment">//	String name, 交换机的名字</span></span><br><span class="line">        <span class="comment">//	boolean durable, 是否持久</span></span><br><span class="line">        <span class="comment">//	boolean autoDelete, 是否自动删除</span></span><br><span class="line">        <span class="comment">//	Map&lt;String, Object&gt; arguments)</span></span><br><span class="line">        <span class="comment">//	&#123;</span></span><br><span class="line">        <span class="type">DirectExchange</span> <span class="variable">directExchange</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(<span class="string">&quot;hello-java.exchange&quot;</span>,<span class="literal">true</span>,<span class="literal">false</span>);</span><br><span class="line">        amqpAdmin.declareExchange(directExchange);</span><br><span class="line">        log.info(<span class="string">&quot;Exchange[&#123;&#125;]创建成功：&quot;</span>,<span class="string">&quot;hello-java.exchange&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// public Queue(String name, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments) &#123;</span></span><br><span class="line">        <span class="type">Queue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;hello-java-queue&quot;</span>,<span class="literal">true</span>,<span class="literal">false</span>,<span class="literal">false</span>);</span><br><span class="line">        amqpAdmin.declareQueue(queue);</span><br><span class="line">        log.info(<span class="string">&quot;Queue[&#123;&#125;]:&quot;</span>,<span class="string">&quot;创建成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createBinding</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// public Binding(String destination, 目的地</span></span><br><span class="line">        <span class="comment">// DestinationType destinationType, 目的地类型</span></span><br><span class="line">        <span class="comment">// String exchange,交换机</span></span><br><span class="line">        <span class="comment">// String routingKey,//路由键</span></span><br><span class="line">        <span class="type">Binding</span> <span class="variable">binding</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Binding</span>(<span class="string">&quot;hello-java-queue&quot;</span>,</span><br><span class="line">                Binding.DestinationType.QUEUE,</span><br><span class="line">                <span class="string">&quot;hello-java.exchange&quot;</span>,</span><br><span class="line">                <span class="string">&quot;hello.java&quot;</span>,<span class="literal">null</span>);</span><br><span class="line">        amqpAdmin.declareBinding(binding);</span><br><span class="line">        log.info(<span class="string">&quot;Binding[&#123;&#125;]创建成功&quot;</span>,<span class="string">&quot;hello-java-binding&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h5 id="2、RabbitTemplate：消息发送处理组件"><a href="#2、RabbitTemplate：消息发送处理组件" class="headerlink" title="2、RabbitTemplate：消息发送处理组件"></a>2、RabbitTemplate：消息发送处理组件</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessageTest</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">           <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>) &#123;</span><br><span class="line">               <span class="type">OrderReturnReasonEntity</span> <span class="variable">reasonEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderReturnReasonEntity</span>();</span><br><span class="line">               reasonEntity.setId(<span class="number">1l</span>);</span><br><span class="line">               reasonEntity.setCreateTime(<span class="keyword">new</span> <span class="title class_">java</span>.util.Date());</span><br><span class="line">               reasonEntity.setName(<span class="string">&quot;哈哈&quot;</span>);</span><br><span class="line">               <span class="comment">//</span></span><br><span class="line">               <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">               <span class="comment">// 发送的对象类型的消息，可以是一个json</span></span><br><span class="line">               rabbitTemplate.convertAndSend(<span class="string">&quot;hello-java.exchange&quot;</span>,<span class="string">&quot;hello.java&quot;</span>,reasonEntity);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="type">OrderEntity</span> <span class="variable">orderEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderEntity</span>();</span><br><span class="line">               orderEntity.setOrderSn(UUID.randomUUID().toString());</span><br><span class="line">               rabbitTemplate.convertAndSend(<span class="string">&quot;hello-java.exchange&quot;</span>,<span class="string">&quot;hello.java&quot;</span>,orderEntity);</span><br><span class="line">           &#125;</span><br><span class="line">           log.info(<span class="string">&quot;消息发送完成&#123;&#125;&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>消息队列</category>
      </categories>
      <tags>
        <tag>消息队列</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么选择 Kafka消息队列</title>
    <url>/2021/06/02/Java/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97kafka/</url>
    <content><![CDATA[<h1 id="为什么选择-Kafka"><a href="#为什么选择-Kafka" class="headerlink" title="为什么选择 Kafka"></a>为什么选择 Kafka</h1><p>再来看看在 Echo 这个项目中，哪些地方使用了消息队列也就是 Kafka：</p>
<img src="%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97kafka/image-20220226165408619.png" alt="image-20220226165408619" style="zoom:80%;" />

<ul>
<li>评论、点赞、关注事件触发通知</li>
<li>发帖事件触发 Elasticsearch 服务器中相应的数据更新</li>
<li>删帖事件触发 Elasticsearch 服务器中相应的数据更新</li>
</ul>
<p>实际上在早期的时候 Kafka 并不是一个合格的消息队列，不过现在已经足够优秀。</p>
<p>不说我们这个用户量比较小的论坛，从大体量的论坛项目来考虑，我觉得 Kafka 比较适合的原因有如下：</p>
<p>1）Kafka 天生支持分布式，Broker、Producer 和 Consumer 都原生自动支持分布式；</p>
<p>2）Kafka 拥有多分区（Partition）和多副本（Replica）机制，能提供比较好的并发能力（负载均衡）以及较高的可用性和可靠性，理论上支持消息无限堆积；</p>
<p>3）而且，在一众消息队列里，Kafka 的性能是比较高的。</p>
<p>点赞、关注、私信等操作都会触发通知，在流量巨大的社交论坛网站中，这个系统通知的需求是非常庞大的，为保证系统的高性能，使用消息队列 Kafka 是个明智的选择。</p>
<h1 id="什么是Producer、Consumer、Broker、Topic、Partition？"><a href="#什么是Producer、Consumer、Broker、Topic、Partition？" class="headerlink" title="什么是Producer、Consumer、Broker、Topic、Partition？"></a>什么是Producer、Consumer、Broker、Topic、Partition？</h1><p>Kafka 将生产者发布的消息发送到 <strong>Topic（主题）</strong> 中，</p>
<p>需要这些消息的消费者可以订阅这些 <strong>Topic（主题）</strong>，如下图所示：</p>
<p><img src="/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97kafka/KafkaTopicPartitioning.png" alt="Kafka Topic Partition"></p>
<p>上面这张图也为我们引出了，Kafka 比较重要的几个概念：</p>
<ol>
<li><strong>Producer（生产者）</strong> : 产生消息的一方。</li>
<li><strong>Consumer（消费者）</strong> : 消费消息的一方。</li>
<li>Broker（代理）<strong>实例</strong> : 可以看作是一个独立的 Kafka 实例。多个 Kafka Broker 组成一个 Kafka Cluster。</li>
</ol>
<p>同时，你一定也注意到每个 Broker 中又包含了 Topic 以及 Partition 这两个重要的概念：</p>
<ul>
<li><p><strong>Topic（主题）</strong> : Producer 将消息发送到特定的主题，Consumer 通过订阅特定的 Topic(主题) 来消费消息。</p>
</li>
<li><p><strong>Partition（分区）</strong> : Partition 属于 Topic 的一部分。一个 Topic 可以有多个 Partition ，</p>
<p>并且同一 Topic 下的 Partition 可以分布在不同的 Broker 上，这也就表明一个 Topic 可以横跨多个 Broker 。这正如我上面所画的图一样。</p>
</li>
</ul>
<blockquote>
<p>划重点：**Kafka 中的 Partition（分区） 实际上可以对应成为消息队列中的队列。这样是不是更好理解一点？</p>
</blockquote>
<h1 id="队列模型了解吗？Kafka-的消息模型知道吗？"><a href="#队列模型了解吗？Kafka-的消息模型知道吗？" class="headerlink" title="队列模型了解吗？Kafka 的消息模型知道吗？"></a>队列模型了解吗？Kafka 的消息模型知道吗？</h1><blockquote>
<p>题外话：早期的 JMS 和 AMQP 属于消息服务领域权威组织所做的相关的标准，</p>
<p>但是，这些标准的进化跟不上消息队列的演进速度，这些标准实际上已经属于废弃状态。</p>
<p>所以，可能存在的情况是：不同的消息队列都有自己的一套消息模型。</p>
</blockquote>
<h4 id="队列模型：早期的消息模型"><a href="#队列模型：早期的消息模型" class="headerlink" title="队列模型：早期的消息模型"></a>队列模型：早期的消息模型</h4><p><img src="/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97kafka/%E9%98%9F%E5%88%97%E6%A8%A1%E5%9E%8B23-1645866333309.png" alt="队列模型"></p>
<p><strong>使用队列（Queue）作为消息通信载体，满足生产者与消费者模式，一条消息只能被一个消费者使用，未被消费的消息在队列中保留直到被消费或超时。</strong> 比如：我们生产者发送 100 条消息的话，两个消费者来消费一般情况下两个消费者会按照消息发送的顺序各自消费一半（也就是你一个我一个的消费。）</p>
<p><strong>队列模型存在的问题：</strong></p>
<p>假如我们存在这样一种情况：我们需要将生产者产生的消息分发给多个消费者，并且每个消费者都能接收到完整的消息内容。</p>
<p>这种情况，队列模型就不好解决了。很多比较杠精的人就说：我们可以为每个消费者创建一个单独的队列，让生产者发送多份。这是一种非常愚蠢的做法，浪费资源不说，还违背了使用消息队列的目的。</p>
<h4 id="发布-订阅模型-Kafka-消息模型"><a href="#发布-订阅模型-Kafka-消息模型" class="headerlink" title="发布-订阅模型:Kafka 消息模型"></a>发布-订阅模型:Kafka 消息模型</h4><p>发布-订阅模型主要是为了解决队列模型存在的问题。</p>
<p><img src="/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97kafka/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%9E%8B-1645866333310.png" alt="发布订阅模型"></p>
<p>发布订阅模型（Pub-Sub） 使用<strong>主题（Topic）</strong> 作为消息通信载体，类似于<strong>广播模式</strong>；发布者发布一条消息，该消息通过主题传递给所有的订阅者，<strong>在一条消息广播之后才订阅的用户则是收不到该条消息的</strong>。</p>
<p><strong>在发布 - 订阅模型中，如果只有一个订阅者，那它和队列模型就基本是一样的了。所以说，发布 - 订阅模型在功能层面上是可以兼容队列模型的。</strong></p>
<p><strong>Kafka 采用的就是发布 - 订阅模型。</strong></p>
<blockquote>
<p><strong>RocketMQ 的消息模型和 Kafka 基本是完全一样的。唯一的区别是 Kafka 中没有队列这个概念，与之对应的是 Partition（分区）。</strong></p>
</blockquote>
<h1 id="Kafka-的多副本机制了解吗？带来了什么好处？"><a href="#Kafka-的多副本机制了解吗？带来了什么好处？" class="headerlink" title="Kafka 的多副本机制了解吗？带来了什么好处？"></a>Kafka 的多副本机制了解吗？带来了什么好处？</h1><p>还有一点我觉得比较重要的是 Kafka 为分区（Partition）引入了多副本（Replica）机制。</p>
<p>分区（Partition）中的多个副本之间会有一个叫做 leader 的家伙，其他副本称为 follower。</p>
<p>我们发送的消息会被发送到 leader 副本，然后 follower 副本才能从 leader 副本中拉取消息进行同步。</p>
<blockquote>
<p>生产者和消费者只与 leader 副本交互。你可以理解为其他副本只是 leader 副本的拷贝，它们的存在只是为了保证消息存储的安全性。当 leader 副本发生故障时会从 follower 中选举出一个 leader,但是 follower 中如果有和 leader 同步程度达不到要求的参加不了 leader 的竞选。</p>
</blockquote>
<p><strong>Kafka 的多分区（Partition）以及多副本（Replica）机制有什么好处呢？</strong></p>
<ol>
<li>Kafka 通过给特定 Topic 指定多个 Partition, 而各个 Partition 可以分布在不同的 Broker 上, 这样便能提供比较好的并发能力（负载均衡）。</li>
<li>Partition 可以指定对应的 Replica 数, 这也极大地提高了消息存储的安全性, 提高了容灾能力，不过也相应的增加了所需要的存储空间。</li>
</ol>
<h1 id="Zookeeper-在-Kafka-中的作用知道吗？"><a href="#Zookeeper-在-Kafka-中的作用知道吗？" class="headerlink" title="Zookeeper 在 Kafka 中的作用知道吗？"></a>Zookeeper 在 Kafka 中的作用知道吗？</h1><blockquote>
<p><strong>要想搞懂 zookeeper 在 Kafka 中的作用 一定要自己搭建一个 Kafka 环境然后自己进 zookeeper 去看一下有哪些文件夹和 Kafka 有关，每个节点又保存了什么信息。</strong></p>
</blockquote>
<p>下图就是我的本地 Zookeeper ，它成功和我本地的 Kafka 关联上（以下文件夹结构借助 idea 插件 Zookeeper tool 实现）。</p>
<p><img src="/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97kafka/zookeeper-kafka.jpg" alt="img"></p>
<p>ZooKeeper 主要为 Kafka 提供元数据的管理的功能。</p>
<p>从图中我们可以看出，Zookeeper 主要为 Kafka 做了下面这些事情：</p>
<ol>
<li><strong>Broker 注册</strong> ：在 Zookeeper 上会有一个专门<strong>用来进行 Broker 服务器列表记录</strong>的节点。每个 Broker 在启动时，都会到 Zookeeper 上进行注册，即到 <code>/brokers/ids</code> 下创建属于自己的节点。每个 Broker 就会将自己的 IP 地址和端口等信息记录到该节点中去</li>
<li><strong>Topic 注册</strong> ： 在 Kafka 中，同一个<strong>Topic 的消息会被分成多个分区</strong>并将其分布在多个 Broker 上，<strong>这些分区信息及与 Broker 的对应关系</strong>也都是由 Zookeeper 在维护。比如我创建了一个名字为 my-topic 的主题并且它有两个分区，对应到 zookeeper 中会创建这些文件夹：<code>/brokers/topics/my-topic/Partitions/0</code>、<code>/brokers/topics/my-topic/Partitions/1</code></li>
<li><strong>负载均衡</strong> ：上面也说过了 Kafka 通过给特定 Topic 指定多个 Partition, 而各个 Partition 可以分布在不同的 Broker 上, 这样便能提供比较好的并发能力。 对于同一个 Topic 的不同 Partition，Kafka 会尽力将这些 Partition 分布到不同的 Broker 服务器上。当生产者产生消息后也会尽量投递到不同 Broker 的 Partition 里面。当 Consumer 消费的时候，Zookeeper 可以根据当前的 Partition 数量以及 Consumer 数量来实现动态负载均衡。</li>
<li>……</li>
</ol>
<h3 id="Kafka-如何保证消息的消费顺序？"><a href="#Kafka-如何保证消息的消费顺序？" class="headerlink" title="#Kafka 如何保证消息的消费顺序？"></a><a href="https://javaguide.cn/high-performance/message-queue/kafka%E7%9F%A5%E8%AF%86%E7%82%B9&%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/#kafka-%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF%E7%9A%84%E6%B6%88%E8%B4%B9%E9%A1%BA%E5%BA%8F">#</a>Kafka 如何保证消息的消费顺序？</h3><p>我们在使用消息队列的过程中经常有业务场景需要严格保证消息的消费顺序，比如我们同时发了 2 个消息，这 2 个消息对应的操作分别对应的数据库操作是：</p>
<ol>
<li>更改用户会员等级。</li>
<li>根据会员等级计算订单价格。</li>
</ol>
<p>假如这两条消息的消费顺序不一样造成的最终结果就会截然不同。</p>
<p>我们知道 Kafka 中 Partition(分区)是真正保存消息的地方，我们发送的消息都被放在了这里。而我们的 Partition(分区) 又存在于 Topic(主题) 这个概念中，并且我们可以给特定 Topic 指定多个 Partition。</p>
<p><img src="/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97kafka/KafkaTopicPartionsLayout.png" alt="img"></p>
<p>每次添加消息到 Partition(分区) 的时候都会采用尾加法，如上图所示。 <strong>Kafka 只能为我们保证 Partition(分区) 中的消息有序。</strong></p>
<blockquote>
<p>消息在被追加到 Partition(分区)的时候都会分配一个特定的偏移量（offset）。Kafka 通过偏移量（offset）来保证消息在分区内的顺序性。</p>
</blockquote>
<p>所以，我们就有一种很简单的保证消息消费顺序的方法：<strong>1 个 Topic 只对应一个 Partition</strong>。这样当然可以解决问题，但是破坏了 Kafka 的设计初衷。</p>
<p>Kafka 中发送 1 条消息的时候，可以指定 topic, partition, key,data（数据） 4 个参数。如果你发送消息的时候指定了 Partition 的话，所有消息都会被发送到指定的 Partition。并且，同一个 key 的消息可以保证只发送到同一个 partition，这个我们可以采用表&#x2F;对象的 id 来作为 key 。</p>
<p>总结一下，对于如何保证 Kafka 中消息消费的顺序，有了下面两种方法：</p>
<ol>
<li>1 个 Topic 只对应一个 Partition。</li>
<li>（推荐）发送消息的时候指定 key&#x2F;Partition。</li>
</ol>
<p>当然不仅仅只有上面两种方法，上面两种方法是我觉得比较好理解的，</p>
<h3 id="Kafka-如何保证消息不丢失"><a href="#Kafka-如何保证消息不丢失" class="headerlink" title="#Kafka 如何保证消息不丢失"></a><a href="https://javaguide.cn/high-performance/message-queue/kafka%E7%9F%A5%E8%AF%86%E7%82%B9&%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/#kafka-%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF%E4%B8%8D%E4%B8%A2%E5%A4%B1">#</a>Kafka 如何保证消息不丢失</h3><h4 id="生产者丢失消息的情况"><a href="#生产者丢失消息的情况" class="headerlink" title="#生产者丢失消息的情况"></a><a href="https://javaguide.cn/high-performance/message-queue/kafka%E7%9F%A5%E8%AF%86%E7%82%B9&%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/#%E7%94%9F%E4%BA%A7%E8%80%85%E4%B8%A2%E5%A4%B1%E6%B6%88%E6%81%AF%E7%9A%84%E6%83%85%E5%86%B5">#</a>生产者丢失消息的情况</h4><p>生产者(Producer) 调用<code>send</code>方法发送消息之后，消息可能因为网络问题并没有发送过去。</p>
<p>所以，我们不能默认在调用<code>send</code>方法发送消息之后消息发送成功了。为了确定消息是发送成功，我们要判断消息发送的结果。但是要注意的是 Kafka 生产者(Producer) 使用 <code>send</code> 方法发送消息实际上是异步的操作，我们可以通过 <code>get()</code>方法获取调用结果，但是这样也让它变为了同步操作，示例代码如下：</p>
<blockquote>
<p><strong>详细代码见我的这篇文章：<a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247486269&idx=2&sn=ec00417ad641dd8c3d145d74cafa09ce&chksm=cea244f6f9d5cde0c8eb233fcc4cf82e11acd06446719a7af55230649863a3ddd95f78d111de&token=1633957262&lang=zh_CN#rd">Kafka系列第三篇！10 分钟学会如何在 Spring Boot 程序中使用 Kafka 作为消息队列?(opens new window)</a></strong></p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SendResult&lt;String, Object&gt; sendResult = kafkaTemplate.send(topic, o).get();</span><br><span class="line"><span class="keyword">if</span> (sendResult.getRecordMetadata() != <span class="literal">null</span>) &#123;</span><br><span class="line">  logger.info(<span class="string">&quot;生产者成功发送消息到&quot;</span> + sendResult.getProducerRecord().topic() + <span class="string">&quot;-&gt; &quot;</span> + sendRe</span><br><span class="line">              sult.getProducerRecord().value().toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1<br>2<br>3<br>4<br>5</p>
<p>但是一般不推荐这么做！可以采用为其添加回调函数的形式，示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ListenableFuture&lt;SendResult&lt;String, Object&gt;&gt; future = kafkaTemplate.send(topic, o);</span><br><span class="line">future.addCallback(result -&gt; logger.info(<span class="string">&quot;生产者成功发送消息到topic:&#123;&#125; partition:&#123;&#125;的消息&quot;</span>, result.getRecordMetadata().topic(), result.getRecordMetadata().partition()),</span><br><span class="line">        ex -&gt; logger.error(<span class="string">&quot;生产者发送消失败，原因：&#123;&#125;&quot;</span>, ex.getMessage()));</span><br></pre></td></tr></table></figure>

<p>1<br>2<br>3</p>
<p>如果消息发送失败的话，我们检查失败的原因之后重新发送即可！</p>
<p><strong>另外这里推荐为 Producer 的<code>retries</code>（重试次数）设置一个比较合理的值，一般是 3 ，但是为了保证消息不丢失的话一般会设置比较大一点。设置完成之后，当出现网络问题之后能够自动重试消息发送，避免消息丢失。另外，建议还要设置重试间隔，因为间隔太小的话重试的效果就不明显了，网络波动一次你3次一下子就重试完了</strong></p>
<h4 id="消费者丢失消息的情况"><a href="#消费者丢失消息的情况" class="headerlink" title="#消费者丢失消息的情况"></a><a href="https://javaguide.cn/high-performance/message-queue/kafka%E7%9F%A5%E8%AF%86%E7%82%B9&%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/#%E6%B6%88%E8%B4%B9%E8%80%85%E4%B8%A2%E5%A4%B1%E6%B6%88%E6%81%AF%E7%9A%84%E6%83%85%E5%86%B5">#</a>消费者丢失消息的情况</h4><p>我们知道消息在被追加到 Partition(分区)的时候都会分配一个特定的偏移量（offset）。偏移量（offset)表示 Consumer 当前消费到的 Partition(分区)的所在的位置。Kafka 通过偏移量（offset）可以保证消息在分区内的顺序性。</p>
<p><img src="/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97kafka/kafka-offset.jpg" alt="kafka offset"></p>
<p>当消费者拉取到了分区的某个消息之后，消费者会自动提交了 offset。自动提交的话会有一个问题，试想一下，当消费者刚拿到这个消息准备进行真正消费的时候，突然挂掉了，消息实际上并没有被消费，但是 offset 却被自动提交了。</p>
<p><strong>解决办法也比较粗暴，我们手动关闭自动提交 offset，每次在真正消费完消息之后再自己手动提交 offset 。</strong> 但是，细心的朋友一定会发现，这样会带来消息被重新消费的问题。比如你刚刚消费完消息之后，还没提交 offset，结果自己挂掉了，那么这个消息理论上就会被消费两次。</p>
<h4 id="Kafka-弄丢了消息"><a href="#Kafka-弄丢了消息" class="headerlink" title="#Kafka 弄丢了消息"></a><a href="https://javaguide.cn/high-performance/message-queue/kafka%E7%9F%A5%E8%AF%86%E7%82%B9&%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/#kafka-%E5%BC%84%E4%B8%A2%E4%BA%86%E6%B6%88%E6%81%AF">#</a>Kafka 弄丢了消息</h4><p>我们知道 Kafka 为分区（Partition）引入了多副本（Replica）机制。分区（Partition）中的多个副本之间会有一个叫做 leader 的家伙，其他副本称为 follower。我们发送的消息会被发送到 leader 副本，然后 follower 副本才能从 leader 副本中拉取消息进行同步。生产者和消费者只与 leader 副本交互。你可以理解为其他副本只是 leader 副本的拷贝，它们的存在只是为了保证消息存储的安全性。</p>
<p><strong>试想一种情况：假如 leader 副本所在的 broker 突然挂掉，那么就要从 follower 副本重新选出一个 leader ，但是 leader 的数据还有一些没有被 follower 副本的同步的话，就会造成消息丢失。</strong></p>
<p><strong>设置 acks &#x3D; all</strong></p>
<p>解决办法就是我们设置 <strong>acks &#x3D; all</strong>。acks 是 Kafka 生产者(Producer) 很重要的一个参数。</p>
<p>acks 的默认值即为1，代表我们的消息被leader副本接收之后就算被成功发送。当我们配置 <strong>acks &#x3D; all</strong> 代表则所有副本都要接收到该消息之后该消息才算真正成功被发送。</p>
<p><strong>设置 replication.factor &gt;&#x3D; 3</strong></p>
<p>为了保证 leader 副本能有 follower 副本能同步消息，我们一般会为 topic 设置 <strong>replication.factor &gt;&#x3D; 3</strong>。这样就可以保证每个 分区(partition) 至少有 3 个副本。虽然造成了数据冗余，但是带来了数据的安全性。</p>
<p><strong>设置 min.insync.replicas &gt; 1</strong></p>
<p>一般情况下我们还需要设置 <strong>min.insync.replicas&gt; 1</strong> ，这样配置代表消息至少要被写入到 2 个副本才算是被成功发送。<strong>min.insync.replicas</strong> 的默认值为 1 ，在实际生产中应尽量避免默认值 1。</p>
<p>但是，为了保证整个 Kafka 服务的高可用性，你需要确保 <strong>replication.factor &gt; min.insync.replicas</strong> 。为什么呢？设想一下假如两者相等的话，只要是有一个副本挂掉，整个分区就无法正常工作了。这明显违反高可用性！一般推荐设置成 <strong>replication.factor &#x3D; min.insync.replicas + 1</strong>。</p>
<p><strong>设置 unclean.leader.election.enable &#x3D; false</strong></p>
<blockquote>
<p><strong>Kafka 0.11.0.0版本开始 unclean.leader.election.enable 参数的默认值由原来的true 改为false</strong></p>
</blockquote>
<p>我们最开始也说了我们发送的消息会被发送到 leader 副本，然后 follower 副本才能从 leader 副本中拉取消息进行同步。多个 follower 副本之间的消息同步情况不一样，当我们配置了 <strong>unclean.leader.election.enable &#x3D; false</strong> 的话，当 leader 副本发生故障时就不会从 follower 副本中和 leader 同步程度达不到要求的副本中选择出 leader ，这样降低了消息丢失的可能性。</p>
<h3 id="Kafka-如何保证消息不重复消费"><a href="#Kafka-如何保证消息不重复消费" class="headerlink" title="#Kafka 如何保证消息不重复消费"></a><a href="https://javaguide.cn/high-performance/message-queue/kafka%E7%9F%A5%E8%AF%86%E7%82%B9&%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/#kafka-%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%B6%88%E6%81%AF%E4%B8%8D%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9">#</a>Kafka 如何保证消息不重复消费</h3><p><strong>kafka出现消息重复消费的原因：</strong></p>
<ul>
<li>服务端侧已经消费的数据没有成功提交 offset（根本原因）。</li>
<li>Kafka 侧 由于服务端处理业务时间长或者网络链接等等原因让 Kafka 认为服务假死，触发了分区 rebalance。</li>
</ul>
<p><strong>解决方案：</strong></p>
<ul>
<li><p>消费消息服务做幂等校验，比如 Redis 的set、MySQL 的主键等天然的幂等功能。这种方法最有效。</p>
</li>
<li><p>将</p>
<p><code>enable.auto.commit</code></p>
<p>参数设置为 false，关闭自动提交，开发者在代码中手动提交 offset。那么这里会有个问题：</p>
<p>什么时候提交offset合适？</p>
<ul>
<li>处理完消息再提交：依旧有消息重复消费的风险，和自动提交一样</li>
<li>拉取到消息即提交：会有消息丢失的风险。允许消息延时的场景，一般会采用这种方式。然后，通过定时任务在业务不繁忙（比如凌晨）的时候做数据兜底。</li>
</ul>
</li>
</ul>
<h1 id="kafka的安装"><a href="#kafka的安装" class="headerlink" title="kafka的安装"></a>kafka的安装</h1><h2 id="1-下载镜像"><a href="#1-下载镜像" class="headerlink" title="1.下载镜像"></a>1.下载镜像</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull wurstmeister/zookeeper  </span><br><span class="line">docker pull wurstmeister/kafka  </span><br></pre></td></tr></table></figure>

<h2 id="2-启动zookeeper容器"><a href="#2-启动zookeeper容器" class="headerlink" title="2.启动zookeeper容器"></a>2.启动zookeeper容器</h2><blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name zookeeper -p 2181:2181 -v /etc/localtime:/etc/localtime wurstmeister/zookeeper</span><br></pre></td></tr></table></figure>
</blockquote>
<p># 如果想修改 zookeeper 配置文件 </p>
<p>docker exec -it name &#x2F;bin&#x2F;bash </p>
<p>cd &#x2F;opt&#x2F;zookeeper-3.4.13&#x2F;conf&#x2F;zoo.cfg</p>
<h2 id="3-启动kafka容器"><a href="#3-启动kafka容器" class="headerlink" title="3.启动kafka容器"></a>3.启动kafka容器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run  -d --name kafka -p 9092:9092 -e KAFKA_BROKER_ID=0 -e KAFKA_ZOOKEEPER_CONNECT=8.144.162.164:2181/kafka -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://8.144.162.164:9092 -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 -t wurstmeister/kafka</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-e KAFKA_BROKER_ID=0 在kafka集群中，每个kafka都有一个BROKER_ID来区分自己</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-e KAFKA_ZOOKEEPER_CONNECT=8.144.162.164:2181/kafka 配置zookeeper管理kafka的路径10.9.44.11:2181/kafka</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://8.144.162.164:9092 把kafka的地址端口注册给zookeeper</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 配置kafka的监听端口</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-v /etc/localtime:/etc/localtime 容器时间同步虚拟机的时间</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里面主要设置了4个参数</p>
<p>KAFKA_BROKER_ID&#x3D;0<br>KAFKA_ZOOKEEPER_CONNECT&#x3D;8.144.162.164:2181<br>KAFKA_ADVERTISED_LISTENERS&#x3D;PLAINTEXT:&#x2F;&#x2F;8.144.162.164:9092<br>KAFKA_LISTENERS&#x3D;PLAINTEXT:&#x2F;&#x2F;0.0.0.0:9092<br>中间两个参数的8.144.162.164改为宿主机器的IP地址，如果不这么设置，可能会导致在别的机器上访问不到kafka。</p>
<h2 id="4-测试kafka"><a href="#4-测试kafka" class="headerlink" title="4.测试kafka"></a>4.测试kafka</h2><p>进入kafka容器的命令行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it kafka /bin/bash</span><br></pre></td></tr></table></figure>

<p>进入kafka所在目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd opt/kafka_2.11-2.0.0/</span><br></pre></td></tr></table></figure>

<p>启动消息发送方</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./bin/kafka-console-producer.sh --broker-list localhost:9092 --topic testkafka</span><br></pre></td></tr></table></figure>

<p>克隆会话<br>进入kafka所在目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd opt/kafka_2.11-2.0.0/</span><br></pre></td></tr></table></figure>

<p>启动消息接收方</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic testkafka --from-beginning</span><br></pre></td></tr></table></figure>

<p>在消息发送方输入123456<br>在消息接收方查看<br>如果看到123456 消息发送完成</p>
<h2 id="5-集群搭建"><a href="#5-集群搭建" class="headerlink" title="5.集群搭建"></a>5.集群搭建</h2><p>使用docker命令可快速在同一台机器搭建多个kafka，只需要改变brokerId和端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run  -d --name kafka1 -p 9093:9093 -e KAFKA_BROKER_ID=1 -e KAFKA_ZOOKEEPER_CONNECT=8.144.162.164:2181/kafka -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://8.144.162.164:9093 -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9093 -t wurstmeister/kafka</span><br></pre></td></tr></table></figure>

<h2 id="创建Replication为2，Partition为2的topic"><a href="#创建Replication为2，Partition为2的topic" class="headerlink" title="创建Replication为2，Partition为2的topic"></a>创建Replication为2，Partition为2的topic</h2><p>在kafka容器中的opt&#x2F;kafka_2.12-1.1.0&#x2F;目录下输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/kafka-topics.sh --create --zookeeper 8.144.162.164:2181/kafka --replication-factor 2 --partitions 2 --topic partopic</span><br></pre></td></tr></table></figure>

<p>–create   创建主题。</p>
<p>–replication-factor   设置分区副本。</p>
<p>–partitions    设置分区数。</p>
<p>–topic    操作的topic名称。</p>
<p><img src="/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97kafka/image-20220227153457445.png" alt="image-20220227153457445"></p>
<h2 id="6-查看topic的状态"><a href="#6-查看topic的状态" class="headerlink" title="6.查看topic的状态"></a>6.查看topic的状态</h2><p>在kafka容器中的opt&#x2F;kafka_2.12-1.1.0&#x2F;目录下输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin/kafka-topics.sh --describe --zookeeper 8.144.162.164:2181/kafka --topic partopic</span><br></pre></td></tr></table></figure>



<p>–describe   查看主题详细描述。</p>
<p>输出结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash-5.1# bin/kafka-topics.sh --describe --zookeeper 8.144.162.164:2181/kafka --topic partopic</span><br><span class="line"></span><br><span class="line">Topic: partopic TopicId: zj1vuWG2Q0CyOB2Fv21Fwg PartitionCount: 2       ReplicationFactor: 2    Configs:</span><br><span class="line">        Topic: partopic Partition: 0    Leader: 0       Replicas: 0,1   Isr: 0,1</span><br><span class="line">        Topic: partopic Partition: 1    Leader: 1       Replicas: 1,0   Isr: 1,0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>PartitionCount: 2  两个分区</p>
<p>ReplicationFactor: 2两个副本</p>
<p>Partition  分区名字  从0开始  0,1,2</p>
<p>Leader   2个副本分别存储在 2台机器上 分别是0,1    谁是副本的leader    0 这个节点</p>
<p>Replicas </p>
<p>显示每个分区的Leader机器为broker0，在broker0和1上具有备份，Isr代表存活的备份机器中存活的。<br>当停掉kafka1后，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker stop kafka1</span><br></pre></td></tr></table></figure>

<p>再查看topic状态，输出结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Topic: partopic TopicId: zj1vuWG2Q0CyOB2Fv21Fwg PartitionCount: 2       ReplicationFactor: 2    Configs:</span><br><span class="line">        Topic: partopic Partition: 0    Leader: 0       Replicas: 0,1   Isr: 0</span><br><span class="line">        Topic: partopic Partition: 1    Leader: 0       Replicas: 1,0   Isr: 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">## 查询集群描述</span></span><br><span class="line">bin/kafka-topics.sh --describe --zookeeper 127.0.0.1:2181</span><br><span class="line"></span><br><span class="line"><span class="comment">## 查询集群描述（新）</span></span><br><span class="line">bin/kafka-topics.sh --bootstrap-server localhost:9092 --topic foo --describe</span><br></pre></td></tr></table></figure>









<p>一个主题可以分多个分区  </p>
<p>一个分区的数据 只能有一个消费者</p>
<p>如果一个分区挂了怎么办</p>
<p>为了保证数据的可靠性安全性</p>
<p>可以增加副本</p>
<p>副本又分为leader 和 follower  主节点 从节点</p>
<p>处理数据的时候 只针对leader这个副本进行 生产和消费数据</p>
<img src="%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97kafka/image-20220228210818214.png" alt="image-20220228210818214" style="zoom: 50%;" />





<p>leader挂掉之后 follower  有条件可以称为新的leader</p>
<p>kafka有些数据是存储在zookeeper中的</p>
<p>记录服务器节点运行的状态  哪些节点在工作</p>
<p>为了提高吞吐量 引入的分区的概念</p>
<p>消费者角度来说 引入了消费者组的概念</p>
<h1 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h1><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p><img src="/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97kafka/image-20220302014739503.png" alt="image-20220302014739503"></p>
<h2 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Kafka</span></span><br><span class="line"><span class="attr">spring.kafka.bootstrap-servers</span> = <span class="string">8.144.162.164:9092,8.144.162.164:9093</span></span><br><span class="line"><span class="comment"># 该字段见 Kafka 安装包中的 consumer.proerties，可自行修改, 修改完毕后需要重启 Kafka</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#(必需)consumer组id</span></span><br><span class="line"><span class="attr">spring.kafka.consumer.group-id</span> = <span class="string">test-consumer-group</span></span><br><span class="line"><span class="comment">#自动向zookeeper提交offset信息</span></span><br><span class="line"><span class="attr">spring.kafka.consumer.enable-auto-commit</span> = <span class="string">true</span></span><br><span class="line"><span class="comment">#自动更新时间</span></span><br><span class="line"><span class="attr">spring.kafka.consumer.auto-commit-interval</span> = <span class="string">3000</span></span><br></pre></td></tr></table></figure>



<h2 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProducerController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Kafka 模板用来向 kafka 发送数据</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate kafkaTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/atguigu&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">data</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        kafkaTemplate.send(<span class="string">&quot;partopic&quot;</span>, msg);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>接收消息  opt&#x2F;kafka_</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./bin/kafka-console-consumer.sh --bootstrap-server 8.144.162.164:9092 --topic partopic --from-beginning</span><br></pre></td></tr></table></figure>



<h2 id="接收消息"><a href="#接收消息" class="headerlink" title="接收消息"></a>接收消息</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事件消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EventConsumer</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消费评论、点赞、关注事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> record</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@KafkaListener(topics = &#123;&quot;partopic&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(ConsumerRecord record)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (record == <span class="literal">null</span> || record.value() == <span class="literal">null</span>) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;消息的内容为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(record.value());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="业务-点赞-关注消息通知"><a href="#业务-点赞-关注消息通知" class="headerlink" title="业务 点赞 关注消息通知"></a>业务 点赞 关注消息通知</h1><p>系统通知是一个很常见且必要的需求，当发生点赞、关注、评论操作的时候，系统就会给相应的用户发送通知。</p>
<p>对于流量巨大的社交网站，系统通知的需求是非常庞大的，那如果只是和私信或者发帖功能一样单纯地用 Ajax 做个异步，显然是远远不够的。所以为了保证系统的性能，这里非常有必要使用消息队列（消息队列三大作用：解耦、异步、消峰），Echo 中选用的是 Kafka。</p>
<p>整体来看就两个需求，发送系统通知和显示系统通知：</p>
<p>1）发送系统通知：</p>
<ul>
<li>A 给 B 点赞，给 B 发送 点赞 类型的系统通知（<code>TOPIC_LIKE</code>）</li>
<li>A 给 B 关注，给 B 发送 关注 类型的系统通知（<code>TOPIC_FOLLOW</code>）</li>
<li>A 给 B 评论 ，给 B 发送 评论 类型的系统通知（<code>TOPIC_COMMNET</code>）</li>
</ul>
<p>整体逻辑就是，当发生比如点赞操作的时候，就会触发消息队列的点赞事件，然后消费者消费这个事件，具体的消费逻辑就是往系统通知表里面插入一条数据（系统通知也使用私信那张表 <code>message</code>，不过系统通知的 <code>from_id</code> 在代码里写死了为 1，表示是系统发送出来的，所以这也就是为什么说大家在部署的时候一定要注意在 user 表中事先存储一个 id &#x3D; 1 的用户）。</p>
<p>2）显示系统通知：</p>
<ul>
<li>系统通知列表（显示点赞、评论、关注三种类型的通知）</li>
<li>系统通知详情（分页显示某一类型所包含的系统通知）</li>
<li>显示未读消息数量</li>
</ul>
<h2 id="依赖-1"><a href="#依赖-1" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--Kafka--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>





<h2 id="properties-1"><a href="#properties-1" class="headerlink" title="properties"></a>properties</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Kafka</span></span><br><span class="line"><span class="attr">spring.kafka.bootstrap-servers</span> = <span class="string">8.144.162.164:9092,8.144.162.164:9093</span></span><br><span class="line"><span class="comment"># 该字段见 Kafka 安装包中的 consumer.proerties，可自行修改, 修改完毕后需要重启 Kafka</span></span><br><span class="line"><span class="attr">spring.kafka.consumer.group-id</span> = <span class="string">test-consumer-group</span></span><br><span class="line"><span class="attr">spring.kafka.consumer.enable-auto-commit</span> = <span class="string">true</span></span><br><span class="line"><span class="attr">spring.kafka.consumer.auto-commit-interval</span> = <span class="string">3000</span></span><br></pre></td></tr></table></figure>

<h2 id="封装事件对象"><a href="#封装事件对象" class="headerlink" title="封装事件对象"></a>封装事件对象</h2><p>各位不妨想一想，消费者想要通过消费这个消息实现往数据库表 message 中插入一条记录的目的，那么这个消息或者说事件是不是就应该具备 message 表中的所有字段，或者说从消息中能够推出这些字段，对吧。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/PocakShgoGFsibzSibk9CDcBZKb4dhIQ9v71NiahibibWgH6wooYpktEsHtQCKWPLqDzRsOic8UqAzmfCicoegp05NC0g/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>另外，Kafka 是发布订阅模型，一对多，消息以 Topic（主题）进行分类，生产者将消息发布到某个Topic 中，消费者可以订阅该 Topic。以点赞事件为例，看下图：</p>
<p><img src="/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97kafka/640" alt="图片"></p>
<h2 id="封装Topic类型"><a href="#封装Topic类型" class="headerlink" title="封装Topic类型"></a>封装Topic类型</h2><p>Topic 的类型定义在CommunityConstant中</p>
<p><img src="/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97kafka/image-20220301191440249.png" alt="image-20220301191440249"></p>
<h2 id="消息封装成事件模型"><a href="#消息封装成事件模型" class="headerlink" title="消息封装成事件模型"></a>消息封装成事件模型</h2><p>如此我们就可以封装成一个这样的事件模型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装事件（用于系统通知）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Event</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String topic; <span class="comment">// 事件类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> userId; <span class="comment">// 事件由谁触发</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> entityType; <span class="comment">// 实体类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> entityId; <span class="comment">// 实体 id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> entityUserId; <span class="comment">// 实体的作者(该通知发送给他）</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); <span class="comment">// 存储未来可能需要用到的数据</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>元素介绍</p>
<p>userId 和 entityType</p>
<p>如果用户A给用户B点了赞 那么userId 就是A的id  </p>
<p>系统是发送给B的  那么entityUserId就是B的Id    (对应的是message to_id)</p>
<p>map 存储未来可能需要用到的数据 </p>
<p>可以存储评论的对应的贴在id  (postId)</p>
<h2 id="事件生产者"><a href="#事件生产者" class="headerlink" title="事件生产者"></a>事件生产者</h2><p>EventProducer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.greate.community.event;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.greate.community.entity.Event;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.core.KafkaTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事件的生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EventProducer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate kafkaTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> event</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fireEvent</span><span class="params">(Event event)</span> &#123;</span><br><span class="line">        <span class="comment">// 将事件发布到指定的主题</span></span><br><span class="line">        kafkaTemplate.send(event.getTopic(), JSONObject.toJSONString(event));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>service调用发送消息的方法即可</p>
<p><img src="/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97kafka/image-20220302001757359.png" alt="image-20220302001757359"></p>
<h2 id="事件消费者"><a href="#事件消费者" class="headerlink" title="事件消费者"></a>事件消费者</h2><p>事件消费者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.greate.community.entity.DiscussPost;</span><br><span class="line"><span class="keyword">import</span> com.greate.community.entity.Event;</span><br><span class="line"><span class="keyword">import</span> com.greate.community.entity.Message;</span><br><span class="line"><span class="keyword">import</span> com.greate.community.service.DiscussPostService;</span><br><span class="line"><span class="keyword">import</span> com.greate.community.service.ElasticsearchService;</span><br><span class="line"><span class="keyword">import</span> com.greate.community.service.MessageService;</span><br><span class="line"><span class="keyword">import</span> com.greate.community.util.CommunityConstant;</span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.ConsumerRecord;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.kafka.annotation.KafkaListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 事件消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EventConsumer</span> <span class="keyword">implements</span> <span class="title class_">CommunityConstant</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(EventConsumer.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageService messageService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DiscussPostService discussPostService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchService elasticsearchService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消费评论、点赞、关注事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> record</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@KafkaListener(topics = &#123;TOPIC_COMMNET, TOPIC_LIKE, TOPIC_FOLLOW&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(ConsumerRecord record)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (record == <span class="literal">null</span> || record.value() == <span class="literal">null</span>) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;消息的内容为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Event</span> <span class="variable">event</span> <span class="operator">=</span> JSONObject.parseObject(record.value().toString(), Event.class);</span><br><span class="line">        <span class="keyword">if</span> (event == <span class="literal">null</span>) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;消息格式错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送系统通知</span></span><br><span class="line">        <span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>();</span><br><span class="line">        message.setFromId(SYSTEM_USER_ID);</span><br><span class="line">        message.setToId(event.getEntityUserId());</span><br><span class="line">        message.setConversationId(event.getTopic());</span><br><span class="line">        message.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; content = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        content.put(<span class="string">&quot;userId&quot;</span>, event.getUserId());</span><br><span class="line">        content.put(<span class="string">&quot;entityType&quot;</span>, event.getEntityType());</span><br><span class="line">        content.put(<span class="string">&quot;entityId&quot;</span>, event.getEntityId());</span><br><span class="line">        <span class="keyword">if</span> (!event.getData().isEmpty()) &#123; <span class="comment">// 存储 Event 中的 Data</span></span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : event.getData().entrySet()) &#123;</span><br><span class="line">                content.put(entry.getKey(), entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        message.setContent(JSONObject.toJSONString(content));</span><br><span class="line"></span><br><span class="line">        messageService.addMessage(message);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>消费者做的就是拿到消息之后 根据消息里面的数据 </p>
<ol>
<li>往数据表里添加一条数据</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费发帖事件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@KafkaListener(topics = &#123;TOPIC_PUBLISH&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handlePublishMessage</span><span class="params">(ConsumerRecord record)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (record == <span class="literal">null</span> || record.value() == <span class="literal">null</span>) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;消息的内容为空&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Event</span> <span class="variable">event</span> <span class="operator">=</span> JSONObject.parseObject(record.value().toString(), Event.class);</span><br><span class="line">    <span class="keyword">if</span> (event == <span class="literal">null</span>) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;消息格式错误&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">DiscussPost</span> <span class="variable">post</span> <span class="operator">=</span> discussPostService.findDiscussPostById(event.getEntityId());</span><br><span class="line">    elasticsearchService.saveDiscusspost(post);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费删帖事件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@KafkaListener(topics = &#123;TOPIC_DELETE&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleDeleteMessage</span><span class="params">(ConsumerRecord record)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (record == <span class="literal">null</span> || record.value() == <span class="literal">null</span>) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;消息的内容为空&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Event</span> <span class="variable">event</span> <span class="operator">=</span> JSONObject.parseObject(record.value().toString(), Event.class);</span><br><span class="line">    <span class="keyword">if</span> (event == <span class="literal">null</span>) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;消息格式错误&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    elasticsearchService.deleteDiscusspost(event.getEntityId());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>消息队列</category>
      </categories>
      <tags>
        <tag>消息队列</tag>
      </tags>
  </entry>
  <entry>
    <title>登录的实现</title>
    <url>/2021/01/21/Java/%E7%99%BB%E9%99%86/%E7%99%BB%E9%99%86/</url>
    <content><![CDATA[<h3 id="验证码防刷校验"><a href="#验证码防刷校验" class="headerlink" title="验证码防刷校验"></a>验证码防刷校验</h3><p>用户要是一直提交验证码</p>
<ul>
<li><p>前台：限制一分钟后提交</p>
</li>
<li><p>后台：存入redis 如果有就返回</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送短信验证码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> phone 手机号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/sms/sendCode&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">sendCode</span><span class="params">(<span class="meta">@RequestParam(&quot;phone&quot;)</span> String phone)</span> &#123;</span><br><span class="line">    <span class="comment">// TODO 1、接口防刷</span></span><br><span class="line">    <span class="comment">// 先从redis中拿取</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">redisCode</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;sms:code:&quot;</span> + phone);</span><br><span class="line">    <span class="keyword">if</span>(!StringUtils.isEmpty(redisCode)) &#123;</span><br><span class="line">        <span class="comment">// 拆分</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> Long.parseLong(redisCode.split(<span class="string">&quot;_&quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">// 当前系统事件减去之前验证码存入的事件 小于60000毫秒=60秒</span></span><br><span class="line">        <span class="keyword">if</span> (System.currentTimeMillis() -l &lt; <span class="number">60000</span>) &#123;</span><br><span class="line">            <span class="comment">// 60秒内不能再发</span></span><br><span class="line">            R.error(BizCodeEnume.SMS_CODE_EXCEPTION.getCode(),BizCodeEnume.SMS_CODE_EXCEPTION.getMsg());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2、验证码的再次效验</span></span><br><span class="line">    <span class="comment">// 数据存入 =》redis key-phone value - code sms:code:131xxxxx - &gt;45678</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">5</span>).toUpperCase();</span><br><span class="line">    <span class="comment">// 拼接验证码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">substring</span> <span class="operator">=</span> code+<span class="string">&quot;_&quot;</span> + System.currentTimeMillis();</span><br><span class="line">    <span class="comment">// redis缓存验证码 防止同一个phone在60秒内发出多次验证吗</span></span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;sms:code:&quot;</span>+phone,substring,<span class="number">10</span>, TimeUnit.MINUTES);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用第三方服务发送验证码</span></span><br><span class="line">    thirdPartFeignService.sendCode(phone,code);</span><br><span class="line">    <span class="keyword">return</span> R.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h3 id="注册页环境"><a href="#注册页环境" class="headerlink" title="注册页环境"></a>注册页环境</h3><h4 id="1、编写-vo-接收页面提交"><a href="#1、编写-vo-接收页面提交" class="headerlink" title="1、编写 vo 接收页面提交"></a>1、编写 vo 接收页面提交</h4><ul>
<li>使用到了 JSR303校验</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册数据封装Vo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gcq</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Create</span> 2020-11-09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRegistVo</span> &#123;</span><br><span class="line">    <span class="meta">@NotEmpty(message = &quot;用户名必须提交&quot;)</span></span><br><span class="line">    <span class="meta">@Length(min = 6,max = 18,message = &quot;用户名必须是6-18位字符&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotEmpty(message = &quot;密码必须填写&quot;)</span></span><br><span class="line">    <span class="meta">@Length(min = 6,max = 18,message = &quot;密码必须是6-18位字符&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotEmpty(message = &quot;手机号码必须提交&quot;)</span></span><br><span class="line">    <span class="meta">@Pattern(regexp = &quot;^[1]([3-9])[0-9]&#123;9&#125;$&quot;,message = &quot;手机格式不正确&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotEmpty(message = &quot;验证码必须填写&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2、页面提交数据与Vo一致"><a href="#2、页面提交数据与Vo一致" class="headerlink" title="2、页面提交数据与Vo一致"></a>2、页面提交数据与Vo一致</h4><p>设置 <code>name</code> 属性与 <code>Vo</code> 一致，方便将传递过来的数据转换成 JSON</p>
<p><img src="/%E7%99%BB%E9%99%86/image-20201110100732631.png" alt="image-20201110100732631"></p>
<h4 id="3、数据校验"><a href="#3、数据校验" class="headerlink" title="3、数据校验"></a>3、数据校验</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * //TODO 重定向携带数据，利用session原理，将数据放在session中，</span></span><br><span class="line"><span class="comment"> * 只要跳转到下一个页面取出这个数据，session中的数据就会删掉</span></span><br><span class="line"><span class="comment"> * //TODO分布式下 session 的问题</span></span><br><span class="line"><span class="comment"> * RedirectAttributes redirectAttributes 重定向携带数据</span></span><br><span class="line"><span class="comment"> * redirectAttributes.addFlashAttribute(&quot;errors&quot;, errors); 只能取一次</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> vo 数据传输对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> result 用于验证参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> redirectAttributes 数据重定向</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/regist&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">regist</span><span class="params">(<span class="meta">@Valid</span> UserRegistVo vo, BindingResult result,</span></span><br><span class="line"><span class="params">                     RedirectAttributes redirectAttributes)</span> &#123;</span><br><span class="line">    <span class="comment">// 校验是否通过</span></span><br><span class="line">    <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">        <span class="comment">// 拿到错误信息转换成Map</span></span><br><span class="line">        Map&lt;String, String&gt; errors = result.getFieldErrors().stream().collect(Collectors.toMap(FieldError::getField, FieldError::getDefaultMessage));</span><br><span class="line">        <span class="comment">//用一次的属性</span></span><br><span class="line">        redirectAttributes.addFlashAttribute(<span class="string">&quot;errors&quot;</span>,errors);</span><br><span class="line">        <span class="comment">// 校验出错，转发到注册页</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:http://auth.gulimall.com/reg.html&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将传递过来的验证码 与 存redis中的验证码进行比较</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> vo.getCode();</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> redisTemplate.opsForValue().get(AuthServerConstant.SMS_CODE_CACHE_PREFIX + vo.getPhone());</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(s)) &#123;</span><br><span class="line">        <span class="comment">// 验证码和redis中的一致</span></span><br><span class="line">        <span class="keyword">if</span>(code.equals(s.split(<span class="string">&quot;_&quot;</span>)[<span class="number">0</span>])) &#123;</span><br><span class="line">            <span class="comment">// 删除验证码：令牌机制</span></span><br><span class="line">            redisTemplate.delete(AuthServerConstant.SMS_CODE_CACHE_PREFIX + vo.getPhone());</span><br><span class="line">            <span class="comment">// 调用远程服务，真正注册</span></span><br><span class="line">            <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> memberFeignService.regist(vo);</span><br><span class="line">            <span class="keyword">if</span> (r.getCode() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 远程调用注册服务成功</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;redirect:http://auth.gulimall.com/login.html&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Map&lt;String, String&gt; errors = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">                errors.put(<span class="string">&quot;msg&quot;</span>,r.getData(<span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;String&gt;()&#123;&#125;));</span><br><span class="line">                redirectAttributes.addFlashAttribute(<span class="string">&quot;errors&quot;</span>, errors);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;redirect:http://auth.gulimall.com/reg.html&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Map&lt;String, String&gt; errors = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            errors.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;验证码错误&quot;</span>);</span><br><span class="line">            redirectAttributes.addFlashAttribute(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;验证码错误&quot;</span>);</span><br><span class="line">            <span class="comment">// 校验出错，转发到注册页</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:http://auth.gulimall.com/reg.html&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; errors = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        errors.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;验证码错误&quot;</span>);</span><br><span class="line">        redirectAttributes.addFlashAttribute(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;验证码错误&quot;</span>);</span><br><span class="line">        <span class="comment">// 校验出错，转发到注册页</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:http://auth.gulimall.com/reg.html&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4、前端页面接收错误信息"><a href="#4、前端页面接收错误信息" class="headerlink" title="4、前端页面接收错误信息"></a>4、前端页面接收错误信息</h4><p><img src="/%E7%99%BB%E9%99%86/image-20201110101306173.png" alt="image-20201110101306173"></p>
<h4 id="5、异常机制-用户注册"><a href="#5、异常机制-用户注册" class="headerlink" title="5、异常机制 &amp; 用户注册"></a>5、异常机制 &amp; 用户注册</h4><ul>
<li>用户注册单独抽出了一个服务</li>
</ul>
<p>Controller</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> registVo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/regist&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">regist</span><span class="params">(<span class="meta">@RequestBody</span> MemberRegistVo registVo)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        memberService.regist(registVo);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (PhoneExsitException e) &#123;</span><br><span class="line">        <span class="comment">// 返回对应的异常信息</span></span><br><span class="line">       <span class="keyword">return</span> R.error(BizCodeEnume.PHONE_EXIST_EXCEPTION.getCode(),BizCodeEnume.PHONE_EXIST_EXCEPTION.getMsg());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (UserNameExistException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> R.error(BizCodeEnume.USER_EXIST_EXCEPTION.getCode(),BizCodeEnume.USER_EXIST_EXCEPTION.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> R.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">regist</span><span class="params">(MemberRegistVo registVo)</span> &#123;</span><br><span class="line">    <span class="type">MemberDao</span> <span class="variable">memberDao</span> <span class="operator">=</span> <span class="built_in">this</span>.baseMapper;</span><br><span class="line">    <span class="type">MemberEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MemberEntity</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置默认等级</span></span><br><span class="line">    <span class="type">MemberLevelEntity</span> <span class="variable">memberLevelEntity</span> <span class="operator">=</span> memberLevelDao.getDefaultLevel();</span><br><span class="line">    entity.setLevelId(memberLevelEntity.getId());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查手机号和用户名是否唯一</span></span><br><span class="line">    checkPhoneUnique(registVo.getPhone());</span><br><span class="line">    checkUserNameUnique(registVo.getUserName());</span><br><span class="line"></span><br><span class="line">    entity.setMobile(registVo.getPhone());</span><br><span class="line">    entity.setUsername(registVo.getUserName());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//密码要加密存储</span></span><br><span class="line">    <span class="type">BCryptPasswordEncoder</span> <span class="variable">passwordEncoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    <span class="type">String</span> <span class="variable">encode</span> <span class="operator">=</span> passwordEncoder.encode(registVo.getPassword());</span><br><span class="line">    entity.setPassword(encode);</span><br><span class="line"></span><br><span class="line">    memberDao.insert(entity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkPhoneUnique</span><span class="params">(String phone)</span> <span class="keyword">throws</span> PhoneExsitException &#123;</span><br><span class="line">    <span class="type">MemberDao</span> <span class="variable">memberDao</span> <span class="operator">=</span> <span class="built_in">this</span>.baseMapper;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">mobile</span> <span class="operator">=</span> memberDao.selectCount(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;MemberEntity&gt;().eq(<span class="string">&quot;mobile&quot;</span>, phone));</span><br><span class="line">    <span class="keyword">if</span> (mobile &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">PhoneExsitException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkUserNameUnique</span><span class="params">(String username)</span> <span class="keyword">throws</span> UserNameExistException &#123;</span><br><span class="line">    <span class="type">MemberDao</span> <span class="variable">memberDao</span> <span class="operator">=</span> <span class="built_in">this</span>.baseMapper;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> memberDao.selectCount(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;MemberEntity&gt;().eq(<span class="string">&quot;username&quot;</span>, username));</span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">PhoneExsitException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 此处引入一个问题</p>
<ul>
<li>密码是直接存入数据库吗？ 这样子会导致数据的不安全，</li>
<li>引出了使用 MD5进行加密，但是MD5加密后，别人任然可以暴力破解</li>
<li>可以使用加盐的方式，将密码加密后，得到一串随机字符，</li>
<li>随机字符和密码和进行验证相同结果返回true否则false</li>
</ul>
<p>至此注册相关结束~</p>
<h3 id="10-6-账号密码登录"><a href="#10-6-账号密码登录" class="headerlink" title="10.6 账号密码登录"></a>10.6 账号密码登录</h3><h4 id="1、定义-Vo-接收数据提交"><a href="#1、定义-Vo-接收数据提交" class="headerlink" title="1、定义 Vo 接收数据提交"></a>1、定义 Vo 接收数据提交</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gcq</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Create</span> 2020-11-10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserLoginVo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String loginacct;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同时需要保证前端页面提交字段与 Vo 类中一致</p>
<h4 id="2、在-Member-服务中编写接口"><a href="#2、在-Member-服务中编写接口" class="headerlink" title="2、在 Member 服务中编写接口"></a>2、在 Member 服务中编写接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> MemberEntity <span class="title function_">login</span><span class="params">(MemberLoginVo vo)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">loginacct</span> <span class="operator">=</span> vo.getLoginacct();</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> vo.getPassword();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、去数据库查询 select * from  ums_member where username=? or mobile =?</span></span><br><span class="line">    <span class="type">MemberDao</span> <span class="variable">memberDao</span> <span class="operator">=</span> <span class="built_in">this</span>.baseMapper;</span><br><span class="line">    <span class="type">MemberEntity</span> <span class="variable">memberEntity</span> <span class="operator">=</span> memberDao.selectOne(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;MemberEntity&gt;()</span><br><span class="line">            .eq(<span class="string">&quot;username&quot;</span>, loginacct).or().</span><br><span class="line">                    eq(<span class="string">&quot;mobile&quot;</span>, loginacct));</span><br><span class="line">    <span class="keyword">if</span> (memberDao == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 登录失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 获取数据库的密码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">passwordDB</span> <span class="operator">=</span> memberEntity.getPassword();</span><br><span class="line">        <span class="type">BCryptPasswordEncoder</span> <span class="variable">passwordEncoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">        <span class="comment">// 和用户密码进行校验</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">matches</span> <span class="operator">=</span> passwordEncoder.matches(password, passwordDB);</span><br><span class="line">        <span class="keyword">if</span>(matches) &#123;</span><br><span class="line">            <span class="comment">// 密码验证成功 返回对象</span></span><br><span class="line">            <span class="keyword">return</span> memberEntity;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>















]]></content>
      <categories>
        <category>代码</category>
      </categories>
      <tags>
        <tag>代码</tag>
      </tags>
  </entry>
  <entry>
    <title>常用工具类整理</title>
    <url>/2020/06/20/Java/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%B7%A5%E5%85%B7%E7%B1%BB/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<p>一、Hutool工具包</p>
<p>StrUtil.isBlank                 &#x2F;&#x2F; 判断字符串是否空（null或长度为0的字符串或者全空格的字符串）</p>
<p>StrUtil.isEmpty              &#x2F;&#x2F; 判断字符串是否空（null或长度为0的字符串）</p>
<p>StrUtil.padPre                &#x2F;&#x2F; 字符串补足n位</p>
<p>StrUtil.padAfter             &#x2F;&#x2F; 字符串补足n位</p>
<p>HexUtil.decodeHex        &#x2F;&#x2F; 十六进制串转字节数组</p>
<p>HexUtil.encodeHexStr    &#x2F;&#x2F; 字节数据转十六进制串</p>
<p>IdUtil.simpleId               &#x2F;&#x2F; 没有连接符的uuid</p>
<p>DateUtil.format             &#x2F;&#x2F; date类型格式化成字符串</p>
<p>ArrayUtil.addAll            &#x2F;&#x2F; 拼接多个同类型的数组</p>
<p>ExceptionUtil.stacktraceToString(e)     &#x2F;&#x2F;获取完整的异常堆栈</p>
<p>FileUtil.readString(file,charset)   &#x2F;&#x2F; 读取文本文件内容，返回文件内容</p>
<p>RandomUtil.randomString(n)   &#x2F;&#x2F; 长度为n的随机串（数字+小写字符）</p>
<p>MapUtil.getStr(mapObj,”key”);  &#x2F;&#x2F; 从map里获取string，不必toString之前的判断null了</p>
<p>二、comman-lang工具包</p>
<p>StringUtils.leftPad  &#x2F;&#x2F; 左侧填充字符串</p>
<p>RandomStringUtils.randomAscii(n)  &#x2F;&#x2F; 创建随机ascii字符串</p>
<p>三、</p>
]]></content>
      <categories>
        <category>工具包</category>
      </categories>
      <tags>
        <tag>工具包</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cache</title>
    <url>/2022/01/11/Java/%E7%BC%93%E5%AD%98/SpringCache/</url>
    <content><![CDATA[<h2 id="Spring-Cache"><a href="#Spring-Cache" class="headerlink" title="Spring Cache"></a>Spring Cache</h2><h4 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h4><ul>
<li>Spring 从3.1开始定义了 <code>org.springframework.cache.Cache</code> 和 <code>org.sprngframework.cache.CacheManager</code> 接口睐统一不同的缓存技术</li>
<li>并支持使用 <code>JCache</code>（JSR-107）注解简化我们的开发</li>
<li>Cache 接口为缓存的组件规范定义，包含缓存的各种操作集合 <code>Cache</code> 接口下 Spring 提供了各种 XXXCache的实现，如 <code>RedisCache</code>、<code>EhCache</code>,<code>ConcrrentMapCache</code>等等，</li>
<li>每次调用需要缓存功能实现方法的时候，<code>Spring</code> 会检查检查指定参数的马努表犯法是否已经被嗲用过，如果有就直接从缓存中获取方法调用后的结果，如果没有就调用方法并缓存结果后返回给用户，下次直接调用从缓存中获取</li>
<li>使用 <code>Sprng</code> 缓存抽象时我们需要关注的点有以下两点<ul>
<li>1、确定方法需要被缓存以及他们的的缓存策略</li>
<li>2、从缓存中读取之前缓存存储的数据</li>
</ul>
</li>
</ul>
<p>官网地址：<a href="https://docs.spring.io/spring-framework/docs/5.2.10.RELEASE/spring-framework-reference/integration.html#cache-strategie">https://docs.spring.io/spring-framework/docs/5.2.10.RELEASE/spring-framework-reference/integration.html#cache-strategie</a></p>
<p>缓存注解配置</p>
<p><img src="/SpringCache/image-20201228171806703.png" alt="image-20201228171806703"></p>
<h4 id="2、基础概念"><a href="#2、基础概念" class="headerlink" title="2、基础概念"></a>2、基础概念</h4><p>从3.1版本开始，Spring 框架就支持透明地向现有 Spring 应用程序添加缓存。与事务支持类似，缓存抽象允许在对代码影响最小的情况下一致地使用各种缓存解决方案。从 Spring 4.1 开始，缓存抽象在JSR-107注释和更多定制选项的支持下得到了显著扩展。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*  8、整合SpringCache简化缓存开发</span></span><br><span class="line"><span class="comment">*      1、引入依赖</span></span><br><span class="line"><span class="comment">*          spring-boot-starter-cache</span></span><br><span class="line"><span class="comment">*      2、写配置</span></span><br><span class="line"><span class="comment">*          1、自动配置了那些</span></span><br><span class="line"><span class="comment">*              CacheAutoConfiguration会导入 RedisCacheConfiguration</span></span><br><span class="line"><span class="comment">*              自动配置好了缓存管理器，RedisCacheManager</span></span><br><span class="line"><span class="comment">*          2、配置使用redis作为缓存</span></span><br><span class="line"><span class="comment">*          Spring.cache.type=redis</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*       4、原理</span></span><br><span class="line"><span class="comment">*       CacheAutoConfiguration -&gt;RedisCacheConfiguration -&gt;</span></span><br><span class="line"><span class="comment">*       自动配置了 RedisCacheManager -&gt;初始化所有的缓存 -&gt; 每个缓存决定使用什么配置</span></span><br><span class="line"><span class="comment">*       -&gt;如果redisCacheConfiguration有就用已有的，没有就用默认的</span></span><br><span class="line"><span class="comment">*       -&gt;想改缓存的配置，只需要把容器中放一个 RedisCacheConfiguration 即可</span></span><br><span class="line"><span class="comment">*       -&gt;就会应用到当前 RedisCacheManager管理所有缓存分区中</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h4 id="3、注解"><a href="#3、注解" class="headerlink" title="3、注解"></a>3、注解</h4><p>对于缓存声明，Spring的缓存抽象提供了一组Java注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"><span class="doctag">@Cacheable</span>: Triggers cache population:触发将数据保存到缓存的操作</span></span><br><span class="line"><span class="comment"><span class="doctag">@CacheEvict</span>: Triggers cache eviction: 触发将数据从缓存删除的操作</span></span><br><span class="line"><span class="comment"><span class="doctag">@CachePut</span>: Updates the cache without interfering with the method execution:不影响方法执行更新缓存</span></span><br><span class="line"><span class="comment"><span class="doctag">@Caching</span>: Regroups multiple cache operations to be applied on a method:组合以上多个操作</span></span><br><span class="line"><span class="comment"><span class="doctag">@CacheConfig</span>: Shares some common cache-related settings at class-level:在类级别共享缓存的相同配置</span></span><br><span class="line"><span class="comment">**/</span></span><br></pre></td></tr></table></figure>

<p><strong>注解使用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1、每一个需要缓存的数据我们都需要指定放到那个名字的缓存【缓存分区的划分【按照业务类型划分】】</span></span><br><span class="line"><span class="comment">     * 2、<span class="doctag">@Cacheable</span>(&#123;&quot;category&quot;&#125;)</span></span><br><span class="line"><span class="comment">     *      代表当前方法的结果需要缓存，如果缓存中有，方法不调用</span></span><br><span class="line"><span class="comment">     *      如果缓存中没有，调用方法，最后将方法的结果放入缓存</span></span><br><span class="line"><span class="comment">     * 3、默认行为:</span></span><br><span class="line"><span class="comment">     *      1、如果缓存中有，方法不用调用</span></span><br><span class="line"><span class="comment">     *      2、key默自动生成，缓存的名字:SimpleKey[](自动生成的key值)</span></span><br><span class="line"><span class="comment">     *      3、缓存中value的值，默认使用jdk序列化，将序列化后的数据存到redis</span></span><br><span class="line"><span class="comment">     *      3、默认的过期时间，-1</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *    自定义操作</span></span><br><span class="line"><span class="comment">     *      1、指定缓存使用的key     key属性指定，接收一个SpEl</span></span><br><span class="line"><span class="comment">     *      2、指定缓存数据的存活时间  配置文件中修改ttl</span></span><br><span class="line"><span class="comment">     *      3、将数据保存为json格式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">	<span class="comment">//value 缓存的别名</span></span><br><span class="line">     <span class="comment">// key redis中key的名称，默认是方法名称</span></span><br><span class="line">    <span class="meta">@Cacheable(value = &#123;&quot;category&quot;&#125;,key = &quot;#root.method.name&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;CategoryEntity&gt; <span class="title function_">getLevel1Categorys</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// parent_cid为0则是一级目录</span></span><br><span class="line">        List&lt;CategoryEntity&gt; categoryEntities = baseMapper.selectList(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;CategoryEntity&gt;().eq(<span class="string">&quot;parent_cid&quot;</span>, <span class="number">0</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;耗费时间：&quot;</span> + (System.currentTimeMillis() - l));</span><br><span class="line">        <span class="keyword">return</span> categoryEntities;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="4、表达式语法"><a href="#4、表达式语法" class="headerlink" title="4、表达式语法"></a>4、表达式语法</h4><p>配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.gulimall.product.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.cache.CacheProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> gcq</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Create</span> 2020-11-01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(CacheProperties.class)</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCacheConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置文件中的东西没有用上</span></span><br><span class="line"><span class="comment">     * 1、原来的配置吻技安绑定的配置类是这样子的</span></span><br><span class="line"><span class="comment">     *      <span class="doctag">@ConfigurationProperties</span>(prefix = &quot;Spring.cache&quot;)</span></span><br><span class="line"><span class="comment">     * 2、要让他生效</span></span><br><span class="line"><span class="comment">     *      <span class="doctag">@EnableConfigurationProperties</span>(CacheProperties.class)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cacheProperties</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    RedisCacheConfiguration <span class="title function_">redisCacheConfiguration</span><span class="params">(CacheProperties cacheProperties)</span> &#123;</span><br><span class="line">        <span class="type">RedisCacheConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> RedisCacheConfiguration.defaultCacheConfig();</span><br><span class="line">        <span class="comment">// 设置key的序列化</span></span><br><span class="line">        config = config.serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>()));</span><br><span class="line">        <span class="comment">// 设置value序列化 -&gt;JackSon</span></span><br><span class="line">        config = config.serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>()));</span><br><span class="line"></span><br><span class="line">        CacheProperties.<span class="type">Redis</span> <span class="variable">redisProperties</span> <span class="operator">=</span> cacheProperties.getRedis();</span><br><span class="line">        <span class="keyword">if</span> (redisProperties.getTimeToLive() != <span class="literal">null</span>) &#123;</span><br><span class="line">            config = config.entryTtl(redisProperties.getTimeToLive());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (redisProperties.getKeyPrefix() != <span class="literal">null</span>) &#123;</span><br><span class="line">            config = config.prefixKeysWith(redisProperties.getKeyPrefix());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!redisProperties.isCacheNullValues()) &#123;</span><br><span class="line">            config = config.disableCachingNullValues();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!redisProperties.isUseKeyPrefix()) &#123;</span><br><span class="line">            config = config.disableKeyPrefix();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>yaml </p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Spring:</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">time-to-live:</span> <span class="number">3600000</span>           <span class="comment"># 过期时间</span></span><br><span class="line">      <span class="attr">key-prefix:</span> <span class="string">CACHE_</span>              <span class="comment"># key前缀</span></span><br><span class="line">      <span class="attr">use-key-prefix:</span> <span class="literal">true</span>            <span class="comment"># 是否使用写入redis前缀</span></span><br><span class="line">      <span class="attr">cache-null-values:</span> <span class="literal">true</span>         <span class="comment"># 是否允许缓存空值</span></span><br></pre></td></tr></table></figure>

<h4 id="5、缓存穿透问题解决"><a href="#5、缓存穿透问题解决" class="headerlink" title="5、缓存穿透问题解决"></a>5、缓存穿透问题解决</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、每一个需要缓存的数据我们都需要指定放到那个名字的缓存【缓存分区的划分【按照业务类型划分】】</span></span><br><span class="line"><span class="comment"> * 2、<span class="doctag">@Cacheable</span>(&#123;&quot;category&quot;&#125;)</span></span><br><span class="line"><span class="comment"> *      代表当前方法的结果需要缓存，如果缓存中有，方法不调用</span></span><br><span class="line"><span class="comment"> *      如果缓存中没有，调用方法，最后将方法的结果放入缓存</span></span><br><span class="line"><span class="comment"> * 3、默认行为:</span></span><br><span class="line"><span class="comment"> *      1、如果缓存中有，方法不用调用</span></span><br><span class="line"><span class="comment"> *      2、key默自动生成，缓存的名字:SimpleKey[](自动生成的key值)</span></span><br><span class="line"><span class="comment"> *      3、缓存中value的值，默认使用jdk序列化，将序列化后的数据存到redis</span></span><br><span class="line"><span class="comment"> *      3、默认的过期时间，-1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    自定义操作</span></span><br><span class="line"><span class="comment"> *      1、指定缓存使用的key     key属性指定，接收一个SpEl</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> <span class="doctag">@Cacheable</span>(value = &#123;&quot;category&quot;&#125;,key = &quot;#root.method.name&quot;)</span></span><br><span class="line"><span class="comment"> *      2、指定缓存数据的存活时间  配置文件中修改ttl</span></span><br><span class="line"><span class="comment"> Spring:</span></span><br><span class="line"><span class="comment">  cache:</span></span><br><span class="line"><span class="comment">    type: redis</span></span><br><span class="line"><span class="comment">    redis:</span></span><br><span class="line"><span class="comment">      time-to-live: 3600000      1h</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> *      3、将数据保存为json格式</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> * 4、Spring-Cache的不足：</span></span><br><span class="line"><span class="comment"> *      1、读模式：</span></span><br><span class="line"><span class="comment"> *          缓存穿透:查询一个null数据，解决 缓存空数据：ache-null-values=true</span></span><br><span class="line"><span class="comment"> *          缓存击穿:大量并发进来同时查询一个正好过期的数据，解决:加锁 ？ 默认是无加锁</span></span><br><span class="line"><span class="comment"> *          缓存雪崩:大量的key同时过期，解决：加上随机时间，Spring-cache-redis-time-to-live</span></span><br><span class="line"><span class="comment"> *       2、写模式：（缓存与数据库库不一致）</span></span><br><span class="line"><span class="comment"> *          1、读写加锁</span></span><br><span class="line"><span class="comment"> *          2、引入canal，感知到MySQL的更新去更新数据库</span></span><br><span class="line"><span class="comment"> *          3、读多写多，直接去数据库查询就行</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    总结：</span></span><br><span class="line"><span class="comment"> *      常规数据（读多写少，即时性，一致性要求不高的数据）完全可以使用SpringCache 写模式（ 只要缓存数据有过期时间就足够了）</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    特殊数据：特殊设计</span></span><br><span class="line"><span class="comment"> *      原理：</span></span><br><span class="line"><span class="comment"> *          CacheManager(RedisManager) -&gt; Cache(RedisCache) -&gt;Cache负责缓存的读写</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Cacheable(value = &#123;&quot;category&quot;&#125;,key = &quot;#root.method.name&quot;,sync = true)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;CategoryEntity&gt; <span class="title function_">getLevel1Categorys</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    <span class="comment">// parent_cid为0则是一级目录</span></span><br><span class="line">    List&lt;CategoryEntity&gt; categoryEntities = baseMapper.selectList(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;CategoryEntity&gt;().eq(<span class="string">&quot;parent_cid&quot;</span>, <span class="number">0</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;耗费时间：&quot;</span> + (System.currentTimeMillis() - l));</span><br><span class="line">    <span class="keyword">return</span> categoryEntities;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6、缓存更新"><a href="#6、缓存更新" class="headerlink" title="6、缓存更新"></a>6、缓存更新</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 级联更新所有的关联数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@CacheEvict</span> 失效模式</span></span><br><span class="line"><span class="comment">     * 1、同时进行多种缓存操作 <span class="doctag">@Caching</span></span></span><br><span class="line"><span class="comment">     * 2、指定删除某个分区下的所有数据 <span class="doctag">@CacheEvict</span>(value = &#123;&quot;category&quot;&#125;,allEntries = true)</span></span><br><span class="line"><span class="comment">     * 3、存储同一类型的数据，都可以指定成同一分区，分区名默认就是缓存的前缀</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> category</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Caching(evict = &#123;</span></span><br><span class="line"><span class="meta">            @CacheEvict(value = &#123;&quot;category&quot;&#125;,key = &quot;&#x27;getLevel1Categorys&#x27;&quot;),</span></span><br><span class="line"><span class="meta">            @CacheEvict(value = &#123;&quot;category&quot;&#125;,key = &quot;&#x27;getCatelogJson&#x27;&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line"><span class="comment">//    @CacheEvict(value = &#123;&quot;category&quot;&#125;,allEntries = true)</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateCascate</span><span class="params">(CategoryEntity category)</span> &#123;</span><br><span class="line">        <span class="comment">// 更新自己表对象</span></span><br><span class="line">        <span class="built_in">this</span>.updateById(category);</span><br><span class="line">        <span class="comment">// 更新关联表对象</span></span><br><span class="line">        categoryBrandRelationService.updateCategory(category.getCatId(), category.getName());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>总结业务流程：</p>
<p>如果忘了这个技术点看下做的笔记的例子，然后去官网看下文档，温故而知新</p>
<p>流程图</p>
<p><img src="/SpringCache/image-20201228171552816.png" alt="image-20201228171552816"></p>
]]></content>
      <categories>
        <category>缓存</category>
      </categories>
      <tags>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>redis</title>
    <url>/2021/10/28/Java/%E7%BC%93%E5%AD%98/redis/</url>
    <content><![CDATA[<h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><h3 id="前置条件开放自定义端口6376"><a href="#前置条件开放自定义端口6376" class="headerlink" title="前置条件开放自定义端口6376"></a>前置条件开放自定义端口6376</h3><p>vi &#x2F;etc&#x2F;sysconfig&#x2F;iptables<br>-A INPUT -p tcp -m state –state NEW -m tcp –dport 6376 -j ACCEPT<br>service iptables restart</p>
<h3 id="redis安装"><a href="#redis安装" class="headerlink" title="redis安装"></a>redis安装</h3><p>1、拉取redis 6.2.6版本的镜像<br>docker pull redis:6.2.6<br>2、创建数据目录和配置目录<br>mkdir -p &#x2F;mydata&#x2F;redis&#x2F;conf &#x2F;mydata&#x2F;redis&#x2F;data<br>chmod -R 755 &#x2F;mydata&#x2F;redis<br>3、在&#x2F;mydata&#x2F;redis&#x2F;conf下创建自定义的配置文件redis.conf</p>
<p>vim &#x2F;mydata&#x2F;redis&#x2F;conf&#x2F;redis.conf</p>
<p>redis.con内容如下：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#bind 127.0.0.1 设置允许远程连接</span></span><br><span class="line"><span class="keyword">protected</span>-mode no </span><br><span class="line"><span class="meta">#最大连接数</span></span><br><span class="line">maxclients <span class="number">100000</span></span><br><span class="line"><span class="meta">#最大内存</span></span><br><span class="line">maxmemory <span class="number">5</span>G</span><br><span class="line"><span class="meta">#密码</span></span><br><span class="line">requirepass root</span><br></pre></td></tr></table></figure>

<p>4、启动创建容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 6376:6379 --name redis -v /mydata/redis/data:/data -v /mydata/redis/conf:/usr/local/etc/redis -v /etc/localtime:/etc/localtime:ro -d redis:6.2.6 redis-server /usr/local/etc/redis/redis.conf --save 60 1</span><br></pre></td></tr></table></figure>



<p>5、查看容器创建的情况<br>docker ps -a<br>docker exec -it redis &#x2F;bin&#x2F;bash<br>date</p>
<h3 id="redis的使用"><a href="#redis的使用" class="headerlink" title="redis的使用"></a>redis的使用</h3><h4 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1. 导入依赖"></a>1. 导入依赖</h4><p>Springboot 项目中Redis用lettuce连接池，如果长时间不用redis的话，就会断连。</p>
<p>springboot2.0以后默认使用lettuce作为操作redis的客户端，它使用netty进行通信。 lettuce的bug就是高并发导致netty堆对外内存溢出 -Xmx300m; netty如果没有指定对外内存，默认使用的就是300m。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lettuce-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.lettuce<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- jedis客户端 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- spring2.X集成redis所需common-pool2，使用jedis必须依赖它--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>lettuce 的bug导致netty堆外内存溢出， netty 如果没有指定堆内存移除   默认使用 -Xmx300m</p>
<p>1、升级 lettuce客户端，2、 切换使用jedis</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * TODO 产生堆外内存溢出 OutOfDirectMemoryError</span></span><br><span class="line"><span class="comment"> * 1、SpringBoot2.0以后默认使用 Lettuce作为操作redis的客户端，它使用 netty进行网络通信</span></span><br><span class="line"><span class="comment"> * 2、lettuce 的bug导致netty堆外内存溢出，-Xmx300m netty 如果没有指定堆内存移除，</span></span><br><span class="line"><span class="comment"> *      可以通过-Dio.netty.maxDirectMemory 进行设置</span></span><br><span class="line"><span class="comment"> *   解决方案 不能使用 -Dio.netty.maxDirectMemory调大内存</span></span><br><span class="line"><span class="comment"> *   1、升级 lettuce客户端，2、 切换使用jedis</span></span><br><span class="line"><span class="comment"> *   redisTemplate:</span></span><br><span class="line"><span class="comment"> *   lettuce、jedis 操作redis的底层客户端，Spring再次封装</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>





<h4 id="2-application-yaml"><a href="#2-application-yaml" class="headerlink" title="2. application.yaml"></a>2. application.yaml</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.10</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span></span><br></pre></td></tr></table></figure>

<p>RedisAutoConfig.java</p>
<p><img src="/redis/image-20201031154710108.png" alt="image-20201031154710108"></p>
<h4 id="3-测试redis是否可用"><a href="#3-测试redis是否可用" class="headerlink" title="3. 测试redis是否可用"></a>3. 测试redis是否可用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testStringRedisTemplate</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    stringRedisTemplate.opsForValue().set(<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;world_&quot;</span> + UUID.randomUUID().toString());</span><br><span class="line">    <span class="type">String</span> <span class="variable">hello</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;之前保存的数据是：&quot;</span> + hello);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-优化三级分类数据获取"><a href="#4-优化三级分类数据获取" class="headerlink" title="4. 优化三级分类数据获取"></a>4. 优化三级分类数据获取</h4><p>给缓存中放 json 字符串、拿出的是 json 字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, List&lt;Catelog2Vo&gt;&gt; <span class="title function_">getCatelogJson</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给缓存中放 json 字符串、拿出的是 json 字符串，还要逆转为能用的对象类型【序列化和反序列化】</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、加入缓存逻辑，缓存中放的数据是 json 字符串</span></span><br><span class="line">    <span class="comment">// JSON 跨语言，跨平台兼容</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">catelogJSON</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;catelogJSON&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(catelogJSON)) &#123;</span><br><span class="line">        <span class="comment">// 2、缓存没有，从数据库中查询</span></span><br><span class="line">        Map&lt;String, List&lt;Catelog2Vo&gt;&gt; catelogJsonFromDb = getCatelogJsonFromDb();</span><br><span class="line">        <span class="comment">// 3、查询到数据，将数据转成 JSON 后放入缓存中</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> JSON.toJSONString(catelogJsonFromDb);</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;catelogJSON&quot;</span>,s);</span><br><span class="line">        <span class="keyword">return</span> catelogJsonFromDb;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 转换为我们指定的对象</span></span><br><span class="line">    Map&lt;String, List&lt;Catelog2Vo&gt;&gt; result = JSON.parseObject(catelogJSON, <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;Map&lt;String, List&lt;Catelog2Vo&gt;&gt;&gt;() &#123;&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="5-解决雪崩问题-添加过期时间"><a href="#5-解决雪崩问题-添加过期时间" class="headerlink" title="5. 解决雪崩问题,添加过期时间"></a>5. 解决雪崩问题,添加过期时间</h4><p>设置过期时间 解决<strong>雪崩</strong>问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ops.set(<span class="string">&quot;getCatalogJsonFromDB&quot;</span>,s,<span class="number">1</span>, TimeUnit.DAYS);</span><br></pre></td></tr></table></figure>





<h4 id="6-加锁（本地锁）"><a href="#6-加锁（本地锁）" class="headerlink" title="6.加锁（本地锁）"></a>6.加锁（本地锁）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(<span class="built_in">this</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 再次查询是否有数据</span></span><br><span class="line"><span class="type">String</span> <span class="variable">catelogJSON</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;catelogJSON&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (!StringUtils.isEmpty(catelogJSON)) &#123;</span><br><span class="line">			  <span class="comment">// 转换为我们指定的对象</span></span><br><span class="line">    		Map&lt;String, List&lt;Catelog2Vo&gt;&gt; result = JSON.parseObject(catelogJSON, <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;Map&lt;String, List&lt;Catelog2Vo&gt;&gt;&gt;() &#123;&#125;);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">        		</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2. 查询数据库逻辑</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3. 修改为 这个操作：查询到数据，将数据转成 JSON 后放入缓存中  “在锁里面”</span></span><br><span class="line">    <span class="comment">//  将查询数据库 放入缓存的操作 是原子性的操作 在锁中 保证只查询一次数据库</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> JSON.toJSONString(catelogJsonFromDb);</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;catelogJSON&quot;</span>,s);</span><br><span class="line">        <span class="keyword">return</span> catelogJsonFromDb;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>这样加本地锁不对的 只能是一台服务器 只能锁住当前线程 看下面加分布式锁</p>
<h3 id="缓存穿透："><a href="#缓存穿透：" class="headerlink" title="缓存穿透："></a>缓存穿透：</h3><p>大量不存在的数据进行攻击 缓存是不命中，将去查询数据库  数据库压力增大 导致崩溃</p>
<h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>布隆过滤器</p>
<h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>缓存雪崩是指在我们设置缓存时<strong>key采用了相同的过期时间</strong>,导致缓存在某- -时刻同时失效，请求全部转发到DB, DB瞬时压力过重雪崩。</p>
<h4 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h4><p>原有的失效时间基础上增加一个随机值，</p>
<h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>热点key失效</p>
<h4 id="解决：-1"><a href="#解决：-1" class="headerlink" title="解决："></a>解决：</h4><p>1.设置成永久key</p>
<p>2.加锁</p>
<h4 id="加锁方式一"><a href="#加锁方式一" class="headerlink" title="加锁方式一"></a>加锁方式一</h4><p>方式一  public synchronized  xxx(){</p>
<p>}		方法加锁</p>
<p>方式二  synchronized(this) {</p>
<p>​	再次查询缓存是否有数据</p>
<p>}   代码块加锁</p>
<p>springboot所有组件 在容器中都是单例的</p>
<h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><h4 id="分布式锁原理与应用"><a href="#分布式锁原理与应用" class="headerlink" title="分布式锁原理与应用"></a>分布式锁原理与应用</h4><h5 id="分布式锁基本原理"><a href="#分布式锁基本原理" class="headerlink" title="分布式锁基本原理"></a>分布式锁基本原理</h5><p><strong>理解：</strong>就先当1000个人去占一个厕所（setIfAbsent（key,value）），厕所只能有一个人占到这个坑，占到这个坑其他人就只能在外面等待，等待一段时间后可以再次来占坑(调用此方法)，业务执行后，释放锁(delete(key))，那么其他人就可以来占这个坑</p>
<p>setNx  原子性 没有就放数据</p>
<p>setEx  设置过期时间 </p>
<h5 id="分布式锁演进-阶段一-没有设置锁的过期时间"><a href="#分布式锁演进-阶段一-没有设置锁的过期时间" class="headerlink" title="分布式锁演进 - 阶段一   没有设置锁的过期时间"></a>分布式锁演进 - 阶段一   没有设置锁的过期时间</h5><p><strong>问题</strong>:<br>    1、setnx占好 了位,<strong>业务代码异常</strong>或者程序在页面过程中<strong>宕机</strong>。</p>
<p>​		<strong>没有删除锁</strong>，这就造成了死锁.</p>
<p><strong>解决</strong>:</p>
<p>setEx 设置锁的过期时间，即使没有删除，会自动删除</p>
<p>setIfAbsent   : setNx  </p>
<p><strong>代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="分布式锁演进-阶段二"><a href="#分布式锁演进-阶段二" class="headerlink" title="分布式锁演进 - 阶段二"></a>分布式锁演进 - 阶段二</h5><p><img src="/redis/image-20201031123640746.png" alt="image-20201031123640746"></p>
<p><strong>代码：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">1.</span> 加锁  setNx 没有就放数据</span><br><span class="line"><span class="type">Boolean</span> <span class="variable">lock</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">       </span><br><span class="line"><span class="keyword">if</span> (lock) &#123;</span><br><span class="line">            <span class="comment">// 加锁成功..执行业务</span></span><br><span class="line">            Map&lt;String,List&lt;Catelog2Vo&gt;&gt; dataFromDb = getDataFromDB();</span><br><span class="line">            redisTemplate.delete(<span class="string">&quot;lock&quot;</span>); <span class="comment">// 删除锁</span></span><br><span class="line">            <span class="keyword">return</span> dataFromDb;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 加锁失败，重试 synchronized()</span></span><br><span class="line">            <span class="comment">// 休眠100ms重试</span></span><br><span class="line">            <span class="keyword">return</span> getCatelogJsonFromDbWithRedisLock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">问题：业务代码异常或者程序在页面过程中宕机。</span></span><br><span class="line"><span class="comment">没有删除锁，这就造成了死锁.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>设置过期时间  </span><br><span class="line"><span class="type">Boolean</span> <span class="variable">lock</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent()</span><br><span class="line">        <span class="keyword">if</span> (lock) &#123;</span><br><span class="line">            <span class="comment">// 加锁成功..执行业务</span></span><br><span class="line">            <span class="comment">// 设置过期时间</span></span><br><span class="line">            redisTemplate.expire(<span class="string">&quot;lock&quot;</span>,<span class="number">30</span>,TimeUnit.SECONDS);</span><br><span class="line">            Map&lt;String,List&lt;Catelog2Vo&gt;&gt; dataFromDb = getDataFromDB();</span><br><span class="line">            redisTemplate.delete(<span class="string">&quot;lock&quot;</span>); <span class="comment">// 删除锁</span></span><br><span class="line">            <span class="keyword">return</span> dataFromDb;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 加锁失败，重试 synchronized()</span></span><br><span class="line">            <span class="comment">// 休眠100ms重试</span></span><br><span class="line">            <span class="keyword">return</span> getCatelogJsonFromDbWithRedisLock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">问题：业务代码异常或者程序在页面过程中宕机。</span></span><br><span class="line"><span class="comment">没有到设置过期时间，这就造成了死锁.</span></span><br><span class="line"><span class="comment">设置过期时间和占位必须是原子的。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>设置值同时设置过期时间   setEx</span><br><span class="line"><span class="type">Boolean</span> <span class="variable">lock</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>,<span class="string">&quot;111&quot;</span>,<span class="number">300</span>,TimeUnit.SECONDS);</span><br><span class="line"><span class="keyword">if</span> (lock) &#123;</span><br><span class="line">    <span class="comment">// 加锁成功..执行业务</span></span><br><span class="line">    <span class="comment">// 设置过期时间,必须和加锁是同步的，原子的</span></span><br><span class="line">    redisTemplate.expire(<span class="string">&quot;lock&quot;</span>,<span class="number">30</span>,TimeUnit.SECONDS);</span><br><span class="line">    Map&lt;String,List&lt;Catelog2Vo&gt;&gt; dataFromDb = getDataFromDB();</span><br><span class="line">    redisTemplate.delete(<span class="string">&quot;lock&quot;</span>); <span class="comment">// 删除锁</span></span><br><span class="line">    <span class="keyword">return</span> dataFromDb;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 加锁失败，重试 synchronized()</span></span><br><span class="line">    <span class="comment">// 休眠100ms重试</span></span><br><span class="line">    <span class="keyword">return</span> getCatelogJsonFromDbWithRedisLock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">问题：于业务时间很长，锁自己过期了,删除别人的锁</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="number">4.</span>占锁的时候，值指定为uuid,每个人匹配是自己</span><br><span class="line">的锁才删除。</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">问题：如果正好判断是当前值，正要删除锁的时候,锁经过期,</span></span><br><span class="line"><span class="comment">别人已经设置到了新的值。那么我们删除的是别人的锁</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="number">5.</span>删除锁必须保证原子性。使用redis+Lua脚本完成</span><br><span class="line"></span><br><span class="line"> <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        <span class="comment">// 设置值同时设置过期时间</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">lock</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>,uuid,<span class="number">300</span>,TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">if</span> (lock) &#123;</span><br><span class="line">            <span class="comment">// 加锁成功..执行业务</span></span><br><span class="line">            <span class="comment">// 设置过期时间,必须和加锁是同步的，原子的</span></span><br><span class="line"><span class="comment">//            redisTemplate.expire(&quot;lock&quot;,30,TimeUnit.SECONDS);</span></span><br><span class="line">            Map&lt;String,List&lt;Catelog2Vo&gt;&gt; dataFromDb = getDataFromDB();</span><br><span class="line"><span class="comment">//            String lockValue = redisTemplate.opsForValue().get(&quot;lock&quot;);</span></span><br><span class="line"><span class="comment">//            if (lockValue.equals(uuid)) &#123;</span></span><br><span class="line"><span class="comment">//                // 删除我自己的锁</span></span><br><span class="line"><span class="comment">//                redisTemplate.delete(&quot;lock&quot;); // 删除锁</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">// 通过使用lua脚本进行原子性删除</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">script</span> <span class="operator">=</span> <span class="string">&quot;if redis.call(&#x27;get&#x27;,KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;,KEYS[1]) else return 0 end&quot;</span>;</span><br><span class="line">                <span class="comment">//删除锁</span></span><br><span class="line">                <span class="type">Long</span> <span class="variable">lock1</span> <span class="operator">=</span> redisTemplate.execute(<span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;Long&gt;(script, Long.class), Arrays.asList(<span class="string">&quot;lock&quot;</span>), uuid);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> dataFromDb;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 加锁失败，重试 synchronized()</span></span><br><span class="line">            <span class="comment">// 休眠100ms重试</span></span><br><span class="line">            <span class="keyword">return</span> getCatelogJsonFromDbWithRedisLock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">最后</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="number">6.</span>更难的事情，业务时间过长，锁的自动续期 </span><br><span class="line">	<span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        <span class="comment">// 设置值同时设置过期时间</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">lock</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>,uuid,<span class="number">300</span>,TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">if</span> (lock) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;获取分布式锁成功&quot;</span>);</span><br><span class="line">            <span class="comment">// 加锁成功..执行业务</span></span><br><span class="line">            <span class="comment">// 设置过期时间,必须和加锁是同步的，原子的</span></span><br><span class="line"><span class="comment">//            redisTemplate.expire(&quot;lock&quot;,30,TimeUnit.SECONDS);</span></span><br><span class="line">            Map&lt;String,List&lt;Catelog2Vo&gt;&gt; dataFromDb;</span><br><span class="line"><span class="comment">//            String lockValue = redisTemplate.opsForValue().get(&quot;lock&quot;);</span></span><br><span class="line"><span class="comment">//            if (lockValue.equals(uuid)) &#123;</span></span><br><span class="line"><span class="comment">//                // 删除我自己的锁</span></span><br><span class="line"><span class="comment">//                redisTemplate.delete(&quot;lock&quot;); // 删除锁</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                dataFromDb = getDataFromDB();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">script</span> <span class="operator">=</span> <span class="string">&quot;if redis.call(&#x27;get&#x27;,KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;,KEYS[1]) else return 0 end&quot;</span>;</span><br><span class="line">                <span class="comment">//删除锁</span></span><br><span class="line">                <span class="type">Long</span> <span class="variable">lock1</span> <span class="operator">=</span> redisTemplate.execute(<span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;Long&gt;(script, Long.class), Arrays.asList(<span class="string">&quot;lock&quot;</span>), uuid);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> dataFromDb;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 加锁失败，重试 synchronized()</span></span><br><span class="line">            <span class="comment">// 休眠200ms重试</span></span><br><span class="line">            System.out.println(<span class="string">&quot;获取分布式锁失败，等待重试&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123; TimeUnit.MILLISECONDS.sleep(<span class="number">200</span>); &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">            <span class="keyword">return</span> getCatelogJsonFromDbWithRedisLock();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>





<p>问题：</p>
<ul>
<li>分布式加锁解锁都是这两套代码，可以封装成工具类</li>
<li>分布式锁有更专业的框架</li>
</ul>
<h3 id="分布式锁-Redisson"><a href="#分布式锁-Redisson" class="headerlink" title="分布式锁 - Redisson"></a>分布式锁 - Redisson</h3><p>官网文档上.</p>
<p>详细说明了 不推荐使用 setnx来实现分布式锁，应该参考 the Redlock algorithm 的实现</p>
<p><img src="/redis/image-20201101050725534.png" alt="image-20201101050725534"></p>
<p> the Redlock algorithm：<a href="https://redis.io/topics/distlock">https://redis.io/topics/distlock</a></p>
<p>在Java 语言环境下使用 Redisson</p>
<p>github：<a href="https://github.com/redisson/redisson">https://github.com/redisson/redisson</a></p>
<p>有对应的   <a href="https://github.com/redisson/redisson/wiki">中文文档</a></p>
<p><a href="https://github.com/redisson/redisson/wiki/%E7%9B%AE%E5%BD%95">目录</a></p>
<p>在 Maven 仓库中搜索也能搜索出 Redisson</p>
<p><img src="/redis/image-20201101051157803.png" alt="image-20201101051157803"></p>
<h5 id="1、引入依赖"><a href="#1、引入依赖" class="headerlink" title="1、引入依赖"></a>1、引入依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--以后使用 redisson 作为分布锁，分布式对象等功能--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="2、创建RedissonClient"><a href="#2、创建RedissonClient" class="headerlink" title="2、创建RedissonClient"></a>2、创建RedissonClient</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.redisson.Redisson;</span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RedissonClient;</span><br><span class="line"><span class="keyword">import</span> org.redisson.config.Config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRedissonConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean(destroyMethod=&quot;shutdown&quot;)</span></span><br><span class="line">    RedissonClient <span class="title function_">redisson</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="comment">//Redisson需要的配置</span></span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">node</span> <span class="operator">=</span> <span class="string">&quot;8.144.162.164:6376&quot;</span>;<span class="comment">//redis地址</span></span><br><span class="line">        node = node.startsWith(<span class="string">&quot;redis://&quot;</span>) ? node : <span class="string">&quot;redis://&quot;</span> + node;</span><br><span class="line">        <span class="type">SingleServerConfig</span> <span class="variable">serverConfig</span> <span class="operator">=</span> config.useSingleServer()</span><br><span class="line">                .setAddress(node)</span><br><span class="line">                .setTimeout(<span class="number">3000</span>)<span class="comment">//超时时间</span></span><br><span class="line">                .setConnectionPoolSize(<span class="number">10</span>)</span><br><span class="line">                .setConnectionMinimumIdleSize(<span class="number">10</span>);</span><br><span class="line">        serverConfig.setPassword(<span class="string">&quot;root&quot;</span>);<span class="comment">//设置redis密码</span></span><br><span class="line">        <span class="comment">// 创建RedissonClient客户端实例</span></span><br><span class="line">        <span class="type">RedissonClient</span> <span class="variable">redissonClient</span> <span class="operator">=</span> Redisson.create(config);</span><br><span class="line">        <span class="keyword">return</span> redissonClient;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>destroyMethod ： 销毁方法</p>
<h5 id="2、Redisson-Lock-锁测试-Redisson-Lock-看门狗原理-Redisson-如何解决死锁"><a href="#2、Redisson-Lock-锁测试-Redisson-Lock-看门狗原理-Redisson-如何解决死锁" class="headerlink" title="2、Redisson - Lock 锁测试 &amp; Redisson - Lock 看门狗原理 - Redisson 如何解决死锁"></a>2、Redisson - Lock 锁测试 &amp; Redisson - Lock 看门狗原理 - Redisson 如何解决死锁</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 1、获取一把锁，只要锁得名字一样，就是同一把锁</span></span><br><span class="line">    <span class="type">RLock</span> <span class="variable">lock</span> <span class="operator">=</span> redission.getLock(<span class="string">&quot;my-lock&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、加锁</span></span><br><span class="line">    lock.lock(); <span class="comment">// 阻塞式等待，默认加的锁都是30s时间</span></span><br><span class="line">    <span class="comment">//如果业务超长，运行期间过了十秒自动给锁续上新的30s，过了十秒（3分之1开门狗时间 30* 1/3）没有结束再上新的30s</span></span><br><span class="line">   <span class="comment">// 如果我们没有指定锁的超时时间，就是用 30 * 1000 LockWatchchdogTimeout看门狗的默认时间</span></span><br><span class="line">    <span class="comment">//      只要占锁成功，就会启动一个定时任务，【重新给锁设置过期时间，新的过期时间就是看门狗的默认时间】,每隔10s就自动续期</span></span><br><span class="line">    <span class="comment">//      internalLockLeaseTime【看门狗时间】 /3,10s</span></span><br><span class="line"></span><br><span class="line">    lock.lock(<span class="number">10</span>, TimeUnit.SECONDS); <span class="comment">//10s 后自动删除   没有自动续期操作</span></span><br><span class="line">    <span class="comment">//问题 lock.lock(10, TimeUnit.SECONDS) 在锁时间到了后，不会自动续期</span></span><br><span class="line">    <span class="comment">// 1、如果我们传递了锁的超时时间，执行lua脚本 就发送给 redis 执行脚本，进行占锁，默认超时就是我们指定的时间   </span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//推荐使用</span></span><br><span class="line">    <span class="comment">// lock.lock(10, TimeUnit.SECONDS);    省掉了整个续期操作，手动解锁</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;加锁成功，执行业务...&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 解锁 将设解锁代码没有运行，reidsson会不会出现死锁</span></span><br><span class="line">        System.out.println(<span class="string">&quot;释放锁....&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Redisson-Lock-源码"><a href="#Redisson-Lock-源码" class="headerlink" title="Redisson Lock 源码"></a><code>Redisson</code> Lock 源码</h5><p>1、进入 <code>Lock</code> 的实现 发现 他调用的也是 <code>lock</code> 方法参数  时间为 -1</p>
<p><img src="/redis/image-20201101051659465.png" alt="image-20201101051659465"></p>
<p>2、再次进入 <code>lock</code> 方法</p>
<p>发现他调用了 tryAcquire</p>
<p><img src="/redis/image-20201101051925487.png" alt="image-20201101051925487"></p>
<p>3、进入 tryAcquire</p>
<p><img src="/redis/image-20201101052008724.png" alt="image-20201101052008724"></p>
<p>4、里头调用了 tryAcquireAsync</p>
<p>这里判断 laseTime !&#x3D; -1 就与刚刚的第一步传入的值有关系</p>
<p><img src="/redis/image-20201101052037959.png" alt="image-20201101052037959"></p>
<p>5、进入到 <code>tryLockInnerAsync</code> 方法</p>
<p><img src="/redis/image-20201101052158592.png" alt="image-20201101052158592"></p>
<p>6、<code>internalLockLeaseTime</code> 这个变量是锁的默认时间</p>
<p>这个变量在构造的时候就赋初始值</p>
<p><img src="/redis/image-20201101052346059.png" alt="image-20201101052346059"></p>
<p>7、最后查看 <code>lockWatchdogTimeout</code> 变量</p>
<p>也就是30秒的时间</p>
<p><img src="/redis/image-20201101052428198.png" alt="image-20201101052428198"></p>
<h5 id="3、Reidsson-读写锁"><a href="#3、Reidsson-读写锁" class="headerlink" title="3、Reidsson - 读写锁"></a>3、Reidsson - 读写锁</h5><p>写锁没释放,读锁就必须等待</p>
<p>有读锁，写也需要等待</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保证一定能读取到最新数据，修改期间，写锁是一个排他锁（互斥锁，独享锁）读锁是一个共享锁</span></span><br><span class="line"><span class="comment">     * 写锁没释放读锁就必须等待</span></span><br><span class="line"><span class="comment">     * 读 + 读 相当于无锁，并发读，只会在 reids中记录好，所有当前的读锁，他们都会同时加锁成功</span></span><br><span class="line"><span class="comment">     * 写 + 读 等待写锁释放</span></span><br><span class="line"><span class="comment">     * 写 + 写 阻塞方式</span></span><br><span class="line"><span class="comment">     * 读 + 写 有读锁，写也需要等待</span></span><br><span class="line"><span class="comment">     * 只要有写的存在，都必须等待</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/write&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">writeValue</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">RReadWriteLock</span> <span class="variable">lock</span> <span class="operator">=</span> redission.getReadWriteLock(<span class="string">&quot;rw_lock&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">RLock</span> <span class="variable">rLock</span> <span class="operator">=</span> lock.writeLock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1、改数据加写锁，读数据加读锁</span></span><br><span class="line">            rLock.lock();</span><br><span class="line">            System.out.println(<span class="string">&quot;写锁加锁成功...&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">            s = UUID.randomUUID().toString();</span><br><span class="line">            <span class="keyword">try</span> &#123; TimeUnit.SECONDS.sleep(<span class="number">3</span>); &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">            redisTemplate.opsForValue().set(<span class="string">&quot;writeValue&quot;</span>,s);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            rLock.unlock();</span><br><span class="line">            System.out.println(<span class="string">&quot;写锁释放...&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/read&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">readValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">RReadWriteLock</span> <span class="variable">lock</span> <span class="operator">=</span> redission.getReadWriteLock(<span class="string">&quot;rw_lock&quot;</span>);</span><br><span class="line">        <span class="type">RLock</span> <span class="variable">rLock</span> <span class="operator">=</span> lock.readLock();</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        rLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;读锁加锁成功...&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">            s = (String) redisTemplate.opsForValue().get(<span class="string">&quot;writeValue&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123; TimeUnit.SECONDS.sleep(<span class="number">3</span>); &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; e.printStackTrace(); &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            rLock.unlock();</span><br><span class="line">            System.out.println(<span class="string">&quot;读锁释放...&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>来看下官网的解释</p>
<p><img src="/redis/image-20201101053042268.png" alt="image-20201101053042268"></p>
<h5 id="4、Redisson-闭锁测试"><a href="#4、Redisson-闭锁测试" class="headerlink" title="4、Redisson - 闭锁测试"></a>4、Redisson - 闭锁测试</h5><p>官网！！！</p>
<p><img src="/redis/image-20201101053053554.png" alt="image-20201101053053554"></p>
<p>上代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 放假锁门</span></span><br><span class="line"><span class="comment"> * 1班没人了</span></span><br><span class="line"><span class="comment"> * 5个班级走完，我们可以锁们了</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/lockDoor&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">lockDoor</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">RCountDownLatch</span> <span class="variable">door</span> <span class="operator">=</span> redission.getCountDownLatch(<span class="string">&quot;door&quot;</span>);</span><br><span class="line">    door.trySetCount(<span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    door.await();<span class="comment">//等待闭锁都完成</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">///gogogo/&#123;id&#125; 请求五次</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;放假了....&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@GetMapping(&quot;/gogogo/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">gogogo</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">    <span class="type">RCountDownLatch</span> <span class="variable">door</span> <span class="operator">=</span> redission.getCountDownLatch(<span class="string">&quot;door&quot;</span>);</span><br><span class="line">    door.countDown();<span class="comment">// 计数器减一</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> id + <span class="string">&quot;班的人走完了.....&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>和 JUC 的 CountDownLatch 一致</p>
<p>await()等待闭锁完成</p>
<p>countDown() 把计数器减掉后 await就会放行</p>
<h5 id="5、Redisson-信号量测试"><a href="#5、Redisson-信号量测试" class="headerlink" title="5、Redisson - 信号量测试"></a>5、Redisson - 信号量测试</h5><p>官网！！！</p>
<p><img src="/redis/image-20201101053450708.png" alt="image-20201101053450708"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 车库停车</span></span><br><span class="line"><span class="comment"> * 3车位</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/park&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">park</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">RSemaphore</span> <span class="variable">park</span> <span class="operator">=</span> redission.getSemaphore(<span class="string">&quot;park&quot;</span>);</span><br><span class="line">    <span class="comment">//boolean b = park.acquire();//占用一个车位</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> park.tryAcquire();<span class="comment">//获取一个信号，获取一个值，占用一个车位</span></span><br><span class="line">	<span class="keyword">if</span>()&#123;</span><br><span class="line">		<span class="comment">//获取信号量成功执行业务</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> xxx;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok=&quot;</span> + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/go&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">go</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">RSemaphore</span> <span class="variable">park</span> <span class="operator">=</span> redission.getSemaphore(<span class="string">&quot;park&quot;</span>);</span><br><span class="line"></span><br><span class="line">    park.release(); <span class="comment">//释放一个车位</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>类似 JUC 中的 Semaphore </p>
<h5 id="Redission-缓存一致性解决"><a href="#Redission-缓存一致性解决" class="headerlink" title="Redission - 缓存一致性解决"></a>Redission - 缓存一致性解决</h5>]]></content>
      <categories>
        <category>缓存</category>
      </categories>
      <tags>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>缓存数据一致性</title>
    <url>/2021/11/02/Java/%E7%BC%93%E5%AD%98/%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<h3 id="缓存数据一致性"><a href="#缓存数据一致性" class="headerlink" title="缓存数据一致性"></a>缓存数据一致性</h3><h4 id="缓存数据一致性-双写模式"><a href="#缓存数据一致性-双写模式" class="headerlink" title="缓存数据一致性 - 双写模式"></a>缓存数据一致性 - 双写模式</h4><p><img src="/%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7%E8%A7%A3%E5%86%B3/image-20201101053613373.png" alt="image-20201101053613373"></p>
<p>两个线程写 最终只有一个线程写成功，后写成功的会把之前写的数据给覆盖，这就会造成脏数据</p>
<h4 id="缓存数据一致性-失效模式"><a href="#缓存数据一致性-失效模式" class="headerlink" title="缓存数据一致性 - 失效模式"></a>缓存数据一致性 - 失效模式</h4><p><img src="/%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7%E8%A7%A3%E5%86%B3/image-20201101053834126.png" alt="image-20201101053834126"></p>
<p>三个连接 </p>
<p>一号连接写 写数据库 然后删缓存</p>
<p>二号连接写 写数据库时网络连接慢，还没有写入成功</p>
<p>三号链接读 直接读取数据，读到的是一号连接写入的数据，此时 二号链接写入数据成功并删除了缓存，三号开始更新缓存发现更新的是二号的缓存</p>
<h4 id="缓存数据一致性解决方案"><a href="#缓存数据一致性解决方案" class="headerlink" title="缓存数据一致性解决方案"></a>缓存数据一致性解决方案</h4><p>无论是双写模式还是失效模式，都会到这缓存不一致的问题，即多个实力同时更新会出事，怎么办？</p>
<ul>
<li>1、如果是用户纯度数据（订单数据、用户数据），这并发几率很小，几乎不用考虑这个问题，缓存数据加上过期时间，每隔一段时间触发读的主动更新即可</li>
<li>2、如果是菜单，商品介绍等基础数据，也可以去使用 canal 订阅，binlog 的方式</li>
<li>3、缓存数据 + 过期时间也足够解决大部分业务对缓存的要求</li>
<li>4、通过加锁保证并发读写，写写的时候按照顺序排好队，读读无所谓，所以适合读写锁，（业务不关心脏数据，允许临时脏数据可忽略）</li>
</ul>
<p>总结:</p>
<ul>
<li>我们能放入缓存的数据本来就不应该是实时性、一致性要求超高的。所以缓存数据的时候加上<strong>过期时间</strong>，保证每天拿到当前的最新值即可</li>
<li>我们不应该过度设计，增加系统的复杂性</li>
<li>遇到实时性、一致性要求高的数据，就应该<strong>查数据库</strong>，即使慢点</li>
</ul>
<p><img src="/%E7%BC%93%E5%AD%98%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7%E8%A7%A3%E5%86%B3/image-20201101054937769.png" alt="image-20201101054937769"></p>
<p>最后符上 三级分类数据 加上分布式锁</p>
]]></content>
      <categories>
        <category>缓存</category>
      </categories>
      <tags>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>自定义异常处理</title>
    <url>/2021/05/11/Java/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice(basePackages = &quot;com.yg.product.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">mallExceptionControllerAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//先进入精确匹配异常处理</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = MethodArgumentNotValidException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">handleValidException</span><span class="params">(MethodArgumentNotValidException e)</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;数据校验出现问题&#123;&#125;,异常类型: &#123;&#125;&quot;</span>,e.getMessage(),e.getClass());</span><br><span class="line">        <span class="type">BindingResult</span> <span class="variable">bindingResult</span> <span class="operator">=</span> e.getBindingResult();</span><br><span class="line">        Map&lt;String, String&gt; errorMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        bindingResult.getFieldErrors().forEach((fieldError -&gt; &#123;</span><br><span class="line">            errorMap.put(fieldError.getField(),fieldError.getDefaultMessage());</span><br><span class="line">        &#125;));</span><br><span class="line">        <span class="keyword">return</span> R.error(BizCodeEnum.VALID_EXCEPTION.getCode(),BizCodeEnum.VALID_EXCEPTION.getMsg()).put(<span class="string">&quot;data&quot;</span>,errorMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = Throwable.class)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">handleException</span><span class="params">(Throwable throwable)</span> &#123;</span><br><span class="line">        log.error(<span class="string">&quot;错误:&quot;</span>, throwable);</span><br><span class="line">        <span class="keyword">return</span> R.error(BizCodeEnum.UNKNOWN_EXCEPTION.getCode(),BizCodeEnum.UNKNOWN_EXCEPTION.getMsg());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="异常错误码定义"><a href="#异常错误码定义" class="headerlink" title="异常错误码定义"></a>异常错误码定义</h2><p>后端将定义的错误码写入到开发手册，前端出现对于的错误，就可以通过手册查询到对应的异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 错误码和错误信息定义类</span></span><br><span class="line"><span class="comment"> * 1. 错误码定义规则为5为数字</span></span><br><span class="line"><span class="comment"> * 2. 前两位表示业务场景，最后三位表示错误码。例如：100001。10:通用 001:系统未知异常</span></span><br><span class="line"><span class="comment"> * 3. 维护错误码后需要维护错误描述，将他们定义为枚举形式</span></span><br><span class="line"><span class="comment"> * 错误码列表：</span></span><br><span class="line"><span class="comment"> *  10: 通用</span></span><br><span class="line"><span class="comment"> *      001：参数格式校验</span></span><br><span class="line"><span class="comment"> *  11: 商品</span></span><br><span class="line"><span class="comment"> *  12: 订单</span></span><br><span class="line"><span class="comment"> *  13: 购物车</span></span><br><span class="line"><span class="comment"> *  14: 物流</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">BizCodeEnume</span> &#123;</span><br><span class="line">    UNKNOW_EXCEPTION(<span class="number">10000</span>,<span class="string">&quot;系统未知异常&quot;</span>),</span><br><span class="line">    VAILD_EXCEPTION(<span class="number">10001</span>,<span class="string">&quot;参数格式校验失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    BizCodeEnume(<span class="type">int</span> code,String msg)&#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>异常</category>
      </categories>
      <tags>
        <tag>异常</tag>
      </tags>
  </entry>
  <entry>
    <title>跨域的解决</title>
    <url>/2020/10/06/Java/%E8%B7%A8%E5%9F%9F/%E8%B7%A8%E5%9F%9F/</url>
    <content><![CDATA[<h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><blockquote>
<p>指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是浏览器对javascript施加的安全限制。</p>
</blockquote>
<p>同源策略：是指协议，域名，端口都要相同，其中有一个不同都会产生跨域；</p>
<p>解决：发送预检请求options</p>
<p><img src="/%E8%B7%A8%E5%9F%9F/image-20220125011709995.png" alt="image-20220125011709995"></p>
<p><img src="/%E8%B7%A8%E5%9F%9F/image-20220121205039740.png" alt="image-20220121205039740"></p>
<p>跨越设置</p>
<p>请求先发送到网关，网关在转发给其他服务  事先都要注册到<strong>注册中心</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GulimallCorsConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsWebFilter <span class="title function_">corsWebFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">corsConfiguration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置跨越</span></span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">&quot;*&quot;</span>); <span class="comment">// 允许那些头</span></span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">&quot;*&quot;</span>); <span class="comment">// 允许那些请求方式</span></span><br><span class="line">        corsConfiguration.addAllowedOrigin(<span class="string">&quot;*&quot;</span>); <span class="comment">//  允许请求来源</span></span><br><span class="line">        corsConfiguration.setAllowCredentials(<span class="literal">true</span>); <span class="comment">// 是否允许携带cookie跨越</span></span><br><span class="line">        <span class="comment">// 注册跨越配置</span></span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>,corsConfiguration);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsWebFilter</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>锁</title>
    <url>/2021/05/05/Java/%E9%94%81/%E9%94%81/</url>
    <content><![CDATA[<h1 id="从-synchronized-到-CAS-和-AQS"><a href="#从-synchronized-到-CAS-和-AQS" class="headerlink" title="从 synchronized 到 CAS 和 AQS"></a>从 synchronized 到 CAS 和 AQS</h1><p>Java 中的并发锁大致分为隐式锁和显式锁两种。</p>
<p>隐式锁就是我们最常使用的 synchronized 关键字，</p>
<p>显式锁主要包含两个接口：Lock 和 ReadWriteLock，主要实现类分别为 ReentrantLock 和 ReentrantReadWriteLock，这两个类都是基于 AQS(AbstractQueuedSynchronizer) 实现的。</p>
<p>还有的地方将 CAS 也称为一种锁，在包括 AQS 在内的很多<strong>并发相关类</strong>中，CAS 都扮演了很重要的角色。</p>
<h2 id="可重入锁和不可重入锁"><a href="#可重入锁和不可重入锁" class="headerlink" title="可重入锁和不可重入锁"></a>可重入锁和不可重入锁</h2><p>如果一个线程已经获取到了一个锁，那么它可以访问被这个锁锁住的所有代码块。</p>
<p>不可重入锁与之相反。</p>
<h2 id="Synchronized-关键字"><a href="#Synchronized-关键字" class="headerlink" title="Synchronized 关键字"></a>Synchronized 关键字</h2><p>Synchronized 是一种独占锁。在修饰静态方法时，锁的是类对象，如 Object.class。修饰非静态方法时，锁的是对象，即 this。</p>
<p>修饰方法块时，锁的是括号里的对象。 每个对象有一个锁和一个等待队列，锁只能被一个线程持有，其他需要锁的线程需要阻塞等待。锁被释放后，对象会从队列中取出一个并唤醒，唤醒哪个线程是不确定的，不保证公平性。</p>
<h2 id="类锁与对象锁"><a href="#类锁与对象锁" class="headerlink" title="类锁与对象锁"></a>类锁与对象锁</h2><p>synchronized 修饰静态方法时，锁的是类对象,如 Object.class。修饰非静态方法时，锁的是对象，即 this。 多个线程是可以同时执行同一个synchronized实例方法的，只要它们访问的对象是不同的。</p>
<p>synchronized 锁住的是对象而非代码，只要访问的是同一个对象的 synchronized 方法，即使是不同的代码，也会被同步顺序访问。</p>
<p>此外，需要说明的，synchronized方法不能防止非synchronized方法被同时执行，所以，一般在保护变量时，需要在所有访问该变量的方法上加上synchronized。</p>
<h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>synchronized 是基于 Java 对象头和 Monitor 机制来实现的。</p>
<h3 id="Java-对象头"><a href="#Java-对象头" class="headerlink" title="Java 对象头"></a>Java 对象头</h3><p>一个对象在内存中包含三部分：对象头，实例数据和对齐填充。其中 Java 对象头包含两部分：</p>
<ul>
<li>Class Metadata Address （类型指针）。存储类的元数据的指针。虚拟机通过这个指针找到它是哪个类的实例。</li>
<li>Mark Word（标记字段）。存出一些对象自身运行时的数据。包括哈希码，GC 分代年龄，锁状态标志等。</li>
</ul>
<h3 id="Monitor"><a href="#Monitor" class="headerlink" title="Monitor"></a>Monitor</h3><p>Mark Word 有一个字段指向 monitor 对象。monitor 中记录了锁的持有线程，等待的线程队列等信息。前面说的每个对象都有一个锁和一个等待队列，就是在这里实现的。 monitor 对象由 C++ 实现。其中有三个关键字段：</p>
<ul>
<li>_owner 记录当前持有锁的线程</li>
<li>_EntryList 是一个队列，记录所有阻塞等待锁的线程</li>
<li>_WaitSet 也是一个队列，记录调用 wait() 方法并还未被通知的线程。</li>
</ul>
<p>Monitor的操作机制如下：</p>
<ol>
<li>多个线程竞争锁时，会先进入 EntryList 队列。竞争成功的线程被标记为 Owner。其他线程继续在此队列中阻塞等待。</li>
<li>如果 Owner 线程调用 wait() 方法，则其释放对象锁并进入 WaitSet 中等待被唤醒。Owner 被置空，EntryList 中的线程再次竞争锁。</li>
<li>如果 Owner 线程执行完了，便会释放锁，Owner 被置空，EntryList 中的线程再次竞争锁。</li>
</ol>
<h3 id="JVM-对-synchronized-的处理"><a href="#JVM-对-synchronized-的处理" class="headerlink" title="JVM 对 synchronized 的处理"></a>JVM 对 synchronized 的处理</h3><p>上面了解了 monitor 的机制，那虚拟机是如何将 synchronized 和 monitor 关联起来的呢？分两种情况：</p>
<ul>
<li>如果同步的是代码块，编译时会直接在同步代码块前加上 monitorenter 指令，代码块后加上 monitorexit 指令。这称为显示同步。</li>
<li>如果同步的是方法，虚拟机会为方法设置 ACC_SYNCHRONIZED 标志。调用的时候 JVM 根据这个标志判断是否是同步方法。</li>
</ul>
<h2 id="JVM-对-synchronized-的优化"><a href="#JVM-对-synchronized-的优化" class="headerlink" title="JVM 对 synchronized 的优化"></a>JVM 对 synchronized 的优化</h2><p>synchronized 是重量级锁，由于消耗太大，虚拟机对其做了一些优化。</p>
<h3 id="自旋锁与自适应自旋"><a href="#自旋锁与自适应自旋" class="headerlink" title="自旋锁与自适应自旋"></a>自旋锁与自适应自旋</h3><p>在许多应用中，锁定状态只会持续很短的时间，为了这么一点时间去挂起恢复线程，不值得。我们可以让等待线程执行一定次数的循环，在循环中去获取锁。这项技术称为自旋锁，它可以节省系统切换线程的消耗，但仍然要占用处理器。在 JDK1.4.2 中，自选的次数可以通过参数来控制。 JDK 1.6又引入了自适应的自旋锁，不再通过次数来限制，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。</p>
<h3 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h3><p>虚拟机在运行时，如果发现一段被锁住的代码中不可能存在共享数据，就会将这个锁清除。</p>
<h3 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h3><p>当虚拟机检测到有一串零碎的操作都对同一个对象加锁时，会把锁扩展到整个操作序列外部。如 StringBuffer 的 append 操作。</p>
<h3 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h3><p>对绝大部分的锁来说，在整个同步周期内都不存在竞争。如果没有竞争，轻量级锁可以使用 CAS 操作避免使用互斥量的开销。</p>
<h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><p>偏向锁的核心思想是，如果一个线程获得了锁，那么锁就进入偏向模式，当这个线程再次请求锁时，无需再做任何同步操作，即可获取锁。</p>
<h1 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h1><h2 id="操作模型"><a href="#操作模型" class="headerlink" title="操作模型"></a>操作模型</h2><p>CAS 是 compare and swap 的简写，即比较并交换。它是指一种操作机制，而不是某个具体的类或方法。在 Java 平台上对这种操作进行了包装。在 Unsafe 类中，调用代码如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unsafe.compareAndSwapInt(this, valueOffset, expect, update);</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>它需要三个参数，分别是内存位置 V，旧的预期值 A 和新的值 B。操作时，先从内存位置读取到值，然后和预期值A比较。如果相等，则将此内存位置的值改为新值 B，返回 true。如果不相等，说明和其他线程冲突了，则不做任何改变，返回 false。</p>
<p>这种机制在不阻塞其他线程的情况下避免了并发冲突，比独占锁的性能高很多。 CAS 在 Java 的原子类和并发包中有大量使用。</p>
<h2 id="重试机制（循环-CAS）"><a href="#重试机制（循环-CAS）" class="headerlink" title="重试机制（循环 CAS）"></a>重试机制（循环 CAS）</h2><p><strong>有很多文章说，CAS 操作失败后会一直重试直到成功，这种说法很不严谨。</strong></p>
<p>第一，CAS 本身并未实现失败后的处理机制，它只负责返回成功或失败的布尔值，后续由调用者自行处理。只不过我们最常用的处理方式是重试而已。</p>
<p>第二，这句话很容易理解错，被理解成重新比较并交换。实际上失败的时候，原值已经被修改，如果不更改期望值，再怎么比较都会失败。而新值同样需要修改。</p>
<p>所以正确的方法是，使用一个死循环进行 CAS 操作，成功了就结束循环返回，失败了就重新从内存读取值和计算新值，再调用 CAS。看下 AtomicInteger 的源码就什么都懂了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public final int incrementAndGet () &#123;</span><br><span class="line">    for (;;) &#123;</span><br><span class="line">        int current = get();</span><br><span class="line">        int next = current + 1;</span><br><span class="line">        if (compareAndSet(current, next))</span><br><span class="line">            return next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h2 id="底层实现"><a href="#底层实现" class="headerlink" title="底层实现"></a>底层实现</h2><p>CAS 主要分三步，读取-比较-修改。其中比较是在检测是否有冲突，如果检测到没有冲突后，其他线程还能修改这个值，那么 CAS 还是无法保证正确性。所以最关键的是要保证比较-修改这两步操作的原子性。</p>
<p>CAS 底层是靠调用 CPU 指令集的 cmpxchg 完成的，它是 x86 和 Intel 架构中的 compare and exchange 指令。在多核的情况下，这个指令也不能保证原子性，需要在前面加上 lock 指令。lock 指令可以保证一个 CPU 核心在操作期间独占一片内存区域。那么 这又是如何实现的呢？</p>
<p>在处理器中，一般有两种方式来实现上述效果：总线锁和缓存锁。在多核处理器的结构中，CPU 核心并不能直接访问内存，而是统一通过一条总线访问。总线锁就是锁住这条总线，使其他核心无法访问内存。这种方式代价太大了，会导致其他核心停止工作。而缓存锁并不锁定总线，只是锁定某部分内存区域。当一个 CPU 核心将内存区域的数据读取到自己的缓存区后，它会锁定缓存对应的内存区域。锁住期间，其他核心无法操作这块内存区域。</p>
<p>CAS 就是通过这种方式实现比较和交换操作的原子性的。<strong>值得注意的是， CAS 只是保证了操作的原子性，并不保证变量的可见性，因此变量需要加上 volatile 关键字。</strong></p>
<h2 id="ABA-问题"><a href="#ABA-问题" class="headerlink" title="ABA 问题"></a>ABA 问题</h2><p>上面提到，CAS 保证了比较和交换的原子性。但是从读取到开始比较这段期间，其他核心仍然是可以修改这个值的。如果核心将 A 修改为 B，CAS 可以判断出来。但是如果核心将 A 修改为 B 再修改回 A。那么 CAS 会认为这个值并没有被改变，从而继续操作。这是和实际情况不符的。解决方案是加一个版本号。</p>
<h1 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h1><p>AQS 全称 AbstractQueuedSynchronizer。AQS 中有两个重要的成员：</p>
<ul>
<li>成员变量 state。用于表示锁现在的状态，用 volatile 修饰，保证内存一致性。</li>
<li>同时所用对 state 的操作都是使用 CAS 进行的。state 为0表示没有任何线程持有这个锁，线程持有该锁后将 state 加1，释放时减1。多次持有释放则多次加减。</li>
<li>还有一个双向链表，链表除了头结点外，每一个节点都记录了线程的信息，代表一个等待线程。这是一个 FIFO 的链表。</li>
</ul>
<p>下面以 ReentrantLock 非公平锁的代码看看 AQS 的原理。</p>
<h2 id="请求锁"><a href="#请求锁" class="headerlink" title="请求锁"></a>请求锁</h2><p>请求锁时有三种可能：</p>
<ol>
<li>如果没有线程持有锁，则请求成功，当前线程直接获取到锁。</li>
<li>如果当前线程已经持有锁，则使用 CAS 将 state 值加1，表示自己再次申请了锁，释放锁时减1。这就是可重入性的实现。</li>
<li>如果由其他线程持有锁，那么将自己添加进等待队列。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">final void lock() &#123;</span><br><span class="line">    if (compareAndSetState(0, 1))   </span><br><span class="line">        setExclusiveOwnerThread(Thread.currentThread()); //没有线程持有锁时，直接获取锁，对应情况1</span><br><span class="line">    else</span><br><span class="line">        acquire(1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public final void acquire(int arg) &#123;</span><br><span class="line">    if (!tryAcquire(arg) &amp;&amp; //在此方法中会判断当前持有线程是否等于自己，对应情况2</span><br><span class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg)) //将自己加入队列中，对应情况3</span><br><span class="line">        selfInterrupt();</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h2 id="创建-Node-节点并加入链表"><a href="#创建-Node-节点并加入链表" class="headerlink" title="创建 Node 节点并加入链表"></a>创建 Node 节点并加入链表</h2><p>如果没竞争到锁，这时候就要进入等待队列。队列是默认有一个 head 节点的，并且不包含线程信息。上面情况3中，addWaiter 会创建一个 Node，并添加到链表的末尾，Node 中持有当前线程的引用。同时还有一个成员变量 waitStatus，表示线程的等待状态，初始值为0。我们还需要关注两个值：</p>
<ul>
<li>CANCELLED，值为1，表示取消状态，就是说我不要这个锁了，请你把我移出去。</li>
<li>SINGAL，值为-1，表示下一个节点正在挂起等待，注意是下一个节点，不是当前节点。</li>
</ul>
<p>同时，加到链表末尾的操作使用了 CAS+死循环的模式，很有代表性，拿出来看一看：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Node node = new Node(mode);</span><br><span class="line">for (;;) &#123;</span><br><span class="line">    Node oldTail = tail;</span><br><span class="line">    if (oldTail != null) &#123;</span><br><span class="line">        U.putObject(node, Node.PREV, oldTail);</span><br><span class="line">        if (compareAndSetTail(oldTail, node)) &#123;</span><br><span class="line">            oldTail.next = node;</span><br><span class="line">            return node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        initializeSyncQueue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>可以看到，在死循环里调用了 CAS 的方法。如果多个线程同时调用该方法，那么每次循环都只有一个线程执行成功，其他线程进入下一次循环，重新调用。N个线程就会循环N次。这样就在无锁的模式下实现了并发模型。</p>
<h2 id="挂起等待"><a href="#挂起等待" class="headerlink" title="挂起等待"></a>挂起等待</h2><ul>
<li>如果此节点的上一个节点是头部节点，则再次尝试获取锁，获取到了就移除并返回。获取不到就进入下一步；</li>
<li>判断前一个节点的 waitStatus，如果是 SINGAL，则返回 true，并调用 LockSupport.park() 将线程挂起；</li>
<li>如果是 CANCELLED，则将前一个节点移除；</li>
<li>如果是其他值，则将前一个节点的 waitStatus 标记为 SINGAL，进入下一次循环。</li>
</ul>
<p>可以看到，一个线程最多有两次机会，还竞争不到就去挂起等待。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">final boolean acquireQueued(final Node node, int arg) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        boolean interrupted = false;</span><br><span class="line">        for (;;) &#123;</span><br><span class="line">            final Node p = node.predecessor();</span><br><span class="line">            if (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">                setHead(node);</span><br><span class="line">                p.next = null; // help GC</span><br><span class="line">                return interrupted;</span><br><span class="line">            &#125;</span><br><span class="line">            if (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                parkAndCheckInterrupt())</span><br><span class="line">                interrupted = true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; catch (Throwable t) &#123;</span><br><span class="line">        cancelAcquire(node);</span><br><span class="line">        throw t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h2 id="释放锁"><a href="#释放锁" class="headerlink" title="释放锁"></a>释放锁</h2><ul>
<li>调用 tryRelease，此方法由子类实现。实现非常简单，如果当前线程是持有锁的线程，就将 state 减1。减完后如果 state 大于0，表示当前线程仍然持有锁，返回 false。如果等于0，表示已经没有线程持有锁，返回 true，进入下一步；</li>
<li>如果头部节点的 waitStatus 不等于0，则调用LockSupport.unpark()唤醒其下一个节点。头部节点的下一个节点就是等待队列中的第一个线程，这反映了 AQS 先进先出的特点。另外，即使是非公平锁，进入队列之后，还是得按顺序来。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public final boolean release(int arg) &#123;</span><br><span class="line">    if (tryRelease(arg)) &#123; //将 state 减1</span><br><span class="line">        Node h = head;</span><br><span class="line">        if (h != null &amp;&amp; h.waitStatus != 0)</span><br><span class="line">            unparkSuccessor(h);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void unparkSuccessor(Node node) &#123;</span><br><span class="line">    int ws = node.waitStatus;</span><br><span class="line">    if (ws &lt; 0)</span><br><span class="line">        node.compareAndSetWaitStatus(ws, 0);</span><br><span class="line">        </span><br><span class="line">    Node s = node.next;</span><br><span class="line">    if (s == null || s.waitStatus &gt; 0) &#123; </span><br><span class="line">        s = null;</span><br><span class="line">        for (Node p = tail; p != node &amp;&amp; p != null; p = p.prev)</span><br><span class="line">            if (p.waitStatus &lt;= 0)</span><br><span class="line">                s = p;</span><br><span class="line">    &#125;</span><br><span class="line">    if (s != null) //唤醒第一个等待的线程</span><br><span class="line">        LockSupport.unpark(s.thread);</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<h2 id="公平锁如何实现"><a href="#公平锁如何实现" class="headerlink" title="公平锁如何实现"></a>公平锁如何实现</h2><p>上面分析的是非公平锁，那公平锁呢？很简单，在竞争锁之前判断一下等待队列中有没有线程在等待就行了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">protected final boolean tryAcquire(int acquires) &#123;</span><br><span class="line">    final Thread current = Thread.currentThread();</span><br><span class="line">    int c = getState();</span><br><span class="line">    if (c == 0) &#123;</span><br><span class="line">        if (!hasQueuedPredecessors() &amp;&amp; //判断等待队列是否有节点</span><br><span class="line">            compareAndSetState(0, acquires)) &#123;</span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>





<h2 id="AQS用到了设计模式"><a href="#AQS用到了设计模式" class="headerlink" title="AQS用到了设计模式"></a>AQS用到了设计模式</h2><h3 id="模板方法设计模式"><a href="#模板方法设计模式" class="headerlink" title="模板方法设计模式"></a>模板方法设计模式</h3><p>AQS这个抽象类把模板方法设计模式运用地炉火纯青，它里面定义了一系列的模板方法，比如下面这些：</p>
<p>获取锁、释放锁的这些方法基本上都穿插在ReentrantLock、ReentrantReadWriteLock、CountDownLatch的源码解析中了，现在看他们是不是舒服多了，如果一开始就看这些源码，难免会很晕。</p>
<p>这几个方法为什么不直接定义成抽象方法呢？</p>
<p>因为子类只要实现这几个方法中的一部分就可以实现一个同步器了，所以不需要定义成抽象方法。</p>
<p>定义：封装一个模板结构，将具体内容延迟到子类去实现</p>
<p>将多个类共有的方法和功能抽取出来，封装到抽象类，对于这些公有方法（模板方法）使用final修饰，需要通过子类扩张的定义成抽象（abstract）方法，有子类实现其自有特性。</p>
<p>JDK AQS 抽象队列同步器就是一个构建锁和同步器的模板，使用它可以构建ReentrantLock（独占型），CountDownLacth（共享型），Semaphore（共享型）等同步组件。</p>
<p>AQS定义的可重写的方法：</p>
<ul>
<li><strong>protected boolean isHeldExclusively() ： 是否在独占模式下被线程占用。只有用到condition才需要去实现它</strong></li>
<li><strong>protected boolean tryAcquire(int arg) : 独占方式。尝试获取资源，成功则返回true，失败则返回false</strong></li>
<li><strong>protected boolean tryRelease(int arg) ：独占方式。尝试释放资源，成功则返回true，失败则返回false</strong></li>
<li><strong>protected int tryAcquireShared(int arg) ：共享方式。尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源</strong></li>
<li><strong>protected boolean tryReleaseShared(int arg) ：共享方式。尝试释放资源，如果释放后允许唤醒后续等待结点返回true，否则返回false</strong></li>
</ul>
<p>如果我们需要实现一个<strong>自定义的同步器</strong>，就只需要继承<strong>AQS</strong>，然后根据需求去重写响应的方法，</p>
<p>比如要实现<strong>独占锁</strong>，就实现tryAcquire()，tryRelease()方法，ReentrantLock就是这样做的，</p>
<p>同样，要实现<strong>共享锁</strong>，就需要实现tryAcquireShared()，tryReleaseShared()方法，比如Semaphore，CountDownLatch，</p>
<p>最后在要实现的组件中调用AQS中定义的模板方法。</p>
<p>在ReentrantLock中，我们只需要实现对state进行简单的获取释放操作，至于获取资源失败，构建节点加入等待队列，线程阻塞唤醒一系列逻辑在AQS的模板方法中已经帮我们实现了。</p>
<p><strong>AQS为我们定义好顶级逻辑的骨架，并提取出公用的线程入队列&#x2F;出队列，阻塞&#x2F;唤醒等一系列复杂逻辑的实现，将部分简单的可由使用者决定的操作逻辑延迟到子类中去实现即可</strong></p>
<p><strong>为什么上面定义的四个方法不是模板方法模式要求的抽象方法，让子类实现呢？</strong></p>
<p>这是因为在独占锁中不需要实现tryAcquireShared()，tryReleaseShared()方法，而在共享锁中，也不需要tryAcquire()，tryRelease()方法，它们各自有自己的实现，如果定义成抽象方法，就必须实现所有，所以使用重写。</p>
<p>下面实现一个自定义的同步器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelfSynchronizer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Sync</span> <span class="variable">sync</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Sync</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">        sync.acquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.tryAcquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">unLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sync.release(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Sync</span> <span class="keyword">extends</span> <span class="title class_">AbstractQueuedSynchronizer</span> &#123;</span><br><span class="line">        <span class="comment">//是否处于占用状态</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">isHeldExclusively</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> getState() == <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取同步资源</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> acquires</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryAcquire</span><span class="params">(<span class="type">int</span> acquires)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(compareAndSetState(<span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//这里没有考虑可重入锁</span></span><br><span class="line">            <span class="comment">/*else if (Thread.currentThread() == getExclusiveOwnerThread()) &#123;</span></span><br><span class="line"><span class="comment">                int nextc = c + acquires;</span></span><br><span class="line"><span class="comment">                if (nextc &lt; 0) // overflow</span></span><br><span class="line"><span class="comment">                    throw new Error(&quot;Maximum lock count exceeded&quot;);</span></span><br><span class="line"><span class="comment">                setState(nextc);</span></span><br><span class="line"><span class="comment">                return true;</span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 释放同步资源</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> releases</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">tryRelease</span><span class="params">(<span class="type">int</span> releases)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> getState() - releases;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">free</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">                free = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            setState(c);</span><br><span class="line">            <span class="keyword">return</span> free;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>ReentrantLock源码和上面自定义的同步器很相似，<br>测试下该同步器，i++在多线程下执行情况：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSelfSynchronizer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SelfSynchronizer</span> <span class="variable">selfSynchronizer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SelfSynchronizer</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ThreadPoolExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">20</span>, <span class="number">50</span>, <span class="number">1</span>, TimeUnit.SECONDS,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ExecutorService</span> <span class="variable">ec</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span> ; i++) &#123;</span><br><span class="line">            executor.submit(<span class="keyword">new</span> <span class="title class_">Task</span>());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">20</span> ; j++) &#123;</span><br><span class="line">            ec.submit(<span class="keyword">new</span> <span class="title class_">TaskSync</span>());</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a的值：&quot;</span>+ a);</span><br><span class="line">        System.out.println(<span class="string">&quot;b的值&quot;</span> + b);</span><br><span class="line">        executor.shutdown();</span><br><span class="line">        ec.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Task</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++) &#123;</span><br><span class="line">                a++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TaskSync</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            	<span class="comment">//使用同步器加锁</span></span><br><span class="line">                selfSynchronizer.lock();</span><br><span class="line">                b++;</span><br><span class="line">                selfSynchronizer.unLock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>开启两个线程池，对int型变量自增10000次，如果不加同步器，最后值小于200000，使用了自定义同步器则最后值正常等于200000，这是因为每次自增操作加锁</p>
<h2 id="添加到queue队尾步骤"><a href="#添加到queue队尾步骤" class="headerlink" title="添加到queue队尾步骤"></a>添加到queue队尾步骤</h2><p> 将一个节点node添加到sync queue的末尾需要三步：</p>
<p><img src="/%E9%94%81/1415006-20200107160316392-893797227.png" alt="img"></p>
<p> 设置node的前驱节点为当前的尾节点：node.prev &#x3D; t</p>
<p>修改tail属性，使它指向当前节点 </p>
<p>修改原来的尾节点，使它的next指向当前节点尾分叉。</p>
<p>需要注意，这里的三步并不是一个原子操作，第一步很容易成功；而第二步由于是一个CAS操作，在并发条件下有可能失败，第三步只有在第二步成功的条件下才执行。这里的CAS保证了同一时刻只有一个节点能成为尾节点，其他节点将失败，失败后将回到for循环中继续重试所以，当有大量的线程在同时入队的时候，同一时刻，只有一个线程能完整地完成这三步，而其他线程只能完成第一步，于是就出现了尾分叉：</p>
<p><img src="/%E9%94%81/1415006-20200107160457634-2047001299.png" alt="img"></p>
<p> 这 里第三步是在第二步执行成功后才执行的，这就意味着，有可能即使我们已经完成了第二步，将新的节点设置成了尾节点，此时原来旧的尾节点的next值可能还 是null(因为还没有来的及执行第三步)，++++++++++++</p>
<p>另一方面，当我们完成了第二步之后，第一步一定是完成了的，所以如果我们从尾节点开始向前遍历，已经可以遍历到所有的节点。</p>
<p>这也就是为什么我们在AQS相关的源码中 (比如:unparkSuccessor(Node node) 中的：</p>
<p> 1 for (Node t &#x3D; tail; t !&#x3D; null &amp;&amp; t !&#x3D; node; t &#x3D; t.prev)) </p>
<p>通常是从尾节点开始逆向遍历链表——因为一个节点要能入队，则它的prev属性一定是有值的，但是它的next属性可能暂时还没有值。</p>
<p>至于那些“分叉”的入队失败的其他节点，在下一轮的循环中，它们的prev属性会重新指向新的尾节点，继续尝试新的CAS操作，最终，所有节点都会通过自旋不断的尝试入队，直到成功为止。</p>
<h1 id="可重入读写锁-ReentrantReadWriteLock"><a href="#可重入读写锁-ReentrantReadWriteLock" class="headerlink" title="可重入读写锁 ReentrantReadWriteLock"></a>可重入读写锁 ReentrantReadWriteLock</h1><h2 id="读写锁机制"><a href="#读写锁机制" class="headerlink" title="读写锁机制"></a>读写锁机制</h2><p>理解 ReentrantLock 和 AQS 之后，再来理解读写锁就很简单了。读写锁有一个读锁和一个写锁，分别对应读操作和锁操作。锁的特性如下：</p>
<ul>
<li>只有一个线程可以获取到写锁。在获取写锁时，只有没有任何线程持有任何锁才能获取成功；</li>
<li>如果有线程正持有写锁，其他任何线程都获取不到任何锁；</li>
<li>没有线程持有写锁时，可以有多个线程获取到读锁。</li>
</ul>
<p>上面锁的特点保证了可以并发读取，这大大提高了效率，在实际开发中非常有用。那么在具体是如何实现的呢？</p>
<h2 id="实现原理-1"><a href="#实现原理-1" class="headerlink" title="实现原理"></a>实现原理</h2><p>读写锁虽然有两个锁，但实际上只有一个等待队列。</p>
<ul>
<li>获取写锁时，要保证没有任何线程持有锁；</li>
<li>写锁释放后，会唤醒队列第一个线程，可能是读锁和写锁；</li>
<li>获取读锁时，先判断写锁有没有被持有，没有就可以获取成功；</li>
<li>获取读锁成功后，会将队列中等待读锁的线程挨个唤醒，知道遇到等待写锁的线程位置；</li>
<li>释放读锁时，要检查读锁数，如果为0，则唤醒队列中的下一个线程，否则不进行操作。</li>
</ul>
<h1 id="可重入锁与不可重入锁"><a href="#可重入锁与不可重入锁" class="headerlink" title="可重入锁与不可重入锁"></a>可重入锁与不可重入锁</h1><h1 id="可重入锁-ReentrantLock"><a href="#可重入锁-ReentrantLock" class="headerlink" title="可重入锁 ReentrantLock"></a>可重入锁 ReentrantLock</h1><p>ReentrantLock 使用代码实现了和 synchronized 一样的语义，包括可重入，保证内存可见性和解决竞态条件问题等。相比 synchronized，它还有如下好处：</p>
<ul>
<li>支持以非阻塞方式获取锁</li>
<li>可以响应中断</li>
<li>可以限时</li>
<li>支持了公平锁和非公平锁</li>
</ul>
<p>基本用法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Counter &#123;</span><br><span class="line">    private final Lock lock = new ReentrantLock();</span><br><span class="line">    private volatile int count;</span><br><span class="line"></span><br><span class="line">    public void incr() &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        try &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getCount() &#123;</span><br><span class="line">        return count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure>

<p>ReentrantLock 内部有两个内部类，分别是 FairSync 和 NoFairSync，对应公平锁和非公平锁。他们都继承自 Sync。Sync 又继承自AQS。</p>
<ul>
<li><p>可重入锁：</p>
<p>可重入 <strong>就是说某个线程已经获得某个锁，可以再次获取锁而不会出现死锁。</strong></p>
<p>防止在同一线程中多次获取锁而导致死锁发生。</p>
<p>synchronized 和 ReentrantLock都是可重入锁</p>
</li>
<li><p>不可重入锁</p>
</li>
</ul>
<p>不可重入锁，举个例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Count</span>&#123;</span><br><span class="line"> <span class="number">2</span>     <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Lock</span>();</span><br><span class="line"> <span class="number">3</span>     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="number">4</span>         lock.lock();</span><br><span class="line"> <span class="number">5</span>         doAdd();</span><br><span class="line"> <span class="number">6</span>         lock.unlock();</span><br><span class="line"> <span class="number">7</span>     &#125;</span><br><span class="line"> <span class="number">8</span>     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAdd</span><span class="params">()</span>&#123;</span><br><span class="line"> <span class="number">9</span>         lock.lock();</span><br><span class="line"><span class="number">10</span>         <span class="comment">//do something</span></span><br><span class="line"><span class="number">11</span>         lock.unlock();</span><br><span class="line"><span class="number">12</span>     &#125;</span><br><span class="line"><span class="number">13</span> &#125;</span><br></pre></td></tr></table></figure>

<p>当调用print()方法时，获得了锁，这时就无法再调用doAdd()方法，这时必须先释放锁才能调用，所以称这种锁为不可重入锁，也叫自旋锁。</p>
<h2 id="ReentrantLock可重入锁的例子"><a href="#ReentrantLock可重入锁的例子" class="headerlink" title="ReentrantLock可重入锁的例子"></a>ReentrantLock可重入锁的例子</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReentrantLockDemo</span> &#123;</span><br><span class="line">    <span class="comment">//锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span>  <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//进入递归第一件事：加锁</span></span><br><span class="line">            lock.lock();</span><br><span class="line">            log.info(<span class="string">&quot;--------lock()执行后，当前线程持有此锁的次数：&#123;&#125; 是否有线程持有:&#123;&#125;&quot;</span>,lock.getHoldCount(),lock.isLocked());</span><br><span class="line">            log.info(<span class="string">&quot;--------递归&#123;&#125;次--------&quot;</span>,n);</span><br><span class="line">            <span class="keyword">if</span>(n&lt;=<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="built_in">this</span>.doSomething(++n);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">            log.info(<span class="string">&quot;--------unlock()执行后，当前线程持有此锁的次数：&#123;&#125; 是否有线程持有:&#123;&#125;&quot;</span>,lock.getHoldCount(),lock.isLocked());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ReentrantLockDemo reentrantLockDemo=<span class="keyword">new</span> <span class="title class_">ReentrantLockDemo</span>();</span><br><span class="line">        reentrantLockDemo.doSomething(<span class="number">1</span>);</span><br><span class="line">        log.info(<span class="string">&quot;执行完doSomething方法 是否还持有锁：&#123;&#125;&quot;</span>,lock.isLocked());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>lock.getHoldCount()    当前线程持有此锁的次数，如果当前线程未持有此锁，则为零</p>
</blockquote>
<blockquote>
<p>lock.isLocked()  查询此锁是否由任何线程持有。</p>
</blockquote>
<h3 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- --------lock()执行后，当前线程持有此锁的次数：1 是否有线程持有:true</span><br><span class="line">- --------递归1次--------</span><br><span class="line">- --------lock()执行后，当前线程持有此锁的次数：2 是否有线程持有:true</span><br><span class="line">- --------递归2次--------</span><br><span class="line">- --------lock()执行后，当前线程持有此锁的次数：3 是否有线程持有:true</span><br><span class="line">- --------递归3次--------</span><br><span class="line">- --------unlock()执行后，当前线程持有此锁的次数：2 是否有线程持有:true</span><br><span class="line">- --------unlock()执行后，当前线程持有此锁的次数：1 是否有线程持有:true</span><br><span class="line">- --------unlock()执行后，当前线程持有此锁的次数：0 是否有线程持有:false</span><br><span class="line">- 执行完doSomething方法 是否还持有锁：false</span><br></pre></td></tr></table></figure>

<h6 id="从上面可以看出ReentrantLock是可重入锁，"><a href="#从上面可以看出ReentrantLock是可重入锁，" class="headerlink" title="从上面可以看出ReentrantLock是可重入锁，"></a>从上面可以看出ReentrantLock是可重入锁，</h6><h6 id="那么他是如何实现的了，我们看下源码就知道了"><a href="#那么他是如何实现的了，我们看下源码就知道了" class="headerlink" title="那么他是如何实现的了，我们看下源码就知道了"></a>那么他是如何实现的了，我们看下源码就知道了</h6><h2 id="ReentrantLock源码"><a href="#ReentrantLock源码" class="headerlink" title="ReentrantLock源码"></a>ReentrantLock源码</h2><h3 id="ReentrantLock的加锁流程是："><a href="#ReentrantLock的加锁流程是：" class="headerlink" title="ReentrantLock的加锁流程是："></a>ReentrantLock的加锁流程是：</h3><p>1，先判断是否有线程持有锁，没有加锁进行加锁<br>2、如果加锁成功，则设置持有锁的线程是当前线程<br>3、如果有线程持有了锁，则再去判断，是否是当前线程持有了锁<br>4、如果是当前线程持有锁，则加锁数量（state）+1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">nonfairTryAcquire</span><span class="params">(<span class="type">int</span> acquires)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> getState();</span><br><span class="line">        <span class="comment">//先判断，c（state）是否等于0，如果等于0，说明没有线程持有锁</span></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//通过cas方法把state的值0替换成1，替换成功说明加锁成功</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">                <span class="comment">//如果加锁成功，设置持有锁的线程是当前线程</span></span><br><span class="line">                setExclusiveOwnerThread(current);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;<span class="comment">//判断当前持有锁的线程是否是当前线程</span></span><br><span class="line">            <span class="comment">//如果是当前线程，则state值加acquires，代表了当前线程加锁了多少次</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">nextc</span> <span class="operator">=</span> c + acquires;</span><br><span class="line">            <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Maximum lock count exceeded&quot;</span>);</span><br><span class="line">            setState(nextc);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="ReentrantLock的加锁流程是：-1"><a href="#ReentrantLock的加锁流程是：-1" class="headerlink" title="ReentrantLock的加锁流程是："></a>ReentrantLock的加锁流程是：</h3><p>看ReentrantLock的解锁代码我们知道，每次释放锁的时候都对state减1，<br>当c值等于0的时候，说明锁重入次数也为0了，<br>最终设置当前持有锁的线程为null,state也设置为0，锁就释放了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 释放锁</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> releases</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">tryRelease</span><span class="params">(<span class="type">int</span> releases)</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> getState() - releases;<span class="comment">//state-1 减加锁次数</span></span><br><span class="line">            <span class="comment">//如果持有锁的线程，不是当前线程，抛出异常</span></span><br><span class="line">            <span class="keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalMonitorStateException</span>();</span><br><span class="line"></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">free</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;<span class="comment">//如果c==0了说明当前线程，已经要释放锁了</span></span><br><span class="line">                free = <span class="literal">true</span>;</span><br><span class="line">                setExclusiveOwnerThread(<span class="literal">null</span>);<span class="comment">//设置当前持有锁的线程为null</span></span><br><span class="line">            &#125;</span><br><span class="line">            setState(c);<span class="comment">//设置c的值</span></span><br><span class="line">            <span class="keyword">return</span> free;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>



<p>看ReentrantLock的源码我们知道，它是加锁成功了，记录了当前持有锁的线程，并通过一个int类型的数字，来记录了加锁次数。</p>
<h2 id="redis-SET方式实现可重入锁的问题"><a href="#redis-SET方式实现可重入锁的问题" class="headerlink" title="redis SET方式实现可重入锁的问题"></a>redis SET方式实现可重入锁的问题</h2><h4 id="那么redis要怎么实现可重入的操作了？"><a href="#那么redis要怎么实现可重入的操作了？" class="headerlink" title="那么redis要怎么实现可重入的操作了？"></a>那么redis要怎么实现可重入的操作了？</h4><p>我们知道ReentrantLock的实现原理了，那么redis只要下面两个问题解决，就能实现重入锁了：<br>1、怎么保存当前持有的线程<br>2、加锁次数（重入了多少次），怎么记录维护</p>
<h5 id="1、第一个问题：怎么保存当前持有的线程"><a href="#1、第一个问题：怎么保存当前持有的线程" class="headerlink" title="1、第一个问题：怎么保存当前持有的线程"></a>1、第一个问题：怎么保存当前持有的线程</h5><p>1.valus值我们可以保存当前线程的id来解决。</p>
<p>\2. 但是集群环境下我们线程id可能是重复了那怎么解决？<br>项目在启动的生成一个全局进程id，使用进程id+线程id 那就是唯一的了</p>
<h5 id="2、第二个问题：加锁次数（重入了多少次），怎么记录维护"><a href="#2、第二个问题：加锁次数（重入了多少次），怎么记录维护" class="headerlink" title="2、第二个问题：加锁次数（重入了多少次），怎么记录维护"></a>2、第二个问题：加锁次数（重入了多少次），怎么记录维护</h5><ol>
<li>他能记录下来加锁次数吗？<br>如果valus值存的格式是：系进程id+线程id+加锁次数，那可以实现</li>
<li>存没问题了，但是重入次数要怎么维护了， 它肯定要保证原子性的，能解决吗？<br>好像用java代码或者lua脚本都没法解决，因为都是实现都需要两步来维护这个重入次数的</li>
</ol>
<ul>
<li>第一步：先获取到valus值，把取到加锁次数+1</li>
<li>第二部：把新的值再设置进去</li>
<li>在执行第二步操作之前，如果这个key失效了（设置持有锁超时了），如果还能再设置进去，就会有并发问题了</li>
</ul>
<h4 id="我们已经知道SET是不支持重入锁的，但我们需要重入锁，怎么办呢？"><a href="#我们已经知道SET是不支持重入锁的，但我们需要重入锁，怎么办呢？" class="headerlink" title="我们已经知道SET是不支持重入锁的，但我们需要重入锁，怎么办呢？"></a>我们已经知道SET是不支持重入锁的，但我们需要重入锁，怎么办呢？</h4><p>目前对于redis的重入锁业界还是有很多解决方案的，最流行的就是采用Redisson。</p>
<h2 id="Redisson可重入锁的例子"><a href="#Redisson可重入锁的例子" class="headerlink" title="Redisson可重入锁的例子"></a>Redisson可重入锁的例子</h2><h4 id="什么是-Redisson？"><a href="#什么是-Redisson？" class="headerlink" title="什么是 Redisson？"></a>什么是 Redisson？</h4><p>Redisson是Redis官方推荐的Java版的Redis客户端。 它基于Java实用工具包中常用接口，为使用者提供了一系列具有分布式特性的常用工具类。 它在网络通信上是基于NIO的Netty框架，保证网络通信的高性能。 在分布式锁的功能上，它提供了一系列的分布式锁；如：可重入锁（Reentrant Lock）、公平锁（Fair Lock、联锁（MultiLock）、 红锁（RedLock）、 读写锁（ReadWriteLock）等等。</p>
<blockquote>
<p><a href="https://github.com/redisson/redisson">Redisson github地址</a></p>
</blockquote>
<h4 id="Redisson的分布锁如何使用"><a href="#Redisson的分布锁如何使用" class="headerlink" title="Redisson的分布锁如何使用"></a>Redisson的分布锁如何使用</h4><h6 id="引入依赖包"><a href="#引入依赖包" class="headerlink" title="引入依赖包"></a>引入依赖包</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.redisson&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;redisson&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;3.15.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;  </span><br></pre></td></tr></table></figure>

<h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.redisson.Redisson;</span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RLock;</span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RedissonClient;</span><br><span class="line"><span class="keyword">import</span> org.redisson.config.Config;</span><br><span class="line"><span class="keyword">import</span> org.redisson.config.SingleServerConfig;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedissonLockDemo</span> &#123;</span><br><span class="line">    <span class="comment">//锁</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> RLock lock;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//Redisson需要的配置</span></span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">node</span> <span class="operator">=</span> <span class="string">&quot;8.144.162.164:6376&quot;</span>;<span class="comment">//redis地址</span></span><br><span class="line">        node = node.startsWith(<span class="string">&quot;redis://&quot;</span>) ? node : <span class="string">&quot;redis://&quot;</span> + node;</span><br><span class="line">        <span class="type">SingleServerConfig</span> <span class="variable">serverConfig</span> <span class="operator">=</span> config.useSingleServer()</span><br><span class="line">                .setAddress(node)</span><br><span class="line">                .setTimeout(<span class="number">5000</span>)<span class="comment">//超时时间</span></span><br><span class="line">                .setConnectionPoolSize(<span class="number">10</span>)</span><br><span class="line">                .setConnectionMinimumIdleSize(<span class="number">10</span>);</span><br><span class="line">        serverConfig.setPassword(<span class="string">&quot;root&quot;</span>);<span class="comment">//设置redis密码</span></span><br><span class="line">        <span class="comment">// 创建RedissonClient客户端实例</span></span><br><span class="line">        <span class="type">RedissonClient</span> <span class="variable">redissonClient</span> <span class="operator">=</span> Redisson.create(config);</span><br><span class="line">        <span class="comment">//创建redisson的分布式锁</span></span><br><span class="line">        <span class="type">RLock</span> <span class="variable">rLock</span> <span class="operator">=</span> redissonClient.getLock(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">        lock = rLock;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//进入递归第一件事：加锁</span></span><br><span class="line">            lock.lock();</span><br><span class="line">            log.info(<span class="string">&quot;--------lock()执行后，当前线程持有此锁的次数：&#123;&#125; 是否有线程持有:&#123;&#125;&quot;</span>,lock.getHoldCount(),lock.isLocked());</span><br><span class="line">            log.info(<span class="string">&quot;--------递归&#123;&#125;次--------&quot;</span>,n);</span><br><span class="line">            <span class="keyword">if</span>(n&lt;=<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="built_in">this</span>.doSomething(++n);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">            log.info(<span class="string">&quot;--------lock()执行后，当前线程持有此锁的次数：&#123;&#125; 是否有线程持有:&#123;&#125;&quot;</span>,lock.getHoldCount(),lock.isLocked());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;--------------start---------------&quot;</span>);</span><br><span class="line">        RedissonLockDemo reentrantLockDemo=<span class="keyword">new</span> <span class="title class_">RedissonLockDemo</span>();</span><br><span class="line">        reentrantLockDemo.doSomething(<span class="number">1</span>);</span><br><span class="line">        log.info(<span class="string">&quot;执行完doSomething方法 是否还持有锁：&#123;&#125;&quot;</span>, RedissonLockDemo.lock.isLocked());</span><br><span class="line">        log.info(<span class="string">&quot;--------------end---------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="执行结果-1"><a href="#执行结果-1" class="headerlink" title="执行结果"></a>执行结果</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---------start---------------</span><br><span class="line">- --------lock()执行后，当前线程持有此锁的次数：1 是否有线程持有:true</span><br><span class="line">- --------递归1次--------</span><br><span class="line">- --------lock()执行后，当前线程持有此锁的次数：2 是否有线程持有:true</span><br><span class="line">- --------递归2次--------</span><br><span class="line">- --------lock()执行后，当前线程持有此锁的次数：3 是否有线程持有:true</span><br><span class="line">- --------递归3次--------</span><br><span class="line">- --------lock()执行后，当前线程持有此锁的次数：2 是否有线程持有:true</span><br><span class="line">- --------lock()执行后，当前线程持有此锁的次数：1 是否有线程持有:true</span><br><span class="line">- --------lock()执行后，当前线程持有此锁的次数：0 是否有线程持有:false</span><br><span class="line">- 执行完doSomething方法 是否还持有锁：false</span><br><span class="line">- --------------end---------------</span><br></pre></td></tr></table></figure>

<p>看控制台打印能清楚知道Redisson是支持可重入锁了。</p>
<h4 id="那么Redisson是如何实现的了？"><a href="#那么Redisson是如何实现的了？" class="headerlink" title="那么Redisson是如何实现的了？"></a>那么Redisson是如何实现的了？</h4><p>我们跟一下lock.lock()的代码，发现它最终调用的是org.redisson.RedissonLock#tryLockInnerAsync的方法,具体如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;T&gt; RFuture&lt;T&gt; <span class="title function_">tryLockInnerAsync</span><span class="params">(<span class="type">long</span> waitTime, <span class="type">long</span> leaseTime, TimeUnit unit, <span class="type">long</span> threadId, RedisStrictCommand&lt;T&gt; command)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> evalWriteAsync(getRawName(), LongCodec.INSTANCE, command,</span><br><span class="line">            <span class="string">&quot;if (redis.call(&#x27;exists&#x27;, KEYS[1]) == 0) then &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;return nil; &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[2]) == 1) then &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[2], 1); &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[1]); &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;return nil; &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;end; &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;return redis.call(&#x27;pttl&#x27;, KEYS[1]);&quot;</span>,</span><br><span class="line">            Collections.singletonList(getRawName()), unit.toMillis(leaseTime), getLockName(threadId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码可以看到，它是使用lua脚本来保证多个命令执行的原子性，使用了hash来实现了分布式锁<br>现在我们来看下lua脚本的加锁流程</p>
<h6 id="第一个if判断"><a href="#第一个if判断" class="headerlink" title="第一个if判断"></a><strong>第一个if判断</strong></h6><ul>
<li>3行：它是先判断了当前key是否存在，从EXISTS命令我们知道返回值是0说明key不存在，说明没有加锁</li>
<li>4行：hincrby命令是对 ARGV[2] &#x3D; 进程ID+系统ID 进行原子自增加1</li>
<li>5行：是对整个hash设置过期期间</li>
</ul>
<h6 id="下面来看第二个if判断"><a href="#下面来看第二个if判断" class="headerlink" title="下面来看第二个if判断"></a><strong>下面来看第二个if判断</strong></h6><ul>
<li>8行：判断field是否存在于hash中，如果存在返回1，返回1说明是当前进程+当前线程ID 之前已经获得到锁了</li>
<li>9行：hincrby命令是对 ARGV[2] &#x3D; 进程ID+系统ID 进行原子自增加1，说明重入次数加1了</li>
<li>10行：再对整个hash设置过期期间</li>
</ul>
<h5 id="上面的代码，用到的redis命令先梳理一下"><a href="#上面的代码，用到的redis命令先梳理一下" class="headerlink" title="上面的代码，用到的redis命令先梳理一下"></a>上面的代码，用到的redis命令先梳理一下</h5><ul>
<li><strong>exists</strong> 查询一个key是否存在</li>
</ul>
<blockquote>
<p>EXISTS key [key …]<br><strong>返回值</strong><br>如下的整数结果<br>1 如果key存在<br>0 如果key不存在</p>
</blockquote>
<ul>
<li><strong>hincrby</strong> ：将hash中指定域的值增加给定的数字</li>
<li><strong>pexpire</strong>：设置key的有效时间以毫秒为单位</li>
<li><strong>hexists</strong>：判断field是否存在于hash中</li>
<li><strong>pttl</strong>：获取key的有效毫秒数</li>
</ul>
<h6 id="看lua脚本传入的参数我们知道："><a href="#看lua脚本传入的参数我们知道：" class="headerlink" title="看lua脚本传入的参数我们知道："></a>看lua脚本传入的参数我们知道：</h6><ul>
<li>KEYS[1] &#x3D; key的值</li>
<li>ARGV[1]) &#x3D; 持有锁的时间</li>
<li>ARGV[2] &#x3D; getLockName(threadId) 下面id就算系统在启动的时候会全局生成的uuid 来作为当前进程的id，加上线程id就是getLockName(threadId)了，可以理解为：进程ID+系统ID &#x3D; ARGV[2]</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> String <span class="title function_">getLockName</span><span class="params">(<span class="type">long</span> threadId)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> id + <span class="string">&quot;:&quot;</span> + threadId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<h6 id="下图是redis可视化工具看到是如何在hash存储的结构"><a href="#下图是redis可视化工具看到是如何在hash存储的结构" class="headerlink" title="下图是redis可视化工具看到是如何在hash存储的结构"></a>下图是redis可视化工具看到是如何在hash存储的结构</h6><p><img src="/%E9%94%81/2333726-20210523232655820-588475643.png" alt="image"></p>
<blockquote>
<p>Redisson的整个加锁流程跟ReentrantLock的加锁逻辑基本相同</p>
</blockquote>
<h6 id="解锁代码位于-org-redisson-RedissonLock-unlockInnerAsync-如下："><a href="#解锁代码位于-org-redisson-RedissonLock-unlockInnerAsync-如下：" class="headerlink" title="解锁代码位于 org.redisson.RedissonLock#unlockInnerAsync,如下："></a>解锁代码位于 org.redisson.RedissonLock#unlockInnerAsync,如下：</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    return evalWriteAsync(getRawName(), LongCodec.INSTANCE, RedisCommands.EVAL_BOOLEAN,</span><br><span class="line">            &quot;if (redis.call(&#x27;hexists&#x27;, KEYS[1], ARGV[3]) == 0) then &quot; +</span><br><span class="line">                    &quot;return nil;&quot; +</span><br><span class="line">                    &quot;end; &quot; +</span><br><span class="line">                    &quot;local counter = redis.call(&#x27;hincrby&#x27;, KEYS[1], ARGV[3], -1); &quot; +</span><br><span class="line">                    &quot;if (counter &gt; 0) then &quot; +</span><br><span class="line">                    &quot;redis.call(&#x27;pexpire&#x27;, KEYS[1], ARGV[2]); &quot; +</span><br><span class="line">                    &quot;return 0; &quot; +</span><br><span class="line">                    &quot;else &quot; +</span><br><span class="line">                    &quot;redis.call(&#x27;del&#x27;, KEYS[1]); &quot; +</span><br><span class="line">                    &quot;redis.call(&#x27;publish&#x27;, KEYS[2], ARGV[1]); &quot; +</span><br><span class="line">                    &quot;return 1; &quot; +</span><br><span class="line">                    &quot;end; &quot; +</span><br><span class="line">                    &quot;return nil;&quot;,</span><br><span class="line">            Arrays.asList(getRawName(), getChannelName()), LockPubSub.UNLOCK_MESSAGE, internalLockLeaseTime, getLockName(threadId));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>看这个解锁的Lua脚本，流程跟Reentrantlock的解锁逻辑也基本相同</p>
</blockquote>
<h1 id="乐观锁和悲观锁"><a href="#乐观锁和悲观锁" class="headerlink" title="乐观锁和悲观锁"></a>乐观锁和悲观锁</h1><p>悲观锁和独占锁是一个意思，它假设一定会发生冲突，因此获取到锁之后会阻塞其他等待线程。这么做的好处是简单安全，但是挂起线程和恢复线程都需要转入内核态进行，这样做会带来很大的性能开销。悲观锁的代表是 synchronized。</p>
<p>然而在真实环境中，大部分时候都不会产生冲突。</p>
<p>悲观锁会造成很大的浪费。而乐观锁不一样，它假设不会产生冲突，先去尝试执行某项操作，失败了再进行其他处理（一般都是不断循环重试）。这种锁不会阻塞其他的线程，也不涉及上下文切换，性能开销小。代表实现是 CAS。</p>
<p>①. 悲观锁(synchronized关键字和Lock的实现类都是悲观锁)</p>
<p>悲观锁概念</p>
<p>认为自己在<strong>使用数据的时候一定有别的线程来修改数据</strong>,因此在获取数据的时候会先加锁,确保数据不会被别的线程修改</p>
<p>适合场景</p>
<p>适合写操作多的场景,先加锁可以保证写操作时数据正确(写操作包括增删改)、显式的锁定之后再操作同步资源</p>
<p>②. 乐观锁</p>
<p> 乐观锁概念</p>
<p>乐观锁认为自己在<strong>使用数据时不会有别的线程修改数据</strong>,所以不会添加锁,</p>
<p>只是在更新数据的时候去判断之前有没有别的线程更新了这个数据。</p>
<p>如果这个数据没有被更新,当前线程将自己修改的数据成功写入。</p>
<p>如果数据已经被其他线程更新,则根据不同的实现方式执行不同的操作。</p>
<p>适合场景</p>
<ol>
<li>适合读操作多的场景,不加锁的特点能够使其读操作的性能大幅度提升</li>
</ol>
<p>实现</p>
<p>乐观锁一般有两种实现方式(采用版本号机制、CAS算法实现)</p>
<p>乐观锁在Java中通过使用无锁编程来实现，最常采用的时CAS算法,Java原子类中的递增操作就通过CAS自旋实现的</p>
<p>代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//悲观锁的调用方式</span><br><span class="line">public synchronized void m1()&#123;</span><br><span class="line">    //加锁后的业务逻辑</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//保证多个线程使用的是同一个lock对象的前提下</span><br><span class="line">ReetrantLock lock=new ReentrantLock();</span><br><span class="line">public void m2()&#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    try&#123;</span><br><span class="line">        //操作同步资源</span><br><span class="line">    &#125;finally&#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//乐观锁的调用方式</span><br><span class="line">//保证多个线程使用的是同一个AtomicInteger</span><br><span class="line">private  AtomicInteger atomicIntege=new AtomicInteger();</span><br><span class="line">atomicIntege.incrementAndGet();</span><br></pre></td></tr></table></figure>

<p>AtomicInteger    一个提供原子操作的Integer的类。在Java语言中，++i和i++操作并不是线程安全的，在使用的时候，不可避免的会用到synchronized关键字。而AtomicInteger则通过一种线程安全的加减操作接口。</p>
<p>public final int get() &#x2F;&#x2F;获取当前的值<br>public final int getAndSet(int newValue)&#x2F;&#x2F;获取当前的值，并设置新的值<br>public final int getAndIncrement()&#x2F;&#x2F;获取当前的值，并自增<br>public final int getAndDecrement() &#x2F;&#x2F;获取当前的值，并自减<br>public final int getAndAdd(int delta) &#x2F;&#x2F;获取当前的值，并加上预期的值</p>
<p>AtomicInteger源码分析——基于CAS的乐观锁实现</p>
<ol>
<li><p>悲观锁与乐观锁<br> 我们都知道，cpu是时分复用的，也就是把cpu的时间片，分配给不同的thread&#x2F;process轮流执行，时间片与时间片之间，需要进行cpu切换，也就是会发生进程的切换。切换涉及到清空寄存器，缓存数据。然后重新加载新的thread所需数据。当一个线程被挂起时，加入到阻塞队列，在一定的时间或条件下，在通过notify()，notifyAll()唤醒回来。在某个资源不可用的时候，就将cpu让出，把当前等待线程切换为阻塞状态。等到资源(比如一个共享数据）可用了，那么就将线程唤醒，让他进入runnable状态等待cpu调度。这就是典型的悲观锁的实现。独占锁是一种悲观锁，synchronized就是一种独占锁，它假设最坏的情况，并且只有在确保其它线程不会造成干扰的情况下执行，会导致其它所有需要锁的线程挂起，等待持有锁的线程释放锁。<br><br> 但是，由于在进程挂起和恢复执行过程中存在着很大的开销。当一个线程正在等待锁时，它不能做任何事，所以悲观锁有很大的缺点。举个例子，如果一个线程需要某个资源，但是这个资源的占用时间很短，当线程第一次抢占这个资源时，可能这个资源被占用，如果此时挂起这个线程，可能立刻就发现资源可用，然后又需要花费很长的时间重新抢占锁，时间代价就会非常的高。<br><br> 所以就有了乐观锁的概念，他的核心思路就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。在上面的例子中，某个线程可以不让出cpu,而是一直while循环，如果失败就重试，直到成功为止。所以，当数据争用不严重时，乐观锁效果更好。比如CAS就是一种乐观锁思想的应用。</p>
</li>
<li><p>java中CAS的实现<br>   CAS就是Compare and Swap的意思，比较并操作。很多的cpu直接支持CAS指令。CAS是项乐观锁技术，当多个线程尝试使用CAS同时更新同一个变量时，只有其中一个线程能更新变量的值，而其它线程都失败，失败的线程并不会被挂起，而是被告知这次竞争中失败，并可以再次尝试。CAS有3个操作数，内存值V，旧的预期值A，要修改的新值B。当且仅当预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做。</p>
<pre><code> JDK1.5中引入了底层的支持，在int、long和对象的引用等类型上都公开了CAS的操作，并且JVM把它们编译为底层硬件提供的最有效的方法，在运行CAS的平台上，运行时把它们编译为相应的机器指令。在java.util.concurrent.atomic包下面的所有的原子变量类型中，比如AtomicInteger，都使用了这些底层的JVM支持为数字类型的引用类型提供一种高效的CAS操作。
   
   在CAS操作中，会出现ABA问题。就是如果V的值先由A变成B，再由B变成A，那么仍然认为是发生了变化，并需要重新执行算法中的步骤。有简单的解决方案：不是更新某个引用的值，而是更新两个值，包括一个引用和一个版本号，即使这个值由A变为B，然后为变为A，版本号也是不同的。AtomicStampedReference和AtomicMarkableReference支持在两个变量上执行原子的条件更新。AtomicStampedReference更新一个“对象-引用”二元组，通过在引用上加上“版本号”，从而避免ABA问题，AtomicMarkableReference将更新一个“对象引用-布尔值”的二元组。
</code></pre>
</li>
<li><p>AtomicInteger的实现。<br> AtomicInteger 是一个支持原子操作的 Integer 类，就是保证对AtomicInteger类型变量的增加和减少操作是原子性的，不会出现多个线程下的数据不一致问题。如果不使用 AtomicInteger，要实现一个按顺序获取的 ID，就必须在每次获取时进行加锁操作，以避免出现并发时获取到同样的 ID 的现象。</p>
</li>
</ol>
<p>  接下来通过源代码来看AtomicInteger具体是如何实现的原子操作。</p>
<p>首先看incrementAndGet() 方法，下面是具体的代码。</p>
<p>public final int incrementAndGet() {<br>        for (;;) {<br>            int current &#x3D; get();<br>            int next &#x3D; current + 1;<br>            if (compareAndSet(current, next))<br>                return next;<br>        }<br>    }</p>
<pre><code> 通过源码，可以知道，这个方法的做法为先获取到当前的 value 属性值，然后将 value 加 1，赋值给一个局部的 next 变量，然而，这两步都是非线程安全的，但是内部有一个死循环，不断去做compareAndSet操作，直到成功为止，也就是修改的根本在compareAndSet方法里面，compareAndSet()方法的代码如下：
</code></pre>
<p>public final boolean compareAndSet(int expect, int update) {<br>        return unsafe.compareAndSwapInt(this, valueOffset, expect, update);<br>    }</p>
<p>compareAndSet()方法调用的compareAndSwapInt()方法的声明如下，是一个native方法。</p>
<p>   publicfinal native boolean compareAndSwapInt(Object var1, long var2, int var4, intvar5);</p>
<p>   compareAndSet 传入的为执行方法时获取到的 value 属性值，next 为加 1 后的值， compareAndSet所做的为调用 Sun 的 UnSafe 的 compareAndSwapInt 方法来完成，此方法为 native 方法，compareAndSwapInt 基于的是CPU 的 CAS指令来实现的。所以基于 CAS 的操作可认为是无阻塞的，一个线程的失败或挂起不会引起其它线程也失败或挂起。并且由于 CAS 操作是 CPU 原语，所以性能比较好。</p>
<pre><code>     类似的，还有decrementAndGet()方法。它和incrementAndGet()的区别是将 value 减 1，赋值给next 变量。

     AtomicInteger中还有getAndIncrement() 和getAndDecrement() 方法，他们的实现原理和上面的两个方法完全相同，区别是返回值不同，前两个方法返回的是改变之后的值，即next。而这两个方法返回的是改变之前的值，即current。还有很多的其他方法，就不列举了。
</code></pre>
<p>————————————————<br>版权声明：本文为CSDN博主「bestStyle」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qfycc92/article/details/46489553">https://blog.csdn.net/qfycc92/article/details/46489553</a></p>
<h1 id="公平锁和非公平锁"><a href="#公平锁和非公平锁" class="headerlink" title="公平锁和非公平锁"></a>公平锁和非公平锁</h1><h2 id="公平锁和非公平锁-1"><a href="#公平锁和非公平锁-1" class="headerlink" title="公平锁和非公平锁"></a>公平锁和非公平锁</h2><p>公平锁是指各个线程在加锁前先检查有无排队的线程，按排队顺序去获得锁。</p>
<p> 非公平锁是指线程加锁前不考虑排队问题，直接尝试获取锁，获取不到再去队尾排队。值得注意的是，在 AQS 的实现中，一旦线程进入排队队列，即使是非公平锁，线程也得乖乖排队。</p>
<ul>
<li>①. 什么是公平锁和非公平锁</li>
</ul>
<p>公平锁：是指多个线程按照<strong>申请锁的顺序来获取锁</strong>类似排队打饭先来后到</p>
<p>非公平锁：是指在多线程获取锁的顺序并不是按照申请锁的顺序,有可能后申请的线程比先申请的线程优先获取到锁,在高并发的情况下,有可能造成优先级反转或者饥饿现象</p>
<p>注意：synchronized 和 ReentrantLock 默认是非公平锁</p>
<p>②. 排队抢票案例(公平出现锁饥饿)</p>
<p>锁饥饿:我们使用5个线程买100张票,使用ReentrantLock默认是非公平锁,获取到的结果可能都是A线程在出售这100张票,会导致B、C、D、E线程发生锁饥饿(使用公平锁会有什么问题)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Ticket &#123;</span><br><span class="line">    private int number = 50;</span><br><span class="line"></span><br><span class="line">    private Lock lock = new ReentrantLock(true); //默认用的是非公平锁，分配的平均一点，=--》公平一点</span><br><span class="line">    public void sale() &#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        try &#123;</span><br><span class="line">            if(number &gt; 0) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+&quot;\t 卖出第: &quot;+(number--)+&quot;\t 还剩下: &quot;+number);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /*Object objectLock = new Object();</span><br><span class="line"></span><br><span class="line">    public void sale()&#123;</span><br><span class="line">        synchronized (objectLock)</span><br><span class="line">        &#123;</span><br><span class="line">            if(number &gt; 0)</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+&quot;\t 卖出第: &quot;+(number--)+&quot;\t 还剩下: &quot;+number);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;*/</span><br><span class="line">&#125;</span><br><span class="line">public class SaleTicketDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Ticket ticket = new Ticket();</span><br><span class="line">        new Thread(() -&gt; &#123; for (int i = 1; i &lt;=55; i++) ticket.sale(); &#125;,&quot;a&quot;).start();</span><br><span class="line">        new Thread(() -&gt; &#123; for (int i = 1; i &lt;=55; i++) ticket.sale(); &#125;,&quot;b&quot;).start();</span><br><span class="line">        new Thread(() -&gt; &#123; for (int i = 1; i &lt;=55; i++) ticket.sale(); &#125;,&quot;c&quot;).start();</span><br><span class="line">        new Thread(() -&gt; &#123; for (int i = 1; i &lt;=55; i++) ticket.sale(); &#125;,&quot;d&quot;).start();</span><br><span class="line">        new Thread(() -&gt; &#123; for (int i = 1; i &lt;=55; i++) ticket.sale(); &#125;,&quot;e&quot;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>③. 源码解读(ReentrantLock默认是非公平锁)</p>
<ol>
<li><p>公平锁:排序排队公平锁,就是判断同步队列是否还有先驱节点的存在(我前面还有人吗?),如果没有先驱节点才能获锁</p>
</li>
<li><p>先占先得非公平锁,是不管这个事的,只要能抢获到同步状态就可以</p>
</li>
<li><p>ReentrantLock默认是非公平锁,公平锁要多一个方法,所以非公平锁的性能更好(aqs源码)</p>
</li>
</ol>
<p><img src="/%E9%94%81/a7f483a7fa6648de8cd19762421953c3.png" alt="微信图片_20220106185212.png"></p>
<p>面试题</p>
<p> <strong>恢复挂起的线程到真正锁的获取还是有时间差的,?为什么默认非公平？</strong></p>
<p>恢复挂起的线程到真正锁的获取还是有时间差的,从开发人员来看这个时间微乎其微,但是从CPU的角度来看,这个时间存在的还是很明显的,所以非公平锁能更充分的利用CPU的时间片,尽量减少CPU空闲状态时间</p>
<p>使用多线程很重要的考量点是线程切换的开销,当采用非公平锁时,当一个线程请求锁获取同步状态,然后释放同步状态,因为不需要考虑是否还有前驱节点,所以刚释放锁的线程在此刻再次获取同步状态的概率就变得非常大了,所以就减少了线程的开销线程的开销</p>
<p><strong>什么时候用公平？什么时候用非公平？</strong></p>
<p>(如果为了更高的吞吐量,很显然非公平锁是比较合适的,因为节省很多线程切换时间,吞吐量自然就上去了。否则那就用公平锁,大家公平使用)</p>
]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA插件</title>
    <url>/2022/02/11/Java/IDEA/IDEA%E6%8F%92%E4%BB%B6/IDEA%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="zookeeper-客户端工具-idea-插件zookeeper-tools（zoolytic）"><a href="#zookeeper-客户端工具-idea-插件zookeeper-tools（zoolytic）" class="headerlink" title="zookeeper 客户端工具 idea 插件zookeeper tools（zoolytic）"></a>zookeeper 客户端工具 idea 插件zookeeper tools（zoolytic）</h1><p><img src="/IDEA%E6%8F%92%E4%BB%B6/image-20220226171544120.png" alt="image-20220226171544120"></p>
<p><img src="/IDEA%E6%8F%92%E4%BB%B6/image-20220226171557691.png" alt="image-20220226171557691"></p>
<h1 id="IDEA好用的插件Codota-一个代码提示和类API示例的插件"><a href="#IDEA好用的插件Codota-一个代码提示和类API示例的插件" class="headerlink" title="IDEA好用的插件Codota(一个代码提示和类API示例的插件)"></a>IDEA好用的插件Codota(一个代码提示和类API示例的插件)</h1><p>IDEA—Settings—Plugins，输入codota</p>
<p> 各种代码提示，自动补全，更多便捷功能等你发现。。。。。。</p>
<h1 id="IDEA插件Free-Mybatis-plugin"><a href="#IDEA插件Free-Mybatis-plugin" class="headerlink" title="IDEA插件Free Mybatis plugin"></a>IDEA插件Free Mybatis plugin</h1><p> free-idea-mybatis是一款增强idea对mybatis支持的插件，主要功能如下：</p>
<ul>
<li>生成mapper xml文件</li>
<li>快速从代码跳转到mapper及从mapper返回代码</li>
<li>mybatis自动补全及语法错误提示</li>
</ul>
<h3 id="灵活使用alt-enter和ctrl-B实现提示和跳转"><a href="#灵活使用alt-enter和ctrl-B实现提示和跳转" class="headerlink" title="灵活使用alt+enter和ctrl+B实现提示和跳转"></a>灵活使用alt+enter和ctrl+B实现提示和跳转</h3><p><strong>生成mapper文件</strong></p>
<p>alter+enter弹出 。</p>
<p>根据数据库字段生产bean</p>
<p>快捷生成CURD操作</p>
<p>安装好这个插件之后，就可以随便跳转和参数自动补全了，很方便。  </p>
<h1 id="Lombok插件"><a href="#Lombok插件" class="headerlink" title="Lombok插件"></a>Lombok插件</h1><p>搜索  Lombok</p>
<p>引入pom中依赖，当前最细版本1.18.10。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在创建SpringBoot项目时直接在“Developer Tool”中选择Lombok。</p>
<p>同时，在插件的描述中也能够看到它支持的注解。</p>
<p><img src="/IDEA%E6%8F%92%E4%BB%B6/image-20220226172329271.png" alt="image-20220226172329271"></p>
<h1 id="JRebel插件"><a href="#JRebel插件" class="headerlink" title="JRebel插件"></a>JRebel插件</h1><p>Jrebel 可快速实现热部署，节省了大量重启时间，提高了个人开发效率。</p>
<p><img src="/IDEA%E6%8F%92%E4%BB%B6/image-20220226172549937.png" alt="image-20220226172549937"></p>
<blockquote>
<p><strong>第二步：在线GUID地址：在线生成GUID</strong></p>
</blockquote>
<blockquote>
<p>网址：<a href="https://www.guidgen.com/">在线GUID地址</a></p>
</blockquote>
<p><strong>打开jrebel 如下所示面板，选择Connect to online licensing service</strong></p>
<p><img src="/IDEA%E6%8F%92%E4%BB%B6/image-20220226172919619.png" alt="image-20220226172919619"></p>
<p> <strong>Ctrl+shift+F9</strong></p>
<blockquote>
<p><strong>设置自动编译</strong></p>
</blockquote>
<blockquote>
<p>要想实现热部署，首先需要对Intellij按如下进行设置：</p>
</blockquote>
<blockquote>
<ol>
<li>由于JRebel是实时监控class文件的变化来实现热部署的，所以在idea环境下需要打开自动变异功能才能实现随时修改，随时生效。</li>
</ol>
</blockquote>
<p><img src="/IDEA%E6%8F%92%E4%BB%B6/2021020317084925.png" alt="在这里插入图片描述"></p>
<blockquote>
<ol>
<li>打开运行时编译</li>
</ol>
</blockquote>
<blockquote>
<p><strong>设置compiler.automake.allow.when.app.running</strong></p>
</blockquote>
<blockquote>
<p>快捷键ctrl+shift+A，搜索：registry</p>
</blockquote>
<blockquote>
<p>或者</p>
</blockquote>
<blockquote>
<p>按快捷键 Ctrl+Shift+Alt+&#x2F; ，选择 Registry</p>
</blockquote>
<p><img src="/IDEA%E6%8F%92%E4%BB%B6/20210203170913434.png" alt="在这里插入图片描述"></p>
<p><img src="/IDEA%E6%8F%92%E4%BB%B6/20210203170904819.png" alt="在这里插入图片描述"></p>
<p><strong>使用</strong></p>
<blockquote>
<p>运行项目时要点击图中红框中的按钮，即可运行：</p>
</blockquote>
<p><img src="/IDEA%E6%8F%92%E4%BB%B6/20210203170927455.png" alt="在这里插入图片描述"></p>
<blockquote>
<p>第一个按钮是Run，第二个按钮是Debug。</p>
</blockquote>
<blockquote>
<p>修改代码（只测试了Java代码的修改）后，按快捷键 <strong>Ctrl + Shift + F9</strong>，运行后会提示有变化是否重新加载，选yes。完成加载以后，就已经实现了热更新效果。</p>
</blockquote>
]]></content>
      <categories>
        <category>IDEA</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA配置与操作</title>
    <url>/2021/11/19/Java/IDEA/IDEA%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%93%8D%E4%BD%9C/IDEA%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="IDEA配置与操作"><a href="#IDEA配置与操作" class="headerlink" title="IDEA配置与操作"></a>IDEA配置与操作</h2><p>下面是Auto Import设置步骤详解。</p>
<p>Settings→Editor→General→Auto Import<br>然后勾选Add unambiguous imports on the fly以及Optimize imports on the fly</p>
<p><img src="/IDEA%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%93%8D%E4%BD%9C/1337265-20180413112619423-1610499505.png" alt="img"></p>
<p>Add unambiguous imports on the fly：快速添加明确的导入。</p>
<p>Optimize imports on the fly：快速优化导入，优化的意思即自动帮助删除无用的导入。</p>
<h2 id="2-IntelliJ-Idea设置-自定义的-类代码注释模板"><a href="#2-IntelliJ-Idea设置-自定义的-类代码注释模板" class="headerlink" title="2.IntelliJ Idea设置(自定义的)类代码注释模板"></a>2.IntelliJ Idea设置(自定义的)类代码注释模板</h2><p>用IntelliJ Idea开发的时候代码没有注释或者注释不如人意，我们就自定义一下类代码的注释。</p>
<p> 一、打开Settings – Editor – Code Style – File and Code Templates</p>
<p><img src="/IDEA%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%93%8D%E4%BD%9C/image-20220123171022850.png" alt="image-20220123171022850"></p>
<p> 二、注释模板内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">COPY/**</span><br><span class="line">* $&#123;DESCRIPTION&#125;</span><br><span class="line">* @author 名字</span><br><span class="line">* @create $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125; $&#123;TIME&#125;</span><br><span class="line">**/</span><br></pre></td></tr></table></figure>



<h2 id="3-取消Idea开始界面打开默认项目配置"><a href="#3-取消Idea开始界面打开默认项目配置" class="headerlink" title="3.取消Idea开始界面打开默认项目配置"></a>3.取消Idea开始界面打开默认项目配置</h2><p>去掉默认的勾选Reopen last project on startup（在启动的时候打开上次的项目），去掉勾选之后，点击确认。</p>
<p><img src="/IDEA%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%93%8D%E4%BD%9C/image-20220123171130128.png" alt="image-20220123171130128"></p>
<p>Confirm application exit   关闭了当前的工作空间  关闭确认提示    打开</p>
<h2 id="4-IDEA使用—代码如何在方法之间加入一条分割线"><a href="#4-IDEA使用—代码如何在方法之间加入一条分割线" class="headerlink" title="4.IDEA使用—代码如何在方法之间加入一条分割线"></a>4.IDEA使用—代码如何在方法之间加入一条分割线</h2><p><img src="/IDEA%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%93%8D%E4%BD%9C/image-20220123171433972.png" alt="image-20220123171433972"><br>把【Show method separators】打上勾即可。</p>
<h2 id="5-IDEA查看源码返回上一级快捷键"><a href="#5-IDEA查看源码返回上一级快捷键" class="headerlink" title="5.IDEA查看源码返回上一级快捷键"></a>5.IDEA查看源码返回上一级快捷键</h2><p>快捷键 alt + 方向左键 放回上一级</p>
<h2 id="6-打印日志时不同颜色插件"><a href="#6-打印日志时不同颜色插件" class="headerlink" title="6.打印日志时不同颜色插件"></a>6.打印日志时不同颜色插件</h2><p>Grep Console</p>
<h2 id="7-mapper与xml文件切换插件"><a href="#7-mapper与xml文件切换插件" class="headerlink" title="7.mapper与xml文件切换插件"></a>7.mapper与xml文件切换插件</h2><p>Free Mybatis plugin</p>
<h2 id="8-IDEA插件文件夹"><a href="#8-IDEA插件文件夹" class="headerlink" title="8.IDEA插件文件夹"></a>8.IDEA插件文件夹</h2><p>C:\Users\【用户名】\AppData\Roaming\JetBrains\IntelliJIdea2020.1</p>
]]></content>
      <categories>
        <category>IDEA</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>登录的实现</title>
    <url>/2021/01/24/Java/%E7%99%BB%E9%99%86/%E5%AE%9E%E7%8E%B0%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81%E7%9A%84%E6%A0%A1%E9%AA%8C/%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81%E7%9A%84%E6%A0%A1%E9%AA%8C/</url>
    <content><![CDATA[<h1 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h1><p>登录的时候会随机生成验证码，如何把这个验证码和当前用户对应起来，实现验证码的校验呢？</p>
<img src="%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81%E7%9A%84%E6%A0%A1%E9%AA%8C/640" alt="图片" style="zoom:50%;" />



<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Kaptcha 生成随机字符、生成图片（生成用于验证码）--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.penggle<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kaptcha<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="获取验证码"><a href="#获取验证码" class="headerlink" title="获取验证码"></a>获取验证码</h2><p>显然，由于这个时候用户还没有登录，我们是没有办法通过用户的 id 来唯一的对应它的验证码的。</p>
<p>所以这个时候我们考虑生成一个随机的 id 来暂时的代替这个用户，将其和对应的验证码<strong>暂时</strong>存入 Redis 中（60s）。并且在 Cookie 中暂时存一份为这个用户生成的随机 id（60s）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成验证码, 并存入 Redis</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/kaptcha&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getKaptcha</span><span class="params">(HttpServletResponse response)</span> &#123;</span><br><span class="line">    <span class="comment">// 生成验证码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> kaptchaProducer.createText(); <span class="comment">// 生成随机字符 谷歌包下的</span></span><br><span class="line">    System.out.println(<span class="string">&quot;验证码：&quot;</span> + text);</span><br><span class="line">    <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> kaptchaProducer.createImage(text); <span class="comment">// 生成图片</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 验证码的归属者</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">kaptchaOwner</span> <span class="operator">=</span> UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;kaptchaOwner&quot;</span>, kaptchaOwner);</span><br><span class="line">    cookie.setMaxAge(<span class="number">60</span>);</span><br><span class="line">    <span class="comment">//contextPath  项目访问路径 http://localhost:8080/</span></span><br><span class="line">    cookie.setPath(contextPath);</span><br><span class="line">    response.addCookie(cookie);</span><br><span class="line">    <span class="comment">//加层包装  &quot;kaptcha:&quot;</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">redisKey</span> <span class="operator">=</span> RedisKeyUtil.getKaptchaKey(kaptchaOwner);</span><br><span class="line">    <span class="comment">// 将验证码存入 redis</span></span><br><span class="line">    redisTemplate.opsForValue().set(redisKey, text, <span class="number">60</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将图片输出给浏览器</span></span><br><span class="line">    response.setContentType(<span class="string">&quot;image/png&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">ServletOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">        ImageIO.write(image, <span class="string">&quot;png&quot;</span>, os);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        logger.error(<span class="string">&quot;响应验证码失败&quot;</span>, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，当用户点击登录按钮后，就会去 Cookie 中获取这个随机 id，然后去 Redis 中查询对应的验证码，判断用户输入的验证码是否一致。</p>
<h2 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h2><p>解释一下，每个用户登录成功后，我们都会为其生成一个随机的唯一的登录凭证实体类对象 <code>LoginTicket</code>（包含用户 id、登录凭证字符串 ticket、是否有效、过期时间）</p>
<p>我们把这个登录凭证实体类对象 存储在 Redis 中（key 就是登录凭证字符串 ticket）</p>
<p>而所谓登录凭证的无效，就是指用户登出后，这个凭证就会被设置为无效状态；凭证的默认过期时间是 1000s。这段代码在 <code>UserService</code> 中：</p>
<p>并且，我们在 Cookie 中也同样存储了一份登录凭证的字符串 ticket，过期时间和 Redis 中的是一样的。点击记住我可以延长过期时间。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户登录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username 用户名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> password 密码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> code 验证码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rememberMe 是否记住我（点击记住我后，凭证的有效期延长）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> kaptchaOwner 从 cookie 中取出的 kaptchaOwner</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String username,</span></span><br><span class="line"><span class="params">                    <span class="meta">@RequestParam(&quot;password&quot;)</span> String password,</span></span><br><span class="line"><span class="params">                    <span class="meta">@RequestParam(&quot;code&quot;)</span> String code,</span></span><br><span class="line"><span class="params">                    <span class="meta">@RequestParam(value = &quot;rememberMe&quot;, required = false)</span> <span class="type">boolean</span> rememberMe,</span></span><br><span class="line"><span class="params">                    Model model, HttpServletResponse response,</span></span><br><span class="line"><span class="params">                    <span class="meta">@CookieValue(&quot;kaptchaOwner&quot;)</span> String kaptchaOwner)</span> &#123;</span><br><span class="line">    <span class="comment">// 检查验证码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">kaptcha</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isNotBlank(kaptchaOwner)) &#123;</span><br><span class="line">        <span class="comment">//不是空的话进行获取</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">redisKey</span> <span class="operator">=</span> RedisKeyUtil.getKaptchaKey(kaptchaOwner);</span><br><span class="line">        kaptcha = (String) redisTemplate.opsForValue().get(redisKey);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//判断传入的跟获取的是否是一样</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(kaptcha) || StringUtils.isBlank(code) || !kaptcha.equalsIgnoreCase(code)) &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;codeMsg&quot;</span>, <span class="string">&quot;验证码错误&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/site/login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 凭证过期时间（是否记住我）</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">expiredSeconds</span> <span class="operator">=</span> rememberMe ? REMEMBER_EXPIRED_SECONDS : DEFAULT_EXPIRED_SECONDS;</span><br><span class="line">    <span class="comment">// 验证用户名和密码</span></span><br><span class="line">    Map&lt;String, Object&gt; map = userService.login(username, password, expiredSeconds);</span><br><span class="line">    <span class="keyword">if</span> (map.containsKey(<span class="string">&quot;ticket&quot;</span>)) &#123;</span><br><span class="line">        <span class="comment">// 账号和密码均正确，则服务端会生成 ticket，浏览器通过 cookie 存储 ticket</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;ticket&quot;</span>, map.get(<span class="string">&quot;ticket&quot;</span>).toString());</span><br><span class="line">        cookie.setPath(contextPath); <span class="comment">// cookie 有效范围</span></span><br><span class="line">        cookie.setMaxAge(expiredSeconds);</span><br><span class="line">        response.addCookie(cookie);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;usernameMsg&quot;</span>, map.get(<span class="string">&quot;usernameMsg&quot;</span>));</span><br><span class="line">        model.addAttribute(<span class="string">&quot;passwordMsg&quot;</span>, map.get(<span class="string">&quot;passwordMsg&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/site/login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<p>&#x2F;&#x2F;OK，用户输入用户名和密码并且校验完验证码之后，就登录成功了，那我们如何在一次请求中去保存这个用户的状态？如何回显用户的信息呢？<br>&#x2F;&#x2F;设计了一个 LoginTicket 类</p>
<p>&#x2F;&#x2F;用户登陆的login</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户登录（为用户创建凭证）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> expiredSeconds 多少秒后凭证过期</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Map&lt;String, Object&gt; 返回错误提示消息以及 ticket(凭证)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">login</span><span class="params">(String username, String password, <span class="type">int</span> expiredSeconds)</span> &#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 空值处理</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(username)) &#123;</span><br><span class="line">        map.put(<span class="string">&quot;usernameMsg&quot;</span>, <span class="string">&quot;账号不能为空&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(password)) &#123;</span><br><span class="line">        map.put(<span class="string">&quot;passwordMsg&quot;</span>, <span class="string">&quot;密码不能为空&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证账号</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectByName(username);</span><br><span class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">        map.put(<span class="string">&quot;usernameMsg&quot;</span>, <span class="string">&quot;该账号不存在&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证状态</span></span><br><span class="line">    <span class="keyword">if</span> (user.getStatus() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 账号未激活</span></span><br><span class="line">        map.put(<span class="string">&quot;usernameMsg&quot;</span>, <span class="string">&quot;该账号未激活&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验证密码</span></span><br><span class="line">    password = CommunityUtil.md5(password + user.getSalt());</span><br><span class="line">    <span class="keyword">if</span> (!user.getPassword().equals(password)) &#123;</span><br><span class="line">        map.put(<span class="string">&quot;passwordMsg&quot;</span>, <span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用户名和密码均正确，为该用户生成登录凭证</span></span><br><span class="line">    <span class="type">LoginTicket</span> <span class="variable">loginTicket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoginTicket</span>();</span><br><span class="line">    loginTicket.setUserId(user.getId());</span><br><span class="line">    loginTicket.setTicket(CommunityUtil.generateUUID()); <span class="comment">// 随机凭证</span></span><br><span class="line">    loginTicket.setStatus(<span class="number">0</span>); <span class="comment">// 设置凭证状态为有效（当用户登出的时候，设置凭证状态为无效）</span></span><br><span class="line">    loginTicket.setExpired(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + expiredSeconds * <span class="number">1000</span>)); <span class="comment">// 设置凭证到期时间</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将登录凭证存入 redis</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">redisKey</span> <span class="operator">=</span> RedisKeyUtil.getTicketKey(loginTicket.getTicket());</span><br><span class="line">    redisTemplate.opsForValue().set(redisKey, loginTicket);</span><br><span class="line"></span><br><span class="line">    map.put(<span class="string">&quot;ticket&quot;</span>, loginTicket.getTicket());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginTicket</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> userId;</span><br><span class="line">    <span class="keyword">private</span> String ticket; <span class="comment">// 凭证</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> status; <span class="comment">// 状态（是否有效）</span></span><br><span class="line">    <span class="keyword">private</span> Date expired; <span class="comment">// 过期时间</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>OK，存储完 <code>LoginTicket</code> 后，我们就可以根据它来获取用户的状态了。我们定义了一个拦截器 <code>LoginTicketInterceptor</code>，<strong>每次请求之前都会从 Cookie 获取到 ticket，然后根据 ticket 去 Redis 中查看这个用户的登录凭证 <code>LoginTicket</code> 是否过期和是否有效</strong>，只有登录凭证有效且没有过期才会执行请求，不然就会跳转到登录界面。</p>
<p>在 Controller 执行之前被调用<br> 检查凭证状态，若凭证有效则在本次请求中持有该用户信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.greate.community.controller.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.greate.community.entity.LoginTicket;</span><br><span class="line"><span class="keyword">import</span> com.greate.community.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.greate.community.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.greate.community.util.CookieUtil;</span><br><span class="line"><span class="keyword">import</span> com.greate.community.util.HostHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.context.SecurityContextImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginTicketInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HostHolder hostHolder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在 Controller 执行之前被调用</span></span><br><span class="line"><span class="comment">     * 检查凭证状态，若凭证有效则在本次请求中持有该用户信息</span></span><br><span class="line"><span class="comment">     * 1）在 Controller 执行之前：检查登录凭证状态，若登录凭证有效且未过期则在本次请求中持有该用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 从 cookie 中获取凭证</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">ticket</span> <span class="operator">=</span> CookieUtil.getValue(request, <span class="string">&quot;ticket&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (ticket != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 查询凭证</span></span><br><span class="line">            <span class="type">LoginTicket</span> <span class="variable">loginTicket</span> <span class="operator">=</span> userService.findLoginTicket(ticket);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 检查凭证状态（是否有效）以及是否过期</span></span><br><span class="line">            <span class="keyword">if</span> (loginTicket != <span class="literal">null</span> &amp;&amp; loginTicket.getStatus() == <span class="number">0</span> &amp;&amp; loginTicket.getExpired().after(<span class="keyword">new</span> <span class="title class_">Date</span>())) &#123;</span><br><span class="line">                <span class="comment">// 根据凭证查询用户</span></span><br><span class="line">                <span class="comment">//这里有一个点我们进行了稍微的优化。就是我们的拦截器在每次请求前通过 Cookie 去 Redis 中查询登录凭证 LoginTicket </span></span><br><span class="line">                <span class="comment">//然后获取到用户 id 后，需要去数据库中查询用户信息，然后才能在本次请求中持有用户信息。</span></span><br><span class="line">                <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.findUserById(loginTicket.getUserId());</span><br><span class="line">                <span class="comment">// 在本次请求中持有用户信息</span></span><br><span class="line">                hostHolder.setUser(user);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 认证的话上面大家也看到了，是我们自己写的逻辑，跳过了 Spring Security，那我们就需要把我们自己做的逻辑认证的结果存入 SecurityContext，以便于 Spring Security 进行授权</span></span><br><span class="line">                <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(</span><br><span class="line">                        user, user.getPassword(), userService.getAuthorities(user.getId())</span><br><span class="line">                );</span><br><span class="line">                SecurityContextHolder.setContext(<span class="keyword">new</span> <span class="title class_">SecurityContextImpl</span>(authentication));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2）在模板引擎之前：将用户信息存入 modelAndView，便于模板引擎调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> hostHolder.getUser();</span><br><span class="line">        <span class="keyword">if</span> (user != <span class="literal">null</span> &amp;&amp; modelAndView != <span class="literal">null</span>) &#123;</span><br><span class="line">            modelAndView.addObject(<span class="string">&quot;loginUser&quot;</span>, user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3）在 Controller 执行之后（即服务端对本次请求做出响应后）：清理本次请求持有的用户信息（也就是 ThreadLocal 的 remove，如果没有即时 remove 会导致 OOM）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        hostHolder.clear();</span><br><span class="line">        SecurityContextHolder.clearContext();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<p>从 request 中获取指定 name 的 cookie</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.greate.community.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CookieUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从 request 中获取指定 name 的 cookie</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getValue</span><span class="params">(HttpServletRequest request, String name)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (request == <span class="literal">null</span> || name == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;参数为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">if</span>(cookies != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(Cookie cookie : cookies) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cookie.getName().equals(name)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> cookie.getValue();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据 ticket 查询 LoginTicket 信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 ticket 查询 LoginTicket 信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ticket</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> LoginTicket <span class="title function_">findLoginTicket</span><span class="params">(String ticket)</span> &#123;</span><br><span class="line">    <span class="comment">// return loginTicketMapper.selectByTicket(ticket);</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">redisKey</span> <span class="operator">=</span> RedisKeyUtil.getTicketKey(ticket);</span><br><span class="line">    <span class="keyword">return</span> (LoginTicket) redisTemplate.opsForValue().get(redisKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>关于拦截器做的事情，我们来梳理一下：</p>
<p>1）在 Controller 执行之前：检查登录凭证状态，若登录凭证有效且未过期则在本次请求中持有该用户信息</p>
<p>2） Controller 执行之后：将用户信息存入 modelAndView，便于模板引擎调用</p>
<p>3）在 Controller 执行之后（即服务端对本次请求做出响应后）：清理本次请求持有的用户信息（也就是 <code>ThreadLocal</code> 的 <code>remove</code>，如果没有即时 <code>remove</code> 会导致 OOM）</p>
<p>如果该用户的登录凭证有效且没有过期，那我们就可以在本次请求中<strong>持有这个用户的信息</strong>了。</p>
<p>如果持有呢？一般来说可以使用 Session，但是 Session 无法在分布式存储中发挥有效的作用。</p>
<p>详细来说就是：客户端发送一个请求给服务器，经过负载均衡后该请求会被分发到集群中多个服务器中的其中一个，由于不同的服务器可能含有不同的 Web 服务器，而 Web 服务器之间并不能发现其他 Web 服务器中保存的 Session 信息，这样，它就会再次重新生成一个 JSESSIONID，导致之前的状态丢失。</p>
<p>所以这里我们考虑使用 <code>ThreadLocal</code> 保存用户信息，<code>ThreadLocal</code> 在每个线程中都创建了一个用户信息副本，也就是说每个线程都可以访问自己内部的用户信息副本变量。</p>
<p>来看下 <code>HostHolder</code> 类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.greate.community.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 持有用户信息(多线程)，用于代替 session 对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HostHolder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ThreadLocal&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 存储 User</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        users.set(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取 User</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> users.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清理</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        users.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>显然，每次请求前都需要经过这个步骤，这个访问数据库的频率还是很频繁的。因此我们考虑把登录成功的用户信息在 Redis 中保存一会，拦截器每次查询前先去 Redis 中查询，如果 Redis 中没有再去查询数据库，然后写进 Redis。OK，我们来看看 <code>findUserById</code> 方法具体是怎么实现的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据 Id 查询用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">findUserById</span> <span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">    <span class="comment">// return userMapper.selectById(id);</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> getCache(id); <span class="comment">// 优先从缓存中查询数据</span></span><br><span class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">        user = initCache(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 优先从缓存中取值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> User <span class="title function_">getCache</span><span class="params">(<span class="type">int</span> userId)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">redisKey</span> <span class="operator">=</span> RedisKeyUtil.getUserKey(userId);</span><br><span class="line">    <span class="keyword">return</span> (User) redisTemplate.opsForValue().get(redisKey);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓存中没有该用户信息时，则将其存入缓存</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> User <span class="title function_">initCache</span><span class="params">(<span class="type">int</span> userId)</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(userId);</span><br><span class="line">    <span class="type">String</span> <span class="variable">redisKey</span> <span class="operator">=</span> RedisKeyUtil.getUserKey(userId);</span><br><span class="line">    redisTemplate.opsForValue().set(redisKey, user, <span class="number">3600</span>, TimeUnit.SECONDS);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>缓存和数据库的一致性问题的话，使用的是<strong>旁路缓存模式</strong>，也就是先更新数据库，然后直接删除缓存中的数据。比如对于修改用户密码、修改用户头像、激活用户后用户 status 的改变等，这些涉及数据库表中字段更新的操作，都需要删除缓存：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改用户头像</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> headUrl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">updateHeader</span><span class="params">(<span class="type">int</span> userId, String headUrl)</span> &#123;</span><br><span class="line">    <span class="comment">// return userMapper.updateHeader(userId, headUrl);</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> userMapper.updateHeader(userId, headUrl);</span><br><span class="line">    clearCache(userId);</span><br><span class="line">    <span class="keyword">return</span> rows;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改用户密码（对新密码加盐加密存入数据库）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> newPassword 新密码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">updatePassword</span><span class="params">(<span class="type">int</span> userId, String newPassword)</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(userId);</span><br><span class="line">    <span class="comment">// 重新加盐加密</span></span><br><span class="line">    newPassword = CommunityUtil.md5(newPassword + user.getSalt());</span><br><span class="line">    clearCache(userId);</span><br><span class="line">    <span class="keyword">return</span> userMapper.updatePassword(userId, newPassword);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 激活用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userId 用户 id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> code 激活码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">activation</span><span class="params">(<span class="type">int</span> userId, String code)</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(userId);</span><br><span class="line">    <span class="keyword">if</span> (user.getStatus() == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 用户已激活</span></span><br><span class="line">        <span class="keyword">return</span> ACTIVATION_REPEAT;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (user.getActivationCode().equals(code)) &#123;</span><br><span class="line">        <span class="comment">// 修改用户状态为已激活</span></span><br><span class="line">        userMapper.updateStatus(userId, <span class="number">1</span>);</span><br><span class="line">        clearCache(userId); <span class="comment">// 用户信息变更，清除缓存中的旧数据</span></span><br><span class="line">        <span class="keyword">return</span> ACTIVATION_SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ACTIVATION_FAILURE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>可能有同学就会问了，<strong>为什么是直接删除缓存，而不是也相应的更新缓存呢</strong>？</p>
<p>答案很简单，在多线程的环境下，假设线程 A 更新了数据库中的某个字段为 1，如果在线程 A 提交之前，线程 B 又修改了这个字段为 2 并且先于线程 A 做了提交，那么线程 A 接下来提交的数据就是脏数据。直接删除缓存可以避免这个问题。</p>
<p>总的来说，这个认证流程是这样的：</p>
<ul>
<li>用户登录 —&gt; 生成登录凭证存入 Redis，Cookie 中存一份 key</li>
<li>每次执行请求都会通过 Cookie 去 Redis 中查询该用户的登陆凭证是否过期和是否有效。点击记住我可以延长登录凭证的过期时间，用户退出则其登录凭证变为无效状态</li>
<li>根据这个登录凭证对应的用户 id，去数据库中查询这个用户信息</li>
<li>使用 ThreadLocal 在本次请求中一直持有这个用户信息</li>
<li>优化点：每次请求前都需要去数据库查询这个用户信息，访问频率比较高，所以我们考虑把登录成功的用户信息在 Redis 中保存一会，拦截器每次查询前先去 Redis 中查询，然后缓存和数据库的一致性问题的话，使用的是旁路缓存模式，也就是先更新数据库，然后直接删除缓存中的数据。</li>
</ul>
<h1 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h1><p>认证的话上面大家也看到了，是我们自己写的逻辑，跳过了 Spring Security，那我们就需要把我们自己做的逻辑认证的结果存入 <code>SecurityContext</code>，以便于 Spring Security 进行授权：</p>
<p><img src="/%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81%E7%9A%84%E6%A0%A1%E9%AA%8C/image-20220226032154625.png" alt="image-20220226032154625"></p>
<p><code>getAuthorities</code> 就是从数据库中获取某个用户的权限（用户的权限&#x2F;类型 <code>type</code> 是存在数据库表中的）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取某个用户的权限</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities(<span class="type">int</span> userId) &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.findUserById(userId);</span><br><span class="line">    List&lt;GrantedAuthority&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">GrantedAuthority</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getAuthority</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (user.getType()) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> AUTHORITY_ADMIN;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">return</span> AUTHORITY_MODERATOR;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">return</span> AUTHORITY_USER;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义这些权限拥有访问哪些路径的权力，比如：</p>
<p><img src="/%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81%E7%9A%84%E6%A0%A1%E9%AA%8C/image-20220226032540830.png" alt="image-20220226032540830"></p>
<p>另外，还需要定义一下权限不够时需要做哪些处理，注意区分下异步请求和普通请求，对于异步请求我们返回一个 JSON 字符串，对于普通请求我们直接返回错误界面即可：</p>
<p><img src="/%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81%E7%9A%84%E6%A0%A1%E9%AA%8C/image-20220226032701375.png" alt="image-20220226032701375"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.greate.community.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.greate.community.util.CommunityConstant;</span><br><span class="line"><span class="keyword">import</span> com.greate.community.util.CommunityUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.AccessDeniedException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.WebSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.AuthenticationEntryPoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.web.access.AccessDeniedHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> <span class="keyword">implements</span> <span class="title class_">CommunityConstant</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态资源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> web</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        web.ignoring().antMatchers(<span class="string">&quot;/resources/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 认证环节我们使用自己的代码 LoginController，绕过 Spring Security 的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> http</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(</span><br><span class="line">                    <span class="string">&quot;/user/setting&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/user/upload&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/discuss/add&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/discuss/publish&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/comment/add/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/letter/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/notice/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/like&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/follow&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/unfollow&quot;</span></span><br><span class="line">                )</span><br><span class="line">                .hasAnyAuthority(</span><br><span class="line">                        AUTHORITY_USER,</span><br><span class="line">                        AUTHORITY_ADMIN,</span><br><span class="line">                        AUTHORITY_MODERATOR</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">                .antMatchers(</span><br><span class="line">                    <span class="string">&quot;/discuss/top&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/discuss/wonderful&quot;</span></span><br><span class="line">                )</span><br><span class="line">                .hasAnyAuthority(</span><br><span class="line">                        AUTHORITY_MODERATOR</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">                .antMatchers(</span><br><span class="line">                        <span class="string">&quot;/discuss/delete&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/discuss/delete/&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/data/**&quot;</span></span><br><span class="line">                )</span><br><span class="line">                .hasAnyAuthority(</span><br><span class="line">                        AUTHORITY_ADMIN</span><br><span class="line">                )</span><br><span class="line"></span><br><span class="line">                .anyRequest().permitAll()</span><br><span class="line"></span><br><span class="line">                .and().csrf().disable();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 权限不够时的处理</span></span><br><span class="line">        http.exceptionHandling()</span><br><span class="line">                <span class="comment">// 1. 未登录时的处理</span></span><br><span class="line">                .authenticationEntryPoint(<span class="keyword">new</span> <span class="title class_">AuthenticationEntryPoint</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commence</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException e)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">xRequestedWith</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;x-requested-with&quot;</span>);</span><br><span class="line">                        <span class="keyword">if</span> (<span class="string">&quot;XMLHttpRequest&quot;</span>.equals(xRequestedWith)) &#123;</span><br><span class="line">                            <span class="comment">// 异步请求</span></span><br><span class="line">                            response.setContentType(<span class="string">&quot;application/plain;charset=utf-8&quot;</span>);</span><br><span class="line">                            <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">                            writer.write(CommunityUtil.getJSONString(<span class="number">403</span>, <span class="string">&quot;你还没有登录&quot;</span>));</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">// 普通请求</span></span><br><span class="line">                            response.sendRedirect(request.getContextPath() + <span class="string">&quot;/login&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="comment">// 2. 权限不够时的处理</span></span><br><span class="line">                .accessDeniedHandler(<span class="keyword">new</span> <span class="title class_">AccessDeniedHandler</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AccessDeniedException e)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">xRequestedWith</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;x-requested-with&quot;</span>);</span><br><span class="line">                        <span class="keyword">if</span> (<span class="string">&quot;XMLHttpRequest&quot;</span>.equals(xRequestedWith)) &#123;</span><br><span class="line">                            <span class="comment">// 异步请求</span></span><br><span class="line">                            response.setContentType(<span class="string">&quot;application/plain;charset=utf-8&quot;</span>);</span><br><span class="line">                            <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">                            writer.write(CommunityUtil.getJSONString(<span class="number">403</span>, <span class="string">&quot;你没有访问该功能的权限&quot;</span>));</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="comment">// 普通请求</span></span><br><span class="line">                            response.sendRedirect(request.getContextPath() + <span class="string">&quot;/denied&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Security 底层会默认拦截 /logout 请求，进行退出处理</span></span><br><span class="line">        <span class="comment">// 此处赋予它一个根本不存在的退出路径，使得程序能够执行到我们自己编写的退出代码</span></span><br><span class="line">        http.logout().logoutUrl(<span class="string">&quot;/securitylogout&quot;</span>);</span><br><span class="line"></span><br><span class="line">        http.headers().frameOptions().sameOrigin();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>Spring Security 底层会默认拦截 <code>/logout</code> 请求，进行退出处理，由于退出的逻辑我们也自己实现了（将该用户的 <code>LoginTicket</code> 状态设置为无效）</p>
<p>用户退出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户退出（将凭证状态设为无效）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ticket</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logout</span><span class="params">(String ticket)</span> &#123;</span><br><span class="line">    <span class="comment">// loginTicketMapper.updateStatus(ticket, 1);</span></span><br><span class="line">    <span class="comment">// 修改（先删除再插入）对应用户在 redis 中的凭证状态</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">redisKey</span> <span class="operator">=</span> RedisKeyUtil.getTicketKey(ticket);</span><br><span class="line">    <span class="type">LoginTicket</span> <span class="variable">loginTicket</span> <span class="operator">=</span> (LoginTicket) redisTemplate.opsForValue().get(redisKey);</span><br><span class="line">    loginTicket.setStatus(<span class="number">1</span>);</span><br><span class="line">    redisTemplate.opsForValue().set(redisKey, loginTicket);</span><br><span class="line">&#125;</span><br><span class="line">SecurityContextHolder.clearContext();</span><br><span class="line"><span class="comment">//你好，每次请求处理完时要清空上下文，这个和threadlocal很相似，当前线程执行完清空上下文，避免内存泄漏等问题</span></span><br><span class="line"><span class="comment">//基于ThreadLocal的存储策略实现，看上去，这个类好像跟上面那个全局的没什么差别。但是要注意了，它是用ThreadLocal来存储的。新手可能会疑惑，就一个变量，我怎么存储多个上下文，这个变量又不是集合。</span></span><br><span class="line"><span class="comment">//这里就不分析源码了，实际上ThreadLocal内部会用数组来存储多个对象的。原理是，ThreadLocal会为每个线程开辟一个存储区域，来存储相应的对象。</span></span><br></pre></td></tr></table></figure>

<p>所以我们赋予 Spring Security 一个根本不存在的退出路径，使得程序能够执行到我们自己编写的退出代码：</p>
<p><img src="/%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81%E7%9A%84%E6%A0%A1%E9%AA%8C/image-20220226032813459.png" alt="image-20220226032813459"></p>
]]></content>
      <categories>
        <category>代码</category>
      </categories>
      <tags>
        <tag>代码</tag>
      </tags>
  </entry>
</search>
